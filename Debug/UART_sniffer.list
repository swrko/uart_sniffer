
UART_sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007048  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000730  080071d0  080071d0  000171d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007900  08007900  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  08007900  08007900  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007900  08007900  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007900  08007900  00017900  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007904  08007904  00017904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  08007908  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000157c  200001f0  08007af8  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000176c  08007af8  0002176c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017e1d  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00003528  00000000  00000000  0003803d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000d98  00000000  00000000  0003b568  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000c30  00000000  00000000  0003c300  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001bdf0  00000000  00000000  0003cf30  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fb31  00000000  00000000  00058d20  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000877be  00000000  00000000  00068851  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000f000f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000379c  00000000  00000000  000f008c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200001f0 	.word	0x200001f0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080071b8 	.word	0x080071b8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200001f4 	.word	0x200001f4
 80001c4:	080071b8 	.word	0x080071b8

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f90d 	bl	80003f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f006 fb16 	bl	8006814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f917 	bl	8000446 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f8ed 	bl	800040e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000448 	.word	0x20000448

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000448 	.word	0x20000448

08000294 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f003 0307 	and.w	r3, r3, #7
 80002a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002c6:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <NVIC_GetPriorityGrouping+0x18>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	f003 0307 	and.w	r3, r3, #7
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	da0b      	bge.n	8000324 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	; (8000344 <NVIC_SetPriority+0x4c>)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 030f 	and.w	r3, r3, #15
 8000318:	3b04      	subs	r3, #4
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000322:	e009      	b.n	8000338 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4907      	ldr	r1, [pc, #28]	; (8000348 <NVIC_SetPriority+0x50>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00
 8000348:	e000e100 	.word	0xe000e100

0800034c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034c:	b480      	push	{r7}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	f1c3 0307 	rsb	r3, r3, #7
 8000366:	2b04      	cmp	r3, #4
 8000368:	bf28      	it	cs
 800036a:	2304      	movcs	r3, #4
 800036c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3304      	adds	r3, #4
 8000372:	2b06      	cmp	r3, #6
 8000374:	d902      	bls.n	800037c <NVIC_EncodePriority+0x30>
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3b03      	subs	r3, #3
 800037a:	e000      	b.n	800037e <NVIC_EncodePriority+0x32>
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000380:	f04f 32ff 	mov.w	r2, #4294967295
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	43da      	mvns	r2, r3
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	401a      	ands	r2, r3
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000394:	f04f 31ff 	mov.w	r1, #4294967295
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43d9      	mvns	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	4313      	orrs	r3, r2
         );
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3724      	adds	r7, #36	; 0x24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003c4:	d301      	bcc.n	80003ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003c6:	2301      	movs	r3, #1
 80003c8:	e00f      	b.n	80003ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <SysTick_Config+0x40>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d2:	210f      	movs	r1, #15
 80003d4:	f04f 30ff 	mov.w	r0, #4294967295
 80003d8:	f7ff ff8e 	bl	80002f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <SysTick_Config+0x40>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e2:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <SysTick_Config+0x40>)
 80003e4:	2207      	movs	r2, #7
 80003e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	e000e010 	.word	0xe000e010

080003f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f7ff ff47 	bl	8000294 <NVIC_SetPriorityGrouping>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b086      	sub	sp, #24
 8000412:	af00      	add	r7, sp, #0
 8000414:	4603      	mov	r3, r0
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]
 800041a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000420:	f7ff ff5c 	bl	80002dc <NVIC_GetPriorityGrouping>
 8000424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	6978      	ldr	r0, [r7, #20]
 800042c:	f7ff ff8e 	bl	800034c <NVIC_EncodePriority>
 8000430:	4602      	mov	r2, r0
 8000432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff5d 	bl	80002f8 <NVIC_SetPriority>
}
 800043e:	bf00      	nop
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff ffb0 	bl	80003b4 <SysTick_Config>
 8000454:	4603      	mov	r3, r0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}
	...

08000460 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000460:	b480      	push	{r7}
 8000462:	b087      	sub	sp, #28
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800046e:	2300      	movs	r3, #0
 8000470:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000472:	2300      	movs	r3, #0
 8000474:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000476:	e14e      	b.n	8000716 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000478:	683b      	ldr	r3, [r7, #0]
 800047a:	681a      	ldr	r2, [r3, #0]
 800047c:	2101      	movs	r1, #1
 800047e:	697b      	ldr	r3, [r7, #20]
 8000480:	fa01 f303 	lsl.w	r3, r1, r3
 8000484:	4013      	ands	r3, r2
 8000486:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000488:	68fb      	ldr	r3, [r7, #12]
 800048a:	2b00      	cmp	r3, #0
 800048c:	f000 8140 	beq.w	8000710 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000490:	683b      	ldr	r3, [r7, #0]
 8000492:	685b      	ldr	r3, [r3, #4]
 8000494:	2b02      	cmp	r3, #2
 8000496:	d003      	beq.n	80004a0 <HAL_GPIO_Init+0x40>
 8000498:	683b      	ldr	r3, [r7, #0]
 800049a:	685b      	ldr	r3, [r3, #4]
 800049c:	2b12      	cmp	r3, #18
 800049e:	d123      	bne.n	80004e8 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004a0:	697b      	ldr	r3, [r7, #20]
 80004a2:	08da      	lsrs	r2, r3, #3
 80004a4:	687b      	ldr	r3, [r7, #4]
 80004a6:	3208      	adds	r2, #8
 80004a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004ae:	697b      	ldr	r3, [r7, #20]
 80004b0:	f003 0307 	and.w	r3, r3, #7
 80004b4:	009b      	lsls	r3, r3, #2
 80004b6:	220f      	movs	r2, #15
 80004b8:	fa02 f303 	lsl.w	r3, r2, r3
 80004bc:	43db      	mvns	r3, r3
 80004be:	693a      	ldr	r2, [r7, #16]
 80004c0:	4013      	ands	r3, r2
 80004c2:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80004c4:	683b      	ldr	r3, [r7, #0]
 80004c6:	691a      	ldr	r2, [r3, #16]
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f003 0307 	and.w	r3, r3, #7
 80004ce:	009b      	lsls	r3, r3, #2
 80004d0:	fa02 f303 	lsl.w	r3, r2, r3
 80004d4:	693a      	ldr	r2, [r7, #16]
 80004d6:	4313      	orrs	r3, r2
 80004d8:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	08da      	lsrs	r2, r3, #3
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	3208      	adds	r2, #8
 80004e2:	6939      	ldr	r1, [r7, #16]
 80004e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004ee:	697b      	ldr	r3, [r7, #20]
 80004f0:	005b      	lsls	r3, r3, #1
 80004f2:	2203      	movs	r2, #3
 80004f4:	fa02 f303 	lsl.w	r3, r2, r3
 80004f8:	43db      	mvns	r3, r3
 80004fa:	693a      	ldr	r2, [r7, #16]
 80004fc:	4013      	ands	r3, r2
 80004fe:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	685b      	ldr	r3, [r3, #4]
 8000504:	f003 0203 	and.w	r2, r3, #3
 8000508:	697b      	ldr	r3, [r7, #20]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	fa02 f303 	lsl.w	r3, r2, r3
 8000510:	693a      	ldr	r2, [r7, #16]
 8000512:	4313      	orrs	r3, r2
 8000514:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800051c:	683b      	ldr	r3, [r7, #0]
 800051e:	685b      	ldr	r3, [r3, #4]
 8000520:	2b01      	cmp	r3, #1
 8000522:	d00b      	beq.n	800053c <HAL_GPIO_Init+0xdc>
 8000524:	683b      	ldr	r3, [r7, #0]
 8000526:	685b      	ldr	r3, [r3, #4]
 8000528:	2b02      	cmp	r3, #2
 800052a:	d007      	beq.n	800053c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800052c:	683b      	ldr	r3, [r7, #0]
 800052e:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000530:	2b11      	cmp	r3, #17
 8000532:	d003      	beq.n	800053c <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000534:	683b      	ldr	r3, [r7, #0]
 8000536:	685b      	ldr	r3, [r3, #4]
 8000538:	2b12      	cmp	r3, #18
 800053a:	d130      	bne.n	800059e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	689b      	ldr	r3, [r3, #8]
 8000540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000542:	697b      	ldr	r3, [r7, #20]
 8000544:	005b      	lsls	r3, r3, #1
 8000546:	2203      	movs	r2, #3
 8000548:	fa02 f303 	lsl.w	r3, r2, r3
 800054c:	43db      	mvns	r3, r3
 800054e:	693a      	ldr	r2, [r7, #16]
 8000550:	4013      	ands	r3, r2
 8000552:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	68da      	ldr	r2, [r3, #12]
 8000558:	697b      	ldr	r3, [r7, #20]
 800055a:	005b      	lsls	r3, r3, #1
 800055c:	fa02 f303 	lsl.w	r3, r2, r3
 8000560:	693a      	ldr	r2, [r7, #16]
 8000562:	4313      	orrs	r3, r2
 8000564:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000566:	687b      	ldr	r3, [r7, #4]
 8000568:	693a      	ldr	r2, [r7, #16]
 800056a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	685b      	ldr	r3, [r3, #4]
 8000570:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000572:	2201      	movs	r2, #1
 8000574:	697b      	ldr	r3, [r7, #20]
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	43db      	mvns	r3, r3
 800057c:	693a      	ldr	r2, [r7, #16]
 800057e:	4013      	ands	r3, r2
 8000580:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000582:	683b      	ldr	r3, [r7, #0]
 8000584:	685b      	ldr	r3, [r3, #4]
 8000586:	091b      	lsrs	r3, r3, #4
 8000588:	f003 0201 	and.w	r2, r3, #1
 800058c:	697b      	ldr	r3, [r7, #20]
 800058e:	fa02 f303 	lsl.w	r3, r2, r3
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	4313      	orrs	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	693a      	ldr	r2, [r7, #16]
 800059c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	68db      	ldr	r3, [r3, #12]
 80005a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005a4:	697b      	ldr	r3, [r7, #20]
 80005a6:	005b      	lsls	r3, r3, #1
 80005a8:	2203      	movs	r2, #3
 80005aa:	fa02 f303 	lsl.w	r3, r2, r3
 80005ae:	43db      	mvns	r3, r3
 80005b0:	693a      	ldr	r2, [r7, #16]
 80005b2:	4013      	ands	r3, r2
 80005b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	689a      	ldr	r2, [r3, #8]
 80005ba:	697b      	ldr	r3, [r7, #20]
 80005bc:	005b      	lsls	r3, r3, #1
 80005be:	fa02 f303 	lsl.w	r3, r2, r3
 80005c2:	693a      	ldr	r2, [r7, #16]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	693a      	ldr	r2, [r7, #16]
 80005cc:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	f000 809a 	beq.w	8000710 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005dc:	4b55      	ldr	r3, [pc, #340]	; (8000734 <HAL_GPIO_Init+0x2d4>)
 80005de:	699b      	ldr	r3, [r3, #24]
 80005e0:	4a54      	ldr	r2, [pc, #336]	; (8000734 <HAL_GPIO_Init+0x2d4>)
 80005e2:	f043 0301 	orr.w	r3, r3, #1
 80005e6:	6193      	str	r3, [r2, #24]
 80005e8:	4b52      	ldr	r3, [pc, #328]	; (8000734 <HAL_GPIO_Init+0x2d4>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0301 	and.w	r3, r3, #1
 80005f0:	60bb      	str	r3, [r7, #8]
 80005f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80005f4:	4a50      	ldr	r2, [pc, #320]	; (8000738 <HAL_GPIO_Init+0x2d8>)
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	089b      	lsrs	r3, r3, #2
 80005fa:	3302      	adds	r3, #2
 80005fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000600:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000602:	697b      	ldr	r3, [r7, #20]
 8000604:	f003 0303 	and.w	r3, r3, #3
 8000608:	009b      	lsls	r3, r3, #2
 800060a:	220f      	movs	r2, #15
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	43db      	mvns	r3, r3
 8000612:	693a      	ldr	r2, [r7, #16]
 8000614:	4013      	ands	r3, r2
 8000616:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800061e:	d013      	beq.n	8000648 <HAL_GPIO_Init+0x1e8>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	4a46      	ldr	r2, [pc, #280]	; (800073c <HAL_GPIO_Init+0x2dc>)
 8000624:	4293      	cmp	r3, r2
 8000626:	d00d      	beq.n	8000644 <HAL_GPIO_Init+0x1e4>
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	4a45      	ldr	r2, [pc, #276]	; (8000740 <HAL_GPIO_Init+0x2e0>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d007      	beq.n	8000640 <HAL_GPIO_Init+0x1e0>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	4a44      	ldr	r2, [pc, #272]	; (8000744 <HAL_GPIO_Init+0x2e4>)
 8000634:	4293      	cmp	r3, r2
 8000636:	d101      	bne.n	800063c <HAL_GPIO_Init+0x1dc>
 8000638:	2303      	movs	r3, #3
 800063a:	e006      	b.n	800064a <HAL_GPIO_Init+0x1ea>
 800063c:	2305      	movs	r3, #5
 800063e:	e004      	b.n	800064a <HAL_GPIO_Init+0x1ea>
 8000640:	2302      	movs	r3, #2
 8000642:	e002      	b.n	800064a <HAL_GPIO_Init+0x1ea>
 8000644:	2301      	movs	r3, #1
 8000646:	e000      	b.n	800064a <HAL_GPIO_Init+0x1ea>
 8000648:	2300      	movs	r3, #0
 800064a:	697a      	ldr	r2, [r7, #20]
 800064c:	f002 0203 	and.w	r2, r2, #3
 8000650:	0092      	lsls	r2, r2, #2
 8000652:	4093      	lsls	r3, r2
 8000654:	693a      	ldr	r2, [r7, #16]
 8000656:	4313      	orrs	r3, r2
 8000658:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800065a:	4937      	ldr	r1, [pc, #220]	; (8000738 <HAL_GPIO_Init+0x2d8>)
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	089b      	lsrs	r3, r3, #2
 8000660:	3302      	adds	r3, #2
 8000662:	693a      	ldr	r2, [r7, #16]
 8000664:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000668:	4b37      	ldr	r3, [pc, #220]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	43db      	mvns	r3, r3
 8000672:	693a      	ldr	r2, [r7, #16]
 8000674:	4013      	ands	r3, r2
 8000676:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000678:	683b      	ldr	r3, [r7, #0]
 800067a:	685b      	ldr	r3, [r3, #4]
 800067c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000680:	2b00      	cmp	r3, #0
 8000682:	d003      	beq.n	800068c <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000684:	693a      	ldr	r2, [r7, #16]
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	4313      	orrs	r3, r2
 800068a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800068c:	4a2e      	ldr	r2, [pc, #184]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 800068e:	693b      	ldr	r3, [r7, #16]
 8000690:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000692:	4b2d      	ldr	r3, [pc, #180]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 8000694:	685b      	ldr	r3, [r3, #4]
 8000696:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000698:	68fb      	ldr	r3, [r7, #12]
 800069a:	43db      	mvns	r3, r3
 800069c:	693a      	ldr	r2, [r7, #16]
 800069e:	4013      	ands	r3, r2
 80006a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	685b      	ldr	r3, [r3, #4]
 80006a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d003      	beq.n	80006b6 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80006ae:	693a      	ldr	r2, [r7, #16]
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	4313      	orrs	r3, r2
 80006b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006b6:	4a24      	ldr	r2, [pc, #144]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 80006b8:	693b      	ldr	r3, [r7, #16]
 80006ba:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80006bc:	4b22      	ldr	r3, [pc, #136]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 80006be:	689b      	ldr	r3, [r3, #8]
 80006c0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	43db      	mvns	r3, r3
 80006c6:	693a      	ldr	r2, [r7, #16]
 80006c8:	4013      	ands	r3, r2
 80006ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80006cc:	683b      	ldr	r3, [r7, #0]
 80006ce:	685b      	ldr	r3, [r3, #4]
 80006d0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d003      	beq.n	80006e0 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80006d8:	693a      	ldr	r2, [r7, #16]
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	4313      	orrs	r3, r2
 80006de:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80006e0:	4a19      	ldr	r2, [pc, #100]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 80006e2:	693b      	ldr	r3, [r7, #16]
 80006e4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80006e6:	4b18      	ldr	r3, [pc, #96]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 80006e8:	68db      	ldr	r3, [r3, #12]
 80006ea:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	43db      	mvns	r3, r3
 80006f0:	693a      	ldr	r2, [r7, #16]
 80006f2:	4013      	ands	r3, r2
 80006f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	685b      	ldr	r3, [r3, #4]
 80006fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d003      	beq.n	800070a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000702:	693a      	ldr	r2, [r7, #16]
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	4313      	orrs	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <HAL_GPIO_Init+0x2e8>)
 800070c:	693b      	ldr	r3, [r7, #16]
 800070e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	3301      	adds	r3, #1
 8000714:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	681a      	ldr	r2, [r3, #0]
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	fa22 f303 	lsr.w	r3, r2, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	f47f aea9 	bne.w	8000478 <HAL_GPIO_Init+0x18>
  }
}
 8000726:	bf00      	nop
 8000728:	371c      	adds	r7, #28
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40021000 	.word	0x40021000
 8000738:	40010000 	.word	0x40010000
 800073c:	48000400 	.word	0x48000400
 8000740:	48000800 	.word	0x48000800
 8000744:	48000c00 	.word	0x48000c00
 8000748:	40010400 	.word	0x40010400

0800074c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800074c:	b480      	push	{r7}
 800074e:	b083      	sub	sp, #12
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
 8000754:	460b      	mov	r3, r1
 8000756:	807b      	strh	r3, [r7, #2]
 8000758:	4613      	mov	r3, r2
 800075a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800075c:	787b      	ldrb	r3, [r7, #1]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d003      	beq.n	800076a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000762:	887a      	ldrh	r2, [r7, #2]
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000768:	e002      	b.n	8000770 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800076a:	887a      	ldrh	r2, [r7, #2]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000770:	bf00      	nop
 8000772:	370c      	adds	r7, #12
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr

0800077c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b084      	sub	sp, #16
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	2b00      	cmp	r3, #0
 8000788:	d101      	bne.n	800078e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800078a:	2301      	movs	r3, #1
 800078c:	e07c      	b.n	8000888 <HAL_SPI_Init+0x10c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	2200      	movs	r2, #0
 8000792:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800079a:	b2db      	uxtb	r3, r3
 800079c:	2b00      	cmp	r3, #0
 800079e:	d106      	bne.n	80007ae <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	2200      	movs	r2, #0
 80007a4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80007a8:	6878      	ldr	r0, [r7, #4]
 80007aa:	f005 fff1 	bl	8006790 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	2202      	movs	r2, #2
 80007b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80007c4:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	68db      	ldr	r3, [r3, #12]
 80007ca:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80007ce:	d902      	bls.n	80007d6 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80007d0:	2300      	movs	r3, #0
 80007d2:	60fb      	str	r3, [r7, #12]
 80007d4:	e002      	b.n	80007dc <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80007d6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007da:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80007e4:	d007      	beq.n	80007f6 <HAL_SPI_Init+0x7a>
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	68db      	ldr	r3, [r3, #12]
 80007ea:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80007ee:	d002      	beq.n	80007f6 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	2200      	movs	r2, #0
 80007f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d10b      	bne.n	8000816 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	68db      	ldr	r3, [r3, #12]
 8000802:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000806:	d903      	bls.n	8000810 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	2202      	movs	r2, #2
 800080c:	631a      	str	r2, [r3, #48]	; 0x30
 800080e:	e002      	b.n	8000816 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2201      	movs	r2, #1
 8000814:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	685a      	ldr	r2, [r3, #4]
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	689b      	ldr	r3, [r3, #8]
 800081e:	431a      	orrs	r2, r3
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	691b      	ldr	r3, [r3, #16]
 8000824:	431a      	orrs	r2, r3
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	431a      	orrs	r2, r3
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	699b      	ldr	r3, [r3, #24]
 8000830:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000834:	431a      	orrs	r2, r3
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	69db      	ldr	r3, [r3, #28]
 800083a:	431a      	orrs	r2, r3
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	6a1b      	ldr	r3, [r3, #32]
 8000840:	ea42 0103 	orr.w	r1, r2, r3
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	430a      	orrs	r2, r1
 800084e:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo Threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	699b      	ldr	r3, [r3, #24]
 8000854:	0c1b      	lsrs	r3, r3, #16
 8000856:	f003 0204 	and.w	r2, r3, #4
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800085e:	431a      	orrs	r2, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000864:	431a      	orrs	r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	68db      	ldr	r3, [r3, #12]
 800086a:	ea42 0103 	orr.w	r1, r2, r3
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	430a      	orrs	r2, r1
 8000876:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	2201      	movs	r2, #1
 8000882:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8000886:	2300      	movs	r3, #0
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b088      	sub	sp, #32
 8000894:	af00      	add	r7, sp, #0
 8000896:	60f8      	str	r0, [r7, #12]
 8000898:	60b9      	str	r1, [r7, #8]
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	4613      	mov	r3, r2
 800089e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = 0U;
 80008a0:	2300      	movs	r3, #0
 80008a2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef errorcode = HAL_OK;
 80008a4:	2300      	movs	r3, #0
 80008a6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80008a8:	68fb      	ldr	r3, [r7, #12]
 80008aa:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80008ae:	2b01      	cmp	r3, #1
 80008b0:	d101      	bne.n	80008b6 <HAL_SPI_Transmit+0x26>
 80008b2:	2302      	movs	r3, #2
 80008b4:	e13e      	b.n	8000b34 <HAL_SPI_Transmit+0x2a4>
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	2201      	movs	r2, #1
 80008ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80008be:	f7ff fcdd 	bl	800027c <HAL_GetTick>
 80008c2:	61b8      	str	r0, [r7, #24]

  if (hspi->State != HAL_SPI_STATE_READY)
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80008ca:	b2db      	uxtb	r3, r3
 80008cc:	2b01      	cmp	r3, #1
 80008ce:	d002      	beq.n	80008d6 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80008d0:	2302      	movs	r3, #2
 80008d2:	77fb      	strb	r3, [r7, #31]
    goto error;
 80008d4:	e125      	b.n	8000b22 <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 80008d6:	68bb      	ldr	r3, [r7, #8]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d002      	beq.n	80008e2 <HAL_SPI_Transmit+0x52>
 80008dc:	88fb      	ldrh	r3, [r7, #6]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d102      	bne.n	80008e8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80008e2:	2301      	movs	r3, #1
 80008e4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80008e6:	e11c      	b.n	8000b22 <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80008e8:	68fb      	ldr	r3, [r7, #12]
 80008ea:	2203      	movs	r2, #3
 80008ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80008f0:	68fb      	ldr	r3, [r7, #12]
 80008f2:	2200      	movs	r2, #0
 80008f4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80008f6:	68fb      	ldr	r3, [r7, #12]
 80008f8:	68ba      	ldr	r2, [r7, #8]
 80008fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	88fa      	ldrh	r2, [r7, #6]
 8000900:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8000902:	68fb      	ldr	r3, [r7, #12]
 8000904:	88fa      	ldrh	r2, [r7, #6]
 8000906:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8000908:	68fb      	ldr	r3, [r7, #12]
 800090a:	2200      	movs	r2, #0
 800090c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800090e:	68fb      	ldr	r3, [r7, #12]
 8000910:	2200      	movs	r2, #0
 8000912:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	2200      	movs	r2, #0
 800091a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 800091e:	68fb      	ldr	r3, [r7, #12]
 8000920:	2200      	movs	r2, #0
 8000922:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8000924:	68fb      	ldr	r3, [r7, #12]
 8000926:	2200      	movs	r2, #0
 8000928:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000932:	d107      	bne.n	8000944 <HAL_SPI_Transmit+0xb4>
  {
    SPI_1LINE_TX(hspi);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000942:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800094e:	2b40      	cmp	r3, #64	; 0x40
 8000950:	d007      	beq.n	8000962 <HAL_SPI_Transmit+0xd2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000952:	68fb      	ldr	r3, [r7, #12]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	681a      	ldr	r2, [r3, #0]
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000960:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000962:	68fb      	ldr	r3, [r7, #12]
 8000964:	68db      	ldr	r3, [r3, #12]
 8000966:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800096a:	d947      	bls.n	80009fc <HAL_SPI_Transmit+0x16c>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 800096c:	68fb      	ldr	r3, [r7, #12]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b00      	cmp	r3, #0
 8000972:	d004      	beq.n	800097e <HAL_SPI_Transmit+0xee>
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000978:	b29b      	uxth	r3, r3
 800097a:	2b01      	cmp	r3, #1
 800097c:	d138      	bne.n	80009f0 <HAL_SPI_Transmit+0x160>
    {
      hspi->Instance->DR = *((uint16_t *)pData);
 800097e:	68bb      	ldr	r3, [r7, #8]
 8000980:	881a      	ldrh	r2, [r3, #0]
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	681b      	ldr	r3, [r3, #0]
 8000986:	60da      	str	r2, [r3, #12]
      pData += sizeof(uint16_t);
 8000988:	68bb      	ldr	r3, [r7, #8]
 800098a:	3302      	adds	r3, #2
 800098c:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000992:	b29b      	uxth	r3, r3
 8000994:	3b01      	subs	r3, #1
 8000996:	b29a      	uxth	r2, r3
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800099c:	e028      	b.n	80009f0 <HAL_SPI_Transmit+0x160>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	681b      	ldr	r3, [r3, #0]
 80009a2:	689b      	ldr	r3, [r3, #8]
 80009a4:	f003 0302 	and.w	r3, r3, #2
 80009a8:	2b02      	cmp	r3, #2
 80009aa:	d10f      	bne.n	80009cc <HAL_SPI_Transmit+0x13c>
      {
        hspi->Instance->DR = *((uint16_t *)pData);
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	881a      	ldrh	r2, [r3, #0]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 80009b6:	68bb      	ldr	r3, [r7, #8]
 80009b8:	3302      	adds	r3, #2
 80009ba:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80009c0:	b29b      	uxth	r3, r3
 80009c2:	3b01      	subs	r3, #1
 80009c4:	b29a      	uxth	r2, r3
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	87da      	strh	r2, [r3, #62]	; 0x3e
 80009ca:	e011      	b.n	80009f0 <HAL_SPI_Transmit+0x160>
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d00b      	beq.n	80009ea <HAL_SPI_Transmit+0x15a>
 80009d2:	683b      	ldr	r3, [r7, #0]
 80009d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009d8:	d00a      	beq.n	80009f0 <HAL_SPI_Transmit+0x160>
 80009da:	f7ff fc4f 	bl	800027c <HAL_GetTick>
 80009de:	4602      	mov	r2, r0
 80009e0:	69bb      	ldr	r3, [r7, #24]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	683a      	ldr	r2, [r7, #0]
 80009e6:	429a      	cmp	r2, r3
 80009e8:	d802      	bhi.n	80009f0 <HAL_SPI_Transmit+0x160>
        {
          errorcode = HAL_TIMEOUT;
 80009ea:	2303      	movs	r3, #3
 80009ec:	77fb      	strb	r3, [r7, #31]
          goto error;
 80009ee:	e098      	b.n	8000b22 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d1d1      	bne.n	800099e <HAL_SPI_Transmit+0x10e>
 80009fa:	e070      	b.n	8000ade <HAL_SPI_Transmit+0x24e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	685b      	ldr	r3, [r3, #4]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d004      	beq.n	8000a0e <HAL_SPI_Transmit+0x17e>
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	2b01      	cmp	r3, #1
 8000a0c:	d162      	bne.n	8000ad4 <HAL_SPI_Transmit+0x244>
    {
      if (hspi->TxXferCount > 1U)
 8000a0e:	68fb      	ldr	r3, [r7, #12]
 8000a10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d90f      	bls.n	8000a38 <HAL_SPI_Transmit+0x1a8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)pData);
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	881a      	ldrh	r2, [r3, #0]
 8000a1c:	68fb      	ldr	r3, [r7, #12]
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	60da      	str	r2, [r3, #12]
        pData += sizeof(uint16_t);
 8000a22:	68bb      	ldr	r3, [r7, #8]
 8000a24:	3302      	adds	r3, #2
 8000a26:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	3b02      	subs	r3, #2
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000a36:	e04d      	b.n	8000ad4 <HAL_SPI_Transmit+0x244>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000a38:	68bb      	ldr	r3, [r7, #8]
 8000a3a:	1c5a      	adds	r2, r3, #1
 8000a3c:	60ba      	str	r2, [r7, #8]
 8000a3e:	68fa      	ldr	r2, [r7, #12]
 8000a40:	6812      	ldr	r2, [r2, #0]
 8000a42:	320c      	adds	r2, #12
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000a4c:	b29b      	uxth	r3, r3
 8000a4e:	3b01      	subs	r3, #1
 8000a50:	b29a      	uxth	r2, r3
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8000a56:	e03d      	b.n	8000ad4 <HAL_SPI_Transmit+0x244>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	689b      	ldr	r3, [r3, #8]
 8000a5e:	f003 0302 	and.w	r3, r3, #2
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d124      	bne.n	8000ab0 <HAL_SPI_Transmit+0x220>
      {
        if (hspi->TxXferCount > 1U)
 8000a66:	68fb      	ldr	r3, [r7, #12]
 8000a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000a6a:	b29b      	uxth	r3, r3
 8000a6c:	2b01      	cmp	r3, #1
 8000a6e:	d90f      	bls.n	8000a90 <HAL_SPI_Transmit+0x200>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)pData);
 8000a70:	68bb      	ldr	r3, [r7, #8]
 8000a72:	881a      	ldrh	r2, [r3, #0]
 8000a74:	68fb      	ldr	r3, [r7, #12]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	60da      	str	r2, [r3, #12]
          pData += sizeof(uint16_t);
 8000a7a:	68bb      	ldr	r3, [r7, #8]
 8000a7c:	3302      	adds	r3, #2
 8000a7e:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8000a80:	68fb      	ldr	r3, [r7, #12]
 8000a82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	3b02      	subs	r3, #2
 8000a88:	b29a      	uxth	r2, r3
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000a8e:	e021      	b.n	8000ad4 <HAL_SPI_Transmit+0x244>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*pData++);
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	1c5a      	adds	r2, r3, #1
 8000a94:	60ba      	str	r2, [r7, #8]
 8000a96:	68fa      	ldr	r2, [r7, #12]
 8000a98:	6812      	ldr	r2, [r2, #0]
 8000a9a:	320c      	adds	r2, #12
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8000aa0:	68fb      	ldr	r3, [r7, #12]
 8000aa2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000aa4:	b29b      	uxth	r3, r3
 8000aa6:	3b01      	subs	r3, #1
 8000aa8:	b29a      	uxth	r2, r3
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000aae:	e011      	b.n	8000ad4 <HAL_SPI_Transmit+0x244>
        }
      }
      else
      {
        /* Timeout management */
        if ((Timeout == 0U) || ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout)))
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d00b      	beq.n	8000ace <HAL_SPI_Transmit+0x23e>
 8000ab6:	683b      	ldr	r3, [r7, #0]
 8000ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000abc:	d00a      	beq.n	8000ad4 <HAL_SPI_Transmit+0x244>
 8000abe:	f7ff fbdd 	bl	800027c <HAL_GetTick>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	69bb      	ldr	r3, [r7, #24]
 8000ac6:	1ad3      	subs	r3, r2, r3
 8000ac8:	683a      	ldr	r2, [r7, #0]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d802      	bhi.n	8000ad4 <HAL_SPI_Transmit+0x244>
        {
          errorcode = HAL_TIMEOUT;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8000ad2:	e026      	b.n	8000b22 <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d1bc      	bne.n	8000a58 <HAL_SPI_Transmit+0x1c8>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000ade:	69ba      	ldr	r2, [r7, #24]
 8000ae0:	6839      	ldr	r1, [r7, #0]
 8000ae2:	68f8      	ldr	r0, [r7, #12]
 8000ae4:	f000 fb10 	bl	8001108 <SPI_EndRxTxTransaction>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d002      	beq.n	8000af4 <HAL_SPI_Transmit+0x264>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	2220      	movs	r2, #32
 8000af2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	689b      	ldr	r3, [r3, #8]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d10a      	bne.n	8000b12 <HAL_SPI_Transmit+0x282>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8000afc:	2300      	movs	r3, #0
 8000afe:	617b      	str	r3, [r7, #20]
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	68db      	ldr	r3, [r3, #12]
 8000b06:	617b      	str	r3, [r7, #20]
 8000b08:	68fb      	ldr	r3, [r7, #12]
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	689b      	ldr	r3, [r3, #8]
 8000b0e:	617b      	str	r3, [r7, #20]
 8000b10:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d002      	beq.n	8000b20 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	77fb      	strb	r3, [r7, #31]
 8000b1e:	e000      	b.n	8000b22 <HAL_SPI_Transmit+0x292>
  }

error:
 8000b20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2201      	movs	r2, #1
 8000b26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8000b32:	7ffb      	ldrb	r3, [r7, #31]
}
 8000b34:	4618      	mov	r0, r3
 8000b36:	3720      	adds	r7, #32
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}

08000b3c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b08a      	sub	sp, #40	; 0x28
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
 8000b48:	807b      	strh	r3, [r7, #2]
  uint32_t tmp = 0U, tmp1 = 0U;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	61fb      	str	r3, [r7, #28]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	61bb      	str	r3, [r7, #24]
#if (USE_SPI_CRC != 0U)
  __IO uint16_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart = 0U;
 8000b52:	2300      	movs	r3, #0
 8000b54:	617b      	str	r3, [r7, #20]
  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t txallowed = 1U;
 8000b56:	2301      	movs	r3, #1
 8000b58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef errorcode = HAL_OK;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	d101      	bne.n	8000b6e <HAL_SPI_TransmitReceive+0x32>
 8000b6a:	2302      	movs	r3, #2
 8000b6c:	e1e2      	b.n	8000f34 <HAL_SPI_TransmitReceive+0x3f8>
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	2201      	movs	r2, #1
 8000b72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8000b76:	f7ff fb81 	bl	800027c <HAL_GetTick>
 8000b7a:	6178      	str	r0, [r7, #20]

  tmp  = hspi->State;
 8000b7c:	68fb      	ldr	r3, [r7, #12]
 8000b7e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000b82:	b2db      	uxtb	r3, r3
 8000b84:	61fb      	str	r3, [r7, #28]
  tmp1 = hspi->Init.Mode;
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	685b      	ldr	r3, [r3, #4]
 8000b8a:	61bb      	str	r3, [r7, #24]

  if (!((tmp == HAL_SPI_STATE_READY) || \
 8000b8c:	69fb      	ldr	r3, [r7, #28]
 8000b8e:	2b01      	cmp	r3, #1
 8000b90:	d00e      	beq.n	8000bb0 <HAL_SPI_TransmitReceive+0x74>
 8000b92:	69bb      	ldr	r3, [r7, #24]
 8000b94:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000b98:	d106      	bne.n	8000ba8 <HAL_SPI_TransmitReceive+0x6c>
        ((tmp1 == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp == HAL_SPI_STATE_BUSY_RX))))
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	689b      	ldr	r3, [r3, #8]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d102      	bne.n	8000ba8 <HAL_SPI_TransmitReceive+0x6c>
 8000ba2:	69fb      	ldr	r3, [r7, #28]
 8000ba4:	2b04      	cmp	r3, #4
 8000ba6:	d003      	beq.n	8000bb0 <HAL_SPI_TransmitReceive+0x74>
  {
    errorcode = HAL_BUSY;
 8000ba8:	2302      	movs	r3, #2
 8000baa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8000bae:	e1b7      	b.n	8000f20 <HAL_SPI_TransmitReceive+0x3e4>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8000bb0:	68bb      	ldr	r3, [r7, #8]
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d005      	beq.n	8000bc2 <HAL_SPI_TransmitReceive+0x86>
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d002      	beq.n	8000bc2 <HAL_SPI_TransmitReceive+0x86>
 8000bbc:	887b      	ldrh	r3, [r7, #2]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d103      	bne.n	8000bca <HAL_SPI_TransmitReceive+0x8e>
  {
    errorcode = HAL_ERROR;
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8000bc8:	e1aa      	b.n	8000f20 <HAL_SPI_TransmitReceive+0x3e4>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000bd0:	b2db      	uxtb	r3, r3
 8000bd2:	2b04      	cmp	r3, #4
 8000bd4:	d003      	beq.n	8000bde <HAL_SPI_TransmitReceive+0xa2>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	2205      	movs	r2, #5
 8000bda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000bde:	68fb      	ldr	r3, [r7, #12]
 8000be0:	2200      	movs	r2, #0
 8000be2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	687a      	ldr	r2, [r7, #4]
 8000be8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	887a      	ldrh	r2, [r7, #2]
 8000bee:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	887a      	ldrh	r2, [r7, #2]
 8000bf6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	68ba      	ldr	r2, [r7, #8]
 8000bfe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	887a      	ldrh	r2, [r7, #2]
 8000c04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8000c06:	68fb      	ldr	r3, [r7, #12]
 8000c08:	887a      	ldrh	r2, [r7, #2]
 8000c0a:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	2200      	movs	r2, #0
 8000c10:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	2200      	movs	r2, #0
 8000c16:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (hspi->RxXferCount > 1U))
 8000c18:	68fb      	ldr	r3, [r7, #12]
 8000c1a:	68db      	ldr	r3, [r3, #12]
 8000c1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000c20:	d805      	bhi.n	8000c2e <HAL_SPI_TransmitReceive+0xf2>
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000c28:	b29b      	uxth	r3, r3
 8000c2a:	2b01      	cmp	r3, #1
 8000c2c:	d908      	bls.n	8000c40 <HAL_SPI_TransmitReceive+0x104>
  {
    /* set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000c2e:	68fb      	ldr	r3, [r7, #12]
 8000c30:	681b      	ldr	r3, [r3, #0]
 8000c32:	685a      	ldr	r2, [r3, #4]
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000c3c:	605a      	str	r2, [r3, #4]
 8000c3e:	e007      	b.n	8000c50 <HAL_SPI_TransmitReceive+0x114>
  }
  else
  {
    /* set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000c40:	68fb      	ldr	r3, [r7, #12]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	685a      	ldr	r2, [r3, #4]
 8000c46:	68fb      	ldr	r3, [r7, #12]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000c4e:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c5a:	2b40      	cmp	r3, #64	; 0x40
 8000c5c:	d007      	beq.n	8000c6e <HAL_SPI_TransmitReceive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8000c5e:	68fb      	ldr	r3, [r7, #12]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	681a      	ldr	r2, [r3, #0]
 8000c64:	68fb      	ldr	r3, [r7, #12]
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000c6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8000c6e:	68fb      	ldr	r3, [r7, #12]
 8000c70:	68db      	ldr	r3, [r3, #12]
 8000c72:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8000c76:	d975      	bls.n	8000d64 <HAL_SPI_TransmitReceive+0x228>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000c78:	68fb      	ldr	r3, [r7, #12]
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d004      	beq.n	8000c8a <HAL_SPI_TransmitReceive+0x14e>
 8000c80:	68fb      	ldr	r3, [r7, #12]
 8000c82:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000c84:	b29b      	uxth	r3, r3
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d160      	bne.n	8000d4c <HAL_SPI_TransmitReceive+0x210>
    {
      hspi->Instance->DR = *((uint16_t *)pTxData);
 8000c8a:	68bb      	ldr	r3, [r7, #8]
 8000c8c:	881a      	ldrh	r2, [r3, #0]
 8000c8e:	68fb      	ldr	r3, [r7, #12]
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	60da      	str	r2, [r3, #12]
      pTxData += sizeof(uint16_t);
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	3302      	adds	r3, #2
 8000c98:	60bb      	str	r3, [r7, #8]
      hspi->TxXferCount--;
 8000c9a:	68fb      	ldr	r3, [r7, #12]
 8000c9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000c9e:	b29b      	uxth	r3, r3
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	b29a      	uxth	r2, r3
 8000ca4:	68fb      	ldr	r3, [r7, #12]
 8000ca6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000ca8:	e050      	b.n	8000d4c <HAL_SPI_TransmitReceive+0x210>
    {
      /* Check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d01c      	beq.n	8000cea <HAL_SPI_TransmitReceive+0x1ae>
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000cb4:	b29b      	uxth	r3, r3
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d017      	beq.n	8000cea <HAL_SPI_TransmitReceive+0x1ae>
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	689b      	ldr	r3, [r3, #8]
 8000cc0:	f003 0302 	and.w	r3, r3, #2
 8000cc4:	2b02      	cmp	r3, #2
 8000cc6:	d110      	bne.n	8000cea <HAL_SPI_TransmitReceive+0x1ae>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000cc8:	68bb      	ldr	r3, [r7, #8]
 8000cca:	881a      	ldrh	r2, [r3, #0]
 8000ccc:	68fb      	ldr	r3, [r7, #12]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	3302      	adds	r3, #2
 8000cd6:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount--;
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000cdc:	b29b      	uxth	r3, r3
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	b29a      	uxth	r2, r3
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8000ce6:	2300      	movs	r3, #0
 8000ce8:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000cf0:	b29b      	uxth	r3, r3
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d01a      	beq.n	8000d2c <HAL_SPI_TransmitReceive+0x1f0>
 8000cf6:	68fb      	ldr	r3, [r7, #12]
 8000cf8:	681b      	ldr	r3, [r3, #0]
 8000cfa:	689b      	ldr	r3, [r3, #8]
 8000cfc:	f003 0301 	and.w	r3, r3, #1
 8000d00:	2b01      	cmp	r3, #1
 8000d02:	d113      	bne.n	8000d2c <HAL_SPI_TransmitReceive+0x1f0>
      {
        *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	68db      	ldr	r3, [r3, #12]
 8000d0a:	b29a      	uxth	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	801a      	strh	r2, [r3, #0]
        pRxData += sizeof(uint16_t);
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	3302      	adds	r3, #2
 8000d14:	607b      	str	r3, [r7, #4]
        hspi->RxXferCount--;
 8000d16:	68fb      	ldr	r3, [r7, #12]
 8000d18:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	3b01      	subs	r3, #1
 8000d20:	b29a      	uxth	r2, r3
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8000d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d32:	d00b      	beq.n	8000d4c <HAL_SPI_TransmitReceive+0x210>
 8000d34:	f7ff faa2 	bl	800027c <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	697b      	ldr	r3, [r7, #20]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000d40:	429a      	cmp	r2, r3
 8000d42:	d803      	bhi.n	8000d4c <HAL_SPI_TransmitReceive+0x210>
      {
        errorcode = HAL_TIMEOUT;
 8000d44:	2303      	movs	r3, #3
 8000d46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8000d4a:	e0e9      	b.n	8000f20 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000d50:	b29b      	uxth	r3, r3
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d1a9      	bne.n	8000caa <HAL_SPI_TransmitReceive+0x16e>
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000d5c:	b29b      	uxth	r3, r3
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d1a3      	bne.n	8000caa <HAL_SPI_TransmitReceive+0x16e>
 8000d62:	e0c9      	b.n	8000ef8 <HAL_SPI_TransmitReceive+0x3bc>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01U))
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	685b      	ldr	r3, [r3, #4]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d005      	beq.n	8000d78 <HAL_SPI_TransmitReceive+0x23c>
 8000d6c:	68fb      	ldr	r3, [r7, #12]
 8000d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000d70:	b29b      	uxth	r3, r3
 8000d72:	2b01      	cmp	r3, #1
 8000d74:	f040 80b3 	bne.w	8000ede <HAL_SPI_TransmitReceive+0x3a2>
    {
      if (hspi->TxXferCount > 1U)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000d7c:	b29b      	uxth	r3, r3
 8000d7e:	2b01      	cmp	r3, #1
 8000d80:	d90f      	bls.n	8000da2 <HAL_SPI_TransmitReceive+0x266>
      {
        hspi->Instance->DR = *((uint16_t *)pTxData);
 8000d82:	68bb      	ldr	r3, [r7, #8]
 8000d84:	881a      	ldrh	r2, [r3, #0]
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	60da      	str	r2, [r3, #12]
        pTxData += sizeof(uint16_t);
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	3302      	adds	r3, #2
 8000d90:	60bb      	str	r3, [r7, #8]
        hspi->TxXferCount -= 2U;
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000d96:	b29b      	uxth	r3, r3
 8000d98:	3b02      	subs	r3, #2
 8000d9a:	b29a      	uxth	r2, r3
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000da0:	e09d      	b.n	8000ede <HAL_SPI_TransmitReceive+0x3a2>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000da2:	68bb      	ldr	r3, [r7, #8]
 8000da4:	1c5a      	adds	r2, r3, #1
 8000da6:	60ba      	str	r2, [r7, #8]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	6812      	ldr	r2, [r2, #0]
 8000dac:	320c      	adds	r2, #12
 8000dae:	781b      	ldrb	r3, [r3, #0]
 8000db0:	7013      	strb	r3, [r2, #0]
        hspi->TxXferCount--;
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000db6:	b29b      	uxth	r3, r3
 8000db8:	3b01      	subs	r3, #1
 8000dba:	b29a      	uxth	r2, r3
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000dc0:	e08d      	b.n	8000ede <HAL_SPI_TransmitReceive+0x3a2>
    {
      /* check TXE flag */
      if (txallowed && (hspi->TxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)))
 8000dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d031      	beq.n	8000e2c <HAL_SPI_TransmitReceive+0x2f0>
 8000dc8:	68fb      	ldr	r3, [r7, #12]
 8000dca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d02c      	beq.n	8000e2c <HAL_SPI_TransmitReceive+0x2f0>
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	681b      	ldr	r3, [r3, #0]
 8000dd6:	689b      	ldr	r3, [r3, #8]
 8000dd8:	f003 0302 	and.w	r3, r3, #2
 8000ddc:	2b02      	cmp	r3, #2
 8000dde:	d125      	bne.n	8000e2c <HAL_SPI_TransmitReceive+0x2f0>
      {
        if (hspi->TxXferCount > 1U)
 8000de0:	68fb      	ldr	r3, [r7, #12]
 8000de2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	d90f      	bls.n	8000e0a <HAL_SPI_TransmitReceive+0x2ce>
        {
          hspi->Instance->DR = *((uint16_t *)pTxData);
 8000dea:	68bb      	ldr	r3, [r7, #8]
 8000dec:	881a      	ldrh	r2, [r3, #0]
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	60da      	str	r2, [r3, #12]
          pTxData += sizeof(uint16_t);
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	3302      	adds	r3, #2
 8000df8:	60bb      	str	r3, [r7, #8]
          hspi->TxXferCount -= 2U;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000dfe:	b29b      	uxth	r3, r3
 8000e00:	3b02      	subs	r3, #2
 8000e02:	b29a      	uxth	r2, r3
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	87da      	strh	r2, [r3, #62]	; 0x3e
 8000e08:	e00e      	b.n	8000e28 <HAL_SPI_TransmitReceive+0x2ec>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*pTxData++);
 8000e0a:	68bb      	ldr	r3, [r7, #8]
 8000e0c:	1c5a      	adds	r2, r3, #1
 8000e0e:	60ba      	str	r2, [r7, #8]
 8000e10:	68fa      	ldr	r2, [r7, #12]
 8000e12:	6812      	ldr	r2, [r2, #0]
 8000e14:	320c      	adds	r2, #12
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	7013      	strb	r3, [r2, #0]
          hspi->TxXferCount--;
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000e1e:	b29b      	uxth	r3, r3
 8000e20:	3b01      	subs	r3, #1
 8000e22:	b29a      	uxth	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((hspi->RxXferCount > 0U) && (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)))
 8000e2c:	68fb      	ldr	r3, [r7, #12]
 8000e2e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e32:	b29b      	uxth	r3, r3
 8000e34:	2b00      	cmp	r3, #0
 8000e36:	d042      	beq.n	8000ebe <HAL_SPI_TransmitReceive+0x382>
 8000e38:	68fb      	ldr	r3, [r7, #12]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	689b      	ldr	r3, [r3, #8]
 8000e3e:	f003 0301 	and.w	r3, r3, #1
 8000e42:	2b01      	cmp	r3, #1
 8000e44:	d13b      	bne.n	8000ebe <HAL_SPI_TransmitReceive+0x382>
      {
        if (hspi->RxXferCount > 1U)
 8000e46:	68fb      	ldr	r3, [r7, #12]
 8000e48:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e4c:	b29b      	uxth	r3, r3
 8000e4e:	2b01      	cmp	r3, #1
 8000e50:	d920      	bls.n	8000e94 <HAL_SPI_TransmitReceive+0x358>
        {
          *((uint16_t *)pRxData) = hspi->Instance->DR;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	68db      	ldr	r3, [r3, #12]
 8000e58:	b29a      	uxth	r2, r3
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	801a      	strh	r2, [r3, #0]
          pRxData += sizeof(uint16_t);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	3302      	adds	r3, #2
 8000e62:	607b      	str	r3, [r7, #4]
          hspi->RxXferCount -= 2U;
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e6a:	b29b      	uxth	r3, r3
 8000e6c:	3b02      	subs	r3, #2
 8000e6e:	b29a      	uxth	r2, r3
 8000e70:	68fb      	ldr	r3, [r7, #12]
 8000e72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	2b01      	cmp	r3, #1
 8000e80:	d81b      	bhi.n	8000eba <HAL_SPI_TransmitReceive+0x37e>
          {
            /* set fiforxthresold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	681b      	ldr	r3, [r3, #0]
 8000e86:	685a      	ldr	r2, [r3, #4]
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	e012      	b.n	8000eba <HAL_SPI_TransmitReceive+0x37e>
          }
        }
        else
        {
          (*(uint8_t *)pRxData++) = *(__IO uint8_t *)&hspi->Instance->DR;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f103 020c 	add.w	r2, r3, #12
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	1c59      	adds	r1, r3, #1
 8000ea0:	6079      	str	r1, [r7, #4]
 8000ea2:	7812      	ldrb	r2, [r2, #0]
 8000ea4:	b2d2      	uxtb	r2, r2
 8000ea6:	701a      	strb	r2, [r3, #0]
          hspi->RxXferCount--;
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000eae:	b29b      	uxth	r3, r3
 8000eb0:	3b01      	subs	r3, #1
 8000eb2:	b29a      	uxth	r2, r3
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((Timeout != HAL_MAX_DELAY) && ((HAL_GetTick() - tickstart) >=  Timeout))
 8000ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ec4:	d00b      	beq.n	8000ede <HAL_SPI_TransmitReceive+0x3a2>
 8000ec6:	f7ff f9d9 	bl	800027c <HAL_GetTick>
 8000eca:	4602      	mov	r2, r0
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000ed2:	429a      	cmp	r2, r3
 8000ed4:	d803      	bhi.n	8000ede <HAL_SPI_TransmitReceive+0x3a2>
      {
        errorcode = HAL_TIMEOUT;
 8000ed6:	2303      	movs	r3, #3
 8000ed8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8000edc:	e020      	b.n	8000f20 <HAL_SPI_TransmitReceive+0x3e4>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8000ede:	68fb      	ldr	r3, [r7, #12]
 8000ee0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8000ee2:	b29b      	uxth	r3, r3
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	f47f af6c 	bne.w	8000dc2 <HAL_SPI_TransmitReceive+0x286>
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	f47f af65 	bne.w	8000dc2 <HAL_SPI_TransmitReceive+0x286>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8000ef8:	697a      	ldr	r2, [r7, #20]
 8000efa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8000efc:	68f8      	ldr	r0, [r7, #12]
 8000efe:	f000 f903 	bl	8001108 <SPI_EndRxTxTransaction>
 8000f02:	4603      	mov	r3, r0
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d002      	beq.n	8000f0e <HAL_SPI_TransmitReceive+0x3d2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	2220      	movs	r2, #32
 8000f0c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8000f0e:	68fb      	ldr	r3, [r7, #12]
 8000f10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d003      	beq.n	8000f1e <HAL_SPI_TransmitReceive+0x3e2>
  {
    errorcode = HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8000f1c:	e000      	b.n	8000f20 <HAL_SPI_TransmitReceive+0x3e4>
  }

error :
 8000f1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	2201      	movs	r2, #1
 8000f24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8000f28:	68fb      	ldr	r3, [r7, #12]
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8000f30:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	3728      	adds	r7, #40	; 0x28
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8000f4a:	b2db      	uxtb	r3, r3
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr

08000f58 <SPI_WaitFlagStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b084      	sub	sp, #16
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	60f8      	str	r0, [r7, #12]
 8000f60:	60b9      	str	r1, [r7, #8]
 8000f62:	607a      	str	r2, [r7, #4]
 8000f64:	603b      	str	r3, [r7, #0]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8000f66:	e04c      	b.n	8001002 <SPI_WaitFlagStateUntilTimeout+0xaa>
  {
    if (Timeout != HAL_MAX_DELAY)
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f6e:	d048      	beq.n	8001002 <SPI_WaitFlagStateUntilTimeout+0xaa>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d007      	beq.n	8000f86 <SPI_WaitFlagStateUntilTimeout+0x2e>
 8000f76:	f7ff f981 	bl	800027c <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	69bb      	ldr	r3, [r7, #24]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	683a      	ldr	r2, [r7, #0]
 8000f82:	429a      	cmp	r2, r3
 8000f84:	d83d      	bhi.n	8001002 <SPI_WaitFlagStateUntilTimeout+0xaa>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	685a      	ldr	r2, [r3, #4]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000f94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f96:	68fb      	ldr	r3, [r7, #12]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8000f9e:	d111      	bne.n	8000fc4 <SPI_WaitFlagStateUntilTimeout+0x6c>
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	689b      	ldr	r3, [r3, #8]
 8000fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000fa8:	d004      	beq.n	8000fb4 <SPI_WaitFlagStateUntilTimeout+0x5c>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8000faa:	68fb      	ldr	r3, [r7, #12]
 8000fac:	689b      	ldr	r3, [r3, #8]
 8000fae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb2:	d107      	bne.n	8000fc4 <SPI_WaitFlagStateUntilTimeout+0x6c>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	681a      	ldr	r2, [r3, #0]
 8000fba:	68fb      	ldr	r3, [r7, #12]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000fcc:	d10f      	bne.n	8000fee <SPI_WaitFlagStateUntilTimeout+0x96>
        {
          SPI_RESET_CRC(hspi);
 8000fce:	68fb      	ldr	r3, [r7, #12]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	681a      	ldr	r2, [r3, #0]
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	681a      	ldr	r2, [r3, #0]
 8000fe4:	68fb      	ldr	r3, [r7, #12]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000fec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8000ffe:	2303      	movs	r3, #3
 8001000:	e00e      	b.n	8001020 <SPI_WaitFlagStateUntilTimeout+0xc8>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001002:	68fb      	ldr	r3, [r7, #12]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	689a      	ldr	r2, [r3, #8]
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	4013      	ands	r3, r2
 800100c:	68ba      	ldr	r2, [r7, #8]
 800100e:	429a      	cmp	r2, r3
 8001010:	d101      	bne.n	8001016 <SPI_WaitFlagStateUntilTimeout+0xbe>
 8001012:	2201      	movs	r2, #1
 8001014:	e000      	b.n	8001018 <SPI_WaitFlagStateUntilTimeout+0xc0>
 8001016:	2200      	movs	r2, #0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	429a      	cmp	r2, r3
 800101c:	d1a4      	bne.n	8000f68 <SPI_WaitFlagStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 800101e:	2300      	movs	r3, #0
}
 8001020:	4618      	mov	r0, r3
 8001022:	3710      	adds	r7, #16
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}

08001028 <SPI_WaitFifoStateUntilTimeout>:
  * @param Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	b086      	sub	sp, #24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
 8001034:	603b      	str	r3, [r7, #0]
  __IO uint8_t tmpreg;

  while ((hspi->Instance->SR & Fifo) != State)
 8001036:	e05a      	b.n	80010ee <SPI_WaitFifoStateUntilTimeout+0xc6>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8001038:	68bb      	ldr	r3, [r7, #8]
 800103a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800103e:	d109      	bne.n	8001054 <SPI_WaitFifoStateUntilTimeout+0x2c>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d106      	bne.n	8001054 <SPI_WaitFifoStateUntilTimeout+0x2c>
    {
      tmpreg = *((__IO uint8_t *)&hspi->Instance->DR);
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	330c      	adds	r3, #12
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	b2db      	uxtb	r3, r3
 8001050:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8001052:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8001054:	683b      	ldr	r3, [r7, #0]
 8001056:	f1b3 3fff 	cmp.w	r3, #4294967295
 800105a:	d048      	beq.n	80010ee <SPI_WaitFifoStateUntilTimeout+0xc6>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) >= Timeout))
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d007      	beq.n	8001072 <SPI_WaitFifoStateUntilTimeout+0x4a>
 8001062:	f7ff f90b 	bl	800027c <HAL_GetTick>
 8001066:	4602      	mov	r2, r0
 8001068:	6a3b      	ldr	r3, [r7, #32]
 800106a:	1ad3      	subs	r3, r2, r3
 800106c:	683a      	ldr	r2, [r7, #0]
 800106e:	429a      	cmp	r2, r3
 8001070:	d83d      	bhi.n	80010ee <SPI_WaitFifoStateUntilTimeout+0xc6>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	685a      	ldr	r2, [r3, #4]
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001080:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	685b      	ldr	r3, [r3, #4]
 8001086:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800108a:	d111      	bne.n	80010b0 <SPI_WaitFifoStateUntilTimeout+0x88>
 800108c:	68fb      	ldr	r3, [r7, #12]
 800108e:	689b      	ldr	r3, [r3, #8]
 8001090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001094:	d004      	beq.n	80010a0 <SPI_WaitFifoStateUntilTimeout+0x78>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	689b      	ldr	r3, [r3, #8]
 800109a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800109e:	d107      	bne.n	80010b0 <SPI_WaitFifoStateUntilTimeout+0x88>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	681a      	ldr	r2, [r3, #0]
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80010ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010b8:	d10f      	bne.n	80010da <SPI_WaitFifoStateUntilTimeout+0xb2>
        {
          SPI_RESET_CRC(hspi);
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	681a      	ldr	r2, [r3, #0]
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80010d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	2201      	movs	r2, #1
 80010de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80010ea:	2303      	movs	r3, #3
 80010ec:	e008      	b.n	8001100 <SPI_WaitFifoStateUntilTimeout+0xd8>
  while ((hspi->Instance->SR & Fifo) != State)
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	689a      	ldr	r2, [r3, #8]
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	4013      	ands	r3, r2
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	429a      	cmp	r2, r3
 80010fc:	d19c      	bne.n	8001038 <SPI_WaitFifoStateUntilTimeout+0x10>
      }
    }
  }

  return HAL_OK;
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	3718      	adds	r7, #24
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b086      	sub	sp, #24
 800110c:	af02      	add	r7, sp, #8
 800110e:	60f8      	str	r0, [r7, #12]
 8001110:	60b9      	str	r1, [r7, #8]
 8001112:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	9300      	str	r3, [sp, #0]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f7ff ff81 	bl	8001028 <SPI_WaitFifoStateUntilTimeout>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d007      	beq.n	800113c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001130:	f043 0220 	orr.w	r2, r3, #32
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001138:	2303      	movs	r3, #3
 800113a:	e027      	b.n	800118c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	68bb      	ldr	r3, [r7, #8]
 8001142:	2200      	movs	r2, #0
 8001144:	2180      	movs	r1, #128	; 0x80
 8001146:	68f8      	ldr	r0, [r7, #12]
 8001148:	f7ff ff06 	bl	8000f58 <SPI_WaitFlagStateUntilTimeout>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d007      	beq.n	8001162 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001156:	f043 0220 	orr.w	r2, r3, #32
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800115e:	2303      	movs	r3, #3
 8001160:	e014      	b.n	800118c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	9300      	str	r3, [sp, #0]
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	2200      	movs	r2, #0
 800116a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800116e:	68f8      	ldr	r0, [r7, #12]
 8001170:	f7ff ff5a 	bl	8001028 <SPI_WaitFifoStateUntilTimeout>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d007      	beq.n	800118a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117e:	f043 0220 	orr.w	r2, r3, #32
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8001186:	2303      	movs	r3, #3
 8001188:	e000      	b.n	800118c <SPI_EndRxTxTransaction+0x84>
  }
  return HAL_OK;
 800118a:	2300      	movs	r3, #0
}
 800118c:	4618      	mov	r0, r3
 800118e:	3710      	adds	r7, #16
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}

08001194 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001194:	b480      	push	{r7}
 8001196:	b089      	sub	sp, #36	; 0x24
 8001198:	af00      	add	r7, sp, #0
 800119a:	60f8      	str	r0, [r7, #12]
 800119c:	60b9      	str	r1, [r7, #8]
 800119e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	68bb      	ldr	r3, [r7, #8]
 80011a6:	617b      	str	r3, [r7, #20]
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	fa93 f3a3 	rbit	r3, r3
 80011ae:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	fab3 f383 	clz	r3, r3
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2103      	movs	r1, #3
 80011ba:	fa01 f303 	lsl.w	r3, r1, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	401a      	ands	r2, r3
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa93 f3a3 	rbit	r3, r3
 80011cc:	61bb      	str	r3, [r7, #24]
  return(result);
 80011ce:	69bb      	ldr	r3, [r7, #24]
 80011d0:	fab3 f383 	clz	r3, r3
 80011d4:	005b      	lsls	r3, r3, #1
 80011d6:	6879      	ldr	r1, [r7, #4]
 80011d8:	fa01 f303 	lsl.w	r3, r1, r3
 80011dc:	431a      	orrs	r2, r3
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	601a      	str	r2, [r3, #0]
}
 80011e2:	bf00      	nop
 80011e4:	3724      	adds	r7, #36	; 0x24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 80011ee:	b480      	push	{r7}
 80011f0:	b085      	sub	sp, #20
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	685a      	ldr	r2, [r3, #4]
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	43db      	mvns	r3, r3
 8001202:	401a      	ands	r2, r3
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	6879      	ldr	r1, [r7, #4]
 8001208:	fb01 f303 	mul.w	r3, r1, r3
 800120c:	431a      	orrs	r2, r3
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	605a      	str	r2, [r3, #4]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr

0800121e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_MEDIUM
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 800121e:	b480      	push	{r7}
 8001220:	b089      	sub	sp, #36	; 0x24
 8001222:	af00      	add	r7, sp, #0
 8001224:	60f8      	str	r0, [r7, #12]
 8001226:	60b9      	str	r1, [r7, #8]
 8001228:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	689a      	ldr	r2, [r3, #8]
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	fa93 f3a3 	rbit	r3, r3
 8001238:	613b      	str	r3, [r7, #16]
  return(result);
 800123a:	693b      	ldr	r3, [r7, #16]
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	005b      	lsls	r3, r3, #1
 8001242:	2103      	movs	r1, #3
 8001244:	fa01 f303 	lsl.w	r3, r1, r3
 8001248:	43db      	mvns	r3, r3
 800124a:	401a      	ands	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	69fb      	ldr	r3, [r7, #28]
 8001252:	fa93 f3a3 	rbit	r3, r3
 8001256:	61bb      	str	r3, [r7, #24]
  return(result);
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	fab3 f383 	clz	r3, r3
 800125e:	005b      	lsls	r3, r3, #1
 8001260:	6879      	ldr	r1, [r7, #4]
 8001262:	fa01 f303 	lsl.w	r3, r1, r3
 8001266:	431a      	orrs	r2, r3
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 800126c:	bf00      	nop
 800126e:	3724      	adds	r7, #36	; 0x24
 8001270:	46bd      	mov	sp, r7
 8001272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001276:	4770      	bx	lr

08001278 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001278:	b480      	push	{r7}
 800127a:	b089      	sub	sp, #36	; 0x24
 800127c:	af00      	add	r7, sp, #0
 800127e:	60f8      	str	r0, [r7, #12]
 8001280:	60b9      	str	r1, [r7, #8]
 8001282:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	68da      	ldr	r2, [r3, #12]
 8001288:	68bb      	ldr	r3, [r7, #8]
 800128a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	697b      	ldr	r3, [r7, #20]
 800128e:	fa93 f3a3 	rbit	r3, r3
 8001292:	613b      	str	r3, [r7, #16]
  return(result);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	fab3 f383 	clz	r3, r3
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	2103      	movs	r1, #3
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	43db      	mvns	r3, r3
 80012a4:	401a      	ands	r2, r3
 80012a6:	68bb      	ldr	r3, [r7, #8]
 80012a8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	fa93 f3a3 	rbit	r3, r3
 80012b0:	61bb      	str	r3, [r7, #24]
  return(result);
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	fab3 f383 	clz	r3, r3
 80012b8:	005b      	lsls	r3, r3, #1
 80012ba:	6879      	ldr	r1, [r7, #4]
 80012bc:	fa01 f303 	lsl.w	r3, r1, r3
 80012c0:	431a      	orrs	r2, r3
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	60da      	str	r2, [r3, #12]
}
 80012c6:	bf00      	nop
 80012c8:	3724      	adds	r7, #36	; 0x24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80012d2:	b480      	push	{r7}
 80012d4:	b089      	sub	sp, #36	; 0x24
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	60f8      	str	r0, [r7, #12]
 80012da:	60b9      	str	r1, [r7, #8]
 80012dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	6a1a      	ldr	r2, [r3, #32]
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e6:	697b      	ldr	r3, [r7, #20]
 80012e8:	fa93 f3a3 	rbit	r3, r3
 80012ec:	613b      	str	r3, [r7, #16]
  return(result);
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	009b      	lsls	r3, r3, #2
 80012f6:	210f      	movs	r1, #15
 80012f8:	fa01 f303 	lsl.w	r3, r1, r3
 80012fc:	43db      	mvns	r3, r3
 80012fe:	401a      	ands	r2, r3
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001304:	69fb      	ldr	r3, [r7, #28]
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	61bb      	str	r3, [r7, #24]
  return(result);
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	fa01 f303 	lsl.w	r3, r1, r3
 800131a:	431a      	orrs	r2, r3
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8001320:	bf00      	nop
 8001322:	3724      	adds	r7, #36	; 0x24
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr

0800132c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800132c:	b480      	push	{r7}
 800132e:	b089      	sub	sp, #36	; 0x24
 8001330:	af00      	add	r7, sp, #0
 8001332:	60f8      	str	r0, [r7, #12]
 8001334:	60b9      	str	r1, [r7, #8]
 8001336:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800133c:	68bb      	ldr	r3, [r7, #8]
 800133e:	0a1b      	lsrs	r3, r3, #8
 8001340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	613b      	str	r3, [r7, #16]
  return(result);
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	fab3 f383 	clz	r3, r3
 8001350:	009b      	lsls	r3, r3, #2
 8001352:	210f      	movs	r1, #15
 8001354:	fa01 f303 	lsl.w	r3, r1, r3
 8001358:	43db      	mvns	r3, r3
 800135a:	401a      	ands	r2, r3
 800135c:	68bb      	ldr	r3, [r7, #8]
 800135e:	0a1b      	lsrs	r3, r3, #8
 8001360:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa93 f3a3 	rbit	r3, r3
 8001368:	61bb      	str	r3, [r7, #24]
  return(result);
 800136a:	69bb      	ldr	r3, [r7, #24]
 800136c:	fab3 f383 	clz	r3, r3
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	6879      	ldr	r1, [r7, #4]
 8001374:	fa01 f303 	lsl.w	r3, r1, r3
 8001378:	431a      	orrs	r2, r3
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 800137e:	bf00      	nop
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr

0800138a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b088      	sub	sp, #32
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
 8001392:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8001394:	2300      	movs	r3, #0
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8001398:	2300      	movs	r3, #0
 800139a:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	fa93 f3a3 	rbit	r3, r3
 80013a8:	613b      	str	r3, [r7, #16]
  return(result);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	fab3 f383 	clz	r3, r3
 80013b0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80013b2:	e048      	b.n	8001446 <LL_GPIO_Init+0xbc>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	2101      	movs	r1, #1
 80013ba:	69fb      	ldr	r3, [r7, #28]
 80013bc:	fa01 f303 	lsl.w	r3, r1, r3
 80013c0:	4013      	ands	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]

    if (currentpin)
 80013c4:	69bb      	ldr	r3, [r7, #24]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d03a      	beq.n	8001440 <LL_GPIO_Init+0xb6>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	461a      	mov	r2, r3
 80013d0:	69b9      	ldr	r1, [r7, #24]
 80013d2:	6878      	ldr	r0, [r7, #4]
 80013d4:	f7ff fede 	bl	8001194 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80013d8:	683b      	ldr	r3, [r7, #0]
 80013da:	685b      	ldr	r3, [r3, #4]
 80013dc:	2b01      	cmp	r3, #1
 80013de:	d003      	beq.n	80013e8 <LL_GPIO_Init+0x5e>
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	2b02      	cmp	r3, #2
 80013e6:	d106      	bne.n	80013f6 <LL_GPIO_Init+0x6c>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	689b      	ldr	r3, [r3, #8]
 80013ec:	461a      	mov	r2, r3
 80013ee:	69b9      	ldr	r1, [r7, #24]
 80013f0:	6878      	ldr	r0, [r7, #4]
 80013f2:	f7ff ff14 	bl	800121e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	461a      	mov	r2, r3
 80013fc:	69b9      	ldr	r1, [r7, #24]
 80013fe:	6878      	ldr	r0, [r7, #4]
 8001400:	f7ff ff3a 	bl	8001278 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	2b02      	cmp	r3, #2
 800140a:	d119      	bne.n	8001440 <LL_GPIO_Init+0xb6>
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	fa93 f3a3 	rbit	r3, r3
 8001416:	60bb      	str	r3, [r7, #8]
  return(result);
 8001418:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 800141a:	fab3 f383 	clz	r3, r3
 800141e:	2b07      	cmp	r3, #7
 8001420:	d807      	bhi.n	8001432 <LL_GPIO_Init+0xa8>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	695b      	ldr	r3, [r3, #20]
 8001426:	461a      	mov	r2, r3
 8001428:	69b9      	ldr	r1, [r7, #24]
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f7ff ff51 	bl	80012d2 <LL_GPIO_SetAFPin_0_7>
 8001430:	e006      	b.n	8001440 <LL_GPIO_Init+0xb6>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	461a      	mov	r2, r3
 8001438:	69b9      	ldr	r1, [r7, #24]
 800143a:	6878      	ldr	r0, [r7, #4]
 800143c:	f7ff ff76 	bl	800132c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	3301      	adds	r3, #1
 8001444:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8001446:	683b      	ldr	r3, [r7, #0]
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	69fb      	ldr	r3, [r7, #28]
 800144c:	fa22 f303 	lsr.w	r3, r2, r3
 8001450:	2b00      	cmp	r3, #0
 8001452:	d1af      	bne.n	80013b4 <LL_GPIO_Init+0x2a>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b01      	cmp	r3, #1
 800145a:	d003      	beq.n	8001464 <LL_GPIO_Init+0xda>
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b02      	cmp	r3, #2
 8001462:	d107      	bne.n	8001474 <LL_GPIO_Init+0xea>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	6819      	ldr	r1, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	68db      	ldr	r3, [r3, #12]
 800146c:	461a      	mov	r2, r3
 800146e:	6878      	ldr	r0, [r7, #4]
 8001470:	f7ff febd 	bl	80011ee <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	3720      	adds	r7, #32
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
	...

08001480 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8001484:	4b06      	ldr	r3, [pc, #24]	; (80014a0 <LL_RCC_HSI_IsReady+0x20>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	f003 0302 	and.w	r3, r3, #2
 800148c:	2b02      	cmp	r3, #2
 800148e:	bf0c      	ite	eq
 8001490:	2301      	moveq	r3, #1
 8001492:	2300      	movne	r3, #0
 8001494:	b2db      	uxtb	r3, r3
}
 8001496:	4618      	mov	r0, r3
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr
 80014a0:	40021000 	.word	0x40021000

080014a4 <LL_RCC_LSE_IsReady>:
  * @brief  Check if LSE oscillator Ready
  * @rmtoll BDCR         LSERDY        LL_RCC_LSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_LSE_IsReady(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY));
 80014a8:	4b06      	ldr	r3, [pc, #24]	; (80014c4 <LL_RCC_LSE_IsReady+0x20>)
 80014aa:	6a1b      	ldr	r3, [r3, #32]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	bf0c      	ite	eq
 80014b4:	2301      	moveq	r3, #1
 80014b6:	2300      	movne	r3, #0
 80014b8:	b2db      	uxtb	r3, r3
}
 80014ba:	4618      	mov	r0, r3
 80014bc:	46bd      	mov	sp, r7
 80014be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c2:	4770      	bx	lr
 80014c4:	40021000 	.word	0x40021000

080014c8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80014cc:	4b04      	ldr	r3, [pc, #16]	; (80014e0 <LL_RCC_GetSysClkSource+0x18>)
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	f003 030c 	and.w	r3, r3, #12
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000

080014e4 <LL_RCC_GetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_128
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  */
__STATIC_INLINE uint32_t LL_RCC_GetAHBPrescaler(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <LL_RCC_GetAHBPrescaler+0x18>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000

08001500 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001504:	4b04      	ldr	r3, [pc, #16]	; (8001518 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001506:	685b      	ldr	r3, [r3, #4]
 8001508:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800150c:	4618      	mov	r0, r3
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	40021000 	.word	0x40021000

0800151c <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001520:	4b04      	ldr	r3, [pc, #16]	; (8001534 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001528:	4618      	mov	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
 8001532:	bf00      	nop
 8001534:	40021000 	.word	0x40021000

08001538 <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART3_CLKSOURCE_HSI (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t USARTx)
{
 8001538:	b480      	push	{r7}
 800153a:	b083      	sub	sp, #12
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CFGR3, (RCC_CFGR3_USART1SW << USARTx)) | (USARTx << 24U));
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <LL_RCC_GetUSARTClockSource+0x28>)
 8001542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001544:	2103      	movs	r1, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	fa01 f303 	lsl.w	r3, r1, r3
 800154c:	401a      	ands	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	061b      	lsls	r3, r3, #24
 8001552:	4313      	orrs	r3, r2
}
 8001554:	4618      	mov	r0, r3
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	40021000 	.word	0x40021000

08001564 <LL_RCC_PLL_GetMainSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *
  *         (*) value not defined in all devices
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLSRC));
 8001568:	4b04      	ldr	r3, [pc, #16]	; (800157c <LL_RCC_PLL_GetMainSource+0x18>)
 800156a:	685b      	ldr	r3, [r3, #4]
 800156c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
}
 8001570:	4618      	mov	r0, r3
 8001572:	46bd      	mov	sp, r7
 8001574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001578:	4770      	bx	lr
 800157a:	bf00      	nop
 800157c:	40021000 	.word	0x40021000

08001580 <LL_RCC_PLL_GetMultiplicator>:
  *         @arg @ref LL_RCC_PLL_MUL_14
  *         @arg @ref LL_RCC_PLL_MUL_15
  *         @arg @ref LL_RCC_PLL_MUL_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMultiplicator(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PLLMUL));
 8001584:	4b04      	ldr	r3, [pc, #16]	; (8001598 <LL_RCC_PLL_GetMultiplicator+0x18>)
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
}
 800158c:	4618      	mov	r0, r3
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000

0800159c <LL_RCC_PLL_GetPrediv>:
  *         @arg @ref LL_RCC_PREDIV_DIV_14
  *         @arg @ref LL_RCC_PREDIV_DIV_15
  *         @arg @ref LL_RCC_PREDIV_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetPrediv(void)
{
 800159c:	b480      	push	{r7}
 800159e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR2, RCC_CFGR2_PREDIV));
 80015a0:	4b04      	ldr	r3, [pc, #16]	; (80015b4 <LL_RCC_PLL_GetPrediv+0x18>)
 80015a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80015a4:	f003 030f 	and.w	r3, r3, #15
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
 80015b2:	bf00      	nop
 80015b4:	40021000 	.word	0x40021000

080015b8 <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80015c0:	f000 f860 	bl	8001684 <RCC_GetSystemClockFreq>
 80015c4:	4602      	mov	r2, r0
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4618      	mov	r0, r3
 80015d0:	f000 f87a 	bl	80016c8 <RCC_GetHCLKClockFreq>
 80015d4:	4602      	mov	r2, r0
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	685b      	ldr	r3, [r3, #4]
 80015de:	4618      	mov	r0, r3
 80015e0:	f000 f888 	bl	80016f4 <RCC_GetPCLK1ClockFreq>
 80015e4:	4602      	mov	r2, r0
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f000 f894 	bl	800171c <RCC_GetPCLK2ClockFreq>
 80015f4:	4602      	mov	r2, r0
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	60da      	str	r2, [r3, #12]
}
 80015fa:	bf00      	nop
 80015fc:	3708      	adds	r7, #8
 80015fe:	46bd      	mov	sp, r7
 8001600:	bd80      	pop	{r7, pc}
	...

08001604 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         @arg @ref LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b084      	sub	sp, #16
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800160c:	2300      	movs	r3, #0
 800160e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));
#if defined(RCC_CFGR3_USART1SW)
  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d12a      	bne.n	800166c <LL_RCC_GetUSARTClockFreq+0x68>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ff8e 	bl	8001538 <LL_RCC_GetUSARTClockSource>
 800161c:	4603      	mov	r3, r0
 800161e:	2b02      	cmp	r3, #2
 8001620:	d00f      	beq.n	8001642 <LL_RCC_GetUSARTClockFreq+0x3e>
 8001622:	2b03      	cmp	r3, #3
 8001624:	d005      	beq.n	8001632 <LL_RCC_GetUSARTClockFreq+0x2e>
 8001626:	2b01      	cmp	r3, #1
 8001628:	d114      	bne.n	8001654 <LL_RCC_GetUSARTClockFreq+0x50>
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800162a:	f000 f82b 	bl	8001684 <RCC_GetSystemClockFreq>
 800162e:	60f8      	str	r0, [r7, #12]
        break;
 8001630:	e021      	b.n	8001676 <LL_RCC_GetUSARTClockFreq+0x72>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady())
 8001632:	f7ff ff25 	bl	8001480 <LL_RCC_HSI_IsReady>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d019      	beq.n	8001670 <LL_RCC_GetUSARTClockFreq+0x6c>
        {
          usart_frequency = HSI_VALUE;
 800163c:	4b10      	ldr	r3, [pc, #64]	; (8001680 <LL_RCC_GetUSARTClockFreq+0x7c>)
 800163e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001640:	e016      	b.n	8001670 <LL_RCC_GetUSARTClockFreq+0x6c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady())
 8001642:	f7ff ff2f 	bl	80014a4 <LL_RCC_LSE_IsReady>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d013      	beq.n	8001674 <LL_RCC_GetUSARTClockFreq+0x70>
        {
          usart_frequency = LSE_VALUE;
 800164c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001650:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001652:	e00f      	b.n	8001674 <LL_RCC_GetUSARTClockFreq+0x70>

#if defined(RCC_CFGR3_USART1SW_PCLK1)
      case LL_RCC_USART1_CLKSOURCE_PCLK1:  /* USART1 Clock is PCLK1 */
      default:
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001654:	f000 f816 	bl	8001684 <RCC_GetSystemClockFreq>
 8001658:	4603      	mov	r3, r0
 800165a:	4618      	mov	r0, r3
 800165c:	f000 f834 	bl	80016c8 <RCC_GetHCLKClockFreq>
 8001660:	4603      	mov	r3, r0
 8001662:	4618      	mov	r0, r3
 8001664:	f000 f846 	bl	80016f4 <RCC_GetPCLK1ClockFreq>
 8001668:	60f8      	str	r0, [r7, #12]
#else
      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
      default:
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
#endif /* RCC_CFGR3_USART1SW_PCLK1 */
        break;
 800166a:	e004      	b.n	8001676 <LL_RCC_GetUSARTClockFreq+0x72>
    }
  }
 800166c:	bf00      	nop
 800166e:	e002      	b.n	8001676 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001670:	bf00      	nop
 8001672:	e000      	b.n	8001676 <LL_RCC_GetUSARTClockFreq+0x72>
        break;
 8001674:	bf00      	nop
        break;
    }
  }

#endif /* RCC_CFGR3_USART3SW */
  return usart_frequency;
 8001676:	68fb      	ldr	r3, [r7, #12]
}
 8001678:	4618      	mov	r0, r3
 800167a:	3710      	adds	r7, #16
 800167c:	46bd      	mov	sp, r7
 800167e:	bd80      	pop	{r7, pc}
 8001680:	007a1200 	.word	0x007a1200

08001684 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 800168a:	2300      	movs	r3, #0
 800168c:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800168e:	f7ff ff1b 	bl	80014c8 <LL_RCC_GetSysClkSource>
 8001692:	4603      	mov	r3, r0
 8001694:	2b04      	cmp	r3, #4
 8001696:	d006      	beq.n	80016a6 <RCC_GetSystemClockFreq+0x22>
 8001698:	2b08      	cmp	r3, #8
 800169a:	d007      	beq.n	80016ac <RCC_GetSystemClockFreq+0x28>
 800169c:	2b00      	cmp	r3, #0
 800169e:	d109      	bne.n	80016b4 <RCC_GetSystemClockFreq+0x30>
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80016a0:	4b08      	ldr	r3, [pc, #32]	; (80016c4 <RCC_GetSystemClockFreq+0x40>)
 80016a2:	607b      	str	r3, [r7, #4]
      break;
 80016a4:	e009      	b.n	80016ba <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80016a6:	4b07      	ldr	r3, [pc, #28]	; (80016c4 <RCC_GetSystemClockFreq+0x40>)
 80016a8:	607b      	str	r3, [r7, #4]
      break;
 80016aa:	e006      	b.n	80016ba <RCC_GetSystemClockFreq+0x36>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80016ac:	f000 f84a 	bl	8001744 <RCC_PLL_GetFreqDomain_SYS>
 80016b0:	6078      	str	r0, [r7, #4]
      break;
 80016b2:	e002      	b.n	80016ba <RCC_GetSystemClockFreq+0x36>

    default:
      frequency = HSI_VALUE;
 80016b4:	4b03      	ldr	r3, [pc, #12]	; (80016c4 <RCC_GetSystemClockFreq+0x40>)
 80016b6:	607b      	str	r3, [r7, #4]
      break;
 80016b8:	bf00      	nop
  }

  return frequency;
 80016ba:	687b      	ldr	r3, [r7, #4]
}
 80016bc:	4618      	mov	r0, r3
 80016be:	3708      	adds	r7, #8
 80016c0:	46bd      	mov	sp, r7
 80016c2:	bd80      	pop	{r7, pc}
 80016c4:	007a1200 	.word	0x007a1200

080016c8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b082      	sub	sp, #8
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80016d0:	f7ff ff08 	bl	80014e4 <LL_RCC_GetAHBPrescaler>
 80016d4:	4603      	mov	r3, r0
 80016d6:	091b      	lsrs	r3, r3, #4
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	4a04      	ldr	r2, [pc, #16]	; (80016f0 <RCC_GetHCLKClockFreq+0x28>)
 80016de:	5cd3      	ldrb	r3, [r2, r3]
 80016e0:	461a      	mov	r2, r3
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	40d3      	lsrs	r3, r2
}
 80016e6:	4618      	mov	r0, r3
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	080077dc 	.word	0x080077dc

080016f4 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80016fc:	f7ff ff00 	bl	8001500 <LL_RCC_GetAPB1Prescaler>
 8001700:	4603      	mov	r3, r0
 8001702:	0a1b      	lsrs	r3, r3, #8
 8001704:	4a04      	ldr	r2, [pc, #16]	; (8001718 <RCC_GetPCLK1ClockFreq+0x24>)
 8001706:	5cd3      	ldrb	r3, [r2, r3]
 8001708:	461a      	mov	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	40d3      	lsrs	r3, r2
}
 800170e:	4618      	mov	r0, r3
 8001710:	3708      	adds	r7, #8
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	080077ec 	.word	0x080077ec

0800171c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001724:	f7ff fefa 	bl	800151c <LL_RCC_GetAPB2Prescaler>
 8001728:	4603      	mov	r3, r0
 800172a:	0adb      	lsrs	r3, r3, #11
 800172c:	4a04      	ldr	r2, [pc, #16]	; (8001740 <RCC_GetPCLK2ClockFreq+0x24>)
 800172e:	5cd3      	ldrb	r3, [r2, r3]
 8001730:	461a      	mov	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	40d3      	lsrs	r3, r2
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	080077ec 	.word	0x080077ec

08001744 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001744:	b590      	push	{r4, r7, lr}
 8001746:	b085      	sub	sp, #20
 8001748:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq = 0U, pllsource = 0U;
 800174a:	2300      	movs	r3, #0
 800174c:	60fb      	str	r3, [r7, #12]
 800174e:	2300      	movs	r3, #0
 8001750:	60bb      	str	r3, [r7, #8]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL divider) * PLL Multiplicator */

  /* Get PLL source */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001752:	f7ff ff07 	bl	8001564 <LL_RCC_PLL_GetMainSource>
 8001756:	60b8      	str	r0, [r7, #8]

  switch (pllsource)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <RCC_PLL_GetFreqDomain_SYS+0x22>
 800175e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001762:	d003      	beq.n	800176c <RCC_PLL_GetFreqDomain_SYS+0x28>
 8001764:	e005      	b.n	8001772 <RCC_PLL_GetFreqDomain_SYS+0x2e>
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
    case LL_RCC_PLLSOURCE_HSI:       /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
#else
    case LL_RCC_PLLSOURCE_HSI_DIV_2: /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE / 2U;
 8001766:	4b13      	ldr	r3, [pc, #76]	; (80017b4 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001768:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 800176a:	e005      	b.n	8001778 <RCC_PLL_GetFreqDomain_SYS+0x34>

    case LL_RCC_PLLSOURCE_HSE:       /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800176c:	4b12      	ldr	r3, [pc, #72]	; (80017b8 <RCC_PLL_GetFreqDomain_SYS+0x74>)
 800176e:	60fb      	str	r3, [r7, #12]
      break;
 8001770:	e002      	b.n	8001778 <RCC_PLL_GetFreqDomain_SYS+0x34>

    default:
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
      pllinputfreq = HSI_VALUE;
#else
      pllinputfreq = HSI_VALUE / 2U;
 8001772:	4b10      	ldr	r3, [pc, #64]	; (80017b4 <RCC_PLL_GetFreqDomain_SYS+0x70>)
 8001774:	60fb      	str	r3, [r7, #12]
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
      break;
 8001776:	bf00      	nop
  }
#if defined(RCC_PLLSRC_PREDIV1_SUPPORT)
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetMultiplicator(), LL_RCC_PLL_GetPrediv());
#else
  return __LL_RCC_CALC_PLLCLK_FREQ((pllinputfreq / (LL_RCC_PLL_GetPrediv() + 1U)), LL_RCC_PLL_GetMultiplicator());
 8001778:	f7ff ff10 	bl	800159c <LL_RCC_PLL_GetPrediv>
 800177c:	4603      	mov	r3, r0
 800177e:	3301      	adds	r3, #1
 8001780:	68fa      	ldr	r2, [r7, #12]
 8001782:	fbb2 f4f3 	udiv	r4, r2, r3
 8001786:	f7ff fefb 	bl	8001580 <LL_RCC_PLL_GetMultiplicator>
 800178a:	4603      	mov	r3, r0
 800178c:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8001790:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8001794:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	fa92 f2a2 	rbit	r2, r2
 800179c:	603a      	str	r2, [r7, #0]
  return(result);
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	fab2 f282 	clz	r2, r2
 80017a4:	40d3      	lsrs	r3, r2
 80017a6:	3302      	adds	r3, #2
 80017a8:	fb03 f304 	mul.w	r3, r3, r4
#endif /* RCC_PLLSRC_PREDIV1_SUPPORT */
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	3714      	adds	r7, #20
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd90      	pop	{r4, r7, pc}
 80017b4:	003d0900 	.word	0x003d0900
 80017b8:	007a1200 	.word	0x007a1200

080017bc <LL_USART_IsEnabled>:
  * @rmtoll CR1          UE            LL_USART_IsEnabled
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabled(USART_TypeDef *USARTx)
{
 80017bc:	b480      	push	{r7}
 80017be:	b083      	sub	sp, #12
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0301 	and.w	r3, r3, #1
 80017cc:	2b01      	cmp	r3, #1
 80017ce:	bf0c      	ite	eq
 80017d0:	2301      	moveq	r3, #1
 80017d2:	2300      	movne	r3, #0
 80017d4:	b2db      	uxtb	r3, r3
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr

080017e2 <LL_USART_SetStopBitsLength>:
  *         @arg @ref LL_USART_STOPBITS_1_5
  *         @arg @ref LL_USART_STOPBITS_2
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetStopBitsLength(USART_TypeDef *USARTx, uint32_t StopBits)
{
 80017e2:	b480      	push	{r7}
 80017e4:	b083      	sub	sp, #12
 80017e6:	af00      	add	r7, sp, #0
 80017e8:	6078      	str	r0, [r7, #4]
 80017ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	685b      	ldr	r3, [r3, #4]
 80017f0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	431a      	orrs	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	605a      	str	r2, [r3, #4]
}
 80017fc:	bf00      	nop
 80017fe:	370c      	adds	r7, #12
 8001800:	46bd      	mov	sp, r7
 8001802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001806:	4770      	bx	lr

08001808 <LL_USART_SetHWFlowCtrl>:
  *         @arg @ref LL_USART_HWCONTROL_CTS
  *         @arg @ref LL_USART_HWCONTROL_RTS_CTS
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetHWFlowCtrl(USART_TypeDef *USARTx, uint32_t HardwareFlowControl)
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
 8001810:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	431a      	orrs	r2, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	609a      	str	r2, [r3, #8]
}
 8001822:	bf00      	nop
 8001824:	370c      	adds	r7, #12
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr

0800182e <LL_USART_SetBaudRate>:
  * @param  BaudRate Baud Rate
  * @retval None
  */
__STATIC_INLINE void LL_USART_SetBaudRate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t OverSampling,
                                          uint32_t BaudRate)
{
 800182e:	b4b0      	push	{r4, r5, r7}
 8001830:	b085      	sub	sp, #20
 8001832:	af00      	add	r7, sp, #0
 8001834:	60f8      	str	r0, [r7, #12]
 8001836:	60b9      	str	r1, [r7, #8]
 8001838:	607a      	str	r2, [r7, #4]
 800183a:	603b      	str	r3, [r7, #0]
  register uint32_t usartdiv = 0x0U;
 800183c:	2500      	movs	r5, #0
  register uint32_t brrtemp = 0x0U;
 800183e:	2400      	movs	r4, #0

  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001846:	d114      	bne.n	8001872 <LL_USART_SetBaudRate+0x44>
  {
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001848:	68bb      	ldr	r3, [r7, #8]
 800184a:	005a      	lsls	r2, r3, #1
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	085b      	lsrs	r3, r3, #1
 8001850:	441a      	add	r2, r3
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	fbb2 f3f3 	udiv	r3, r2, r3
 8001858:	b29b      	uxth	r3, r3
 800185a:	461d      	mov	r5, r3
    brrtemp = usartdiv & 0xFFF0U;
 800185c:	f64f 74f0 	movw	r4, #65520	; 0xfff0
 8001860:	402c      	ands	r4, r5
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001862:	086b      	lsrs	r3, r5, #1
 8001864:	b29b      	uxth	r3, r3
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	431c      	orrs	r4, r3
    USARTx->BRR = brrtemp;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	60dc      	str	r4, [r3, #12]
  }
  else
  {
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
  }
}
 8001870:	e00a      	b.n	8001888 <LL_USART_SetBaudRate+0x5a>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	085a      	lsrs	r2, r3, #1
 8001876:	68bb      	ldr	r3, [r7, #8]
 8001878:	441a      	add	r2, r3
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001880:	b29b      	uxth	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	60da      	str	r2, [r3, #12]
}
 8001888:	bf00      	nop
 800188a:	3714      	adds	r7, #20
 800188c:	46bd      	mov	sp, r7
 800188e:	bcb0      	pop	{r4, r5, r7}
 8001890:	4770      	bx	lr
	...

08001894 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b088      	sub	sp, #32
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800189e:	2301      	movs	r3, #1
 80018a0:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80018a2:	2300      	movs	r3, #0
 80018a4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f7ff ff88 	bl	80017bc <LL_USART_IsEnabled>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d14e      	bne.n	8001950 <LL_USART_Init+0xbc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681a      	ldr	r2, [r3, #0]
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <LL_USART_Init+0xc8>)
 80018b8:	4013      	ands	r3, r2
 80018ba:	683a      	ldr	r2, [r7, #0]
 80018bc:	6851      	ldr	r1, [r2, #4]
 80018be:	683a      	ldr	r2, [r7, #0]
 80018c0:	68d2      	ldr	r2, [r2, #12]
 80018c2:	4311      	orrs	r1, r2
 80018c4:	683a      	ldr	r2, [r7, #0]
 80018c6:	6912      	ldr	r2, [r2, #16]
 80018c8:	4311      	orrs	r1, r2
 80018ca:	683a      	ldr	r2, [r7, #0]
 80018cc:	6992      	ldr	r2, [r2, #24]
 80018ce:	430a      	orrs	r2, r1
 80018d0:	431a      	orrs	r2, r3
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	4619      	mov	r1, r3
 80018dc:	6878      	ldr	r0, [r7, #4]
 80018de:	f7ff ff80 	bl	80017e2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	695b      	ldr	r3, [r3, #20]
 80018e6:	4619      	mov	r1, r3
 80018e8:	6878      	ldr	r0, [r7, #4]
 80018ea:	f7ff ff8d 	bl	8001808 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a1b      	ldr	r2, [pc, #108]	; (8001960 <LL_USART_Init+0xcc>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d104      	bne.n	8001900 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80018f6:	2000      	movs	r0, #0
 80018f8:	f7ff fe84 	bl	8001604 <LL_RCC_GetUSARTClockFreq>
 80018fc:	61b8      	str	r0, [r7, #24]
 80018fe:	e016      	b.n	800192e <LL_USART_Init+0x9a>
    }
    else if (USARTx == USART2)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4a18      	ldr	r2, [pc, #96]	; (8001964 <LL_USART_Init+0xd0>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d107      	bne.n	8001918 <LL_USART_Init+0x84>
    {
#if defined (RCC_CFGR3_USART2SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
#else
      /* USART2 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001908:	f107 0308 	add.w	r3, r7, #8
 800190c:	4618      	mov	r0, r3
 800190e:	f7ff fe53 	bl	80015b8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 8001912:	693b      	ldr	r3, [r7, #16]
 8001914:	61bb      	str	r3, [r7, #24]
 8001916:	e00a      	b.n	800192e <LL_USART_Init+0x9a>
#endif
    }
    else if (USARTx == USART3)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	4a13      	ldr	r2, [pc, #76]	; (8001968 <LL_USART_Init+0xd4>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d106      	bne.n	800192e <LL_USART_Init+0x9a>
    {
#if defined (RCC_CFGR3_USART3SW)
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
#else
      /* USART3 clock is PCLK */
      LL_RCC_GetSystemClocksFreq(&RCC_Clocks);
 8001920:	f107 0308 	add.w	r3, r7, #8
 8001924:	4618      	mov	r0, r3
 8001926:	f7ff fe47 	bl	80015b8 <LL_RCC_GetSystemClocksFreq>
      periphclk = RCC_Clocks.PCLK1_Frequency;
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b00      	cmp	r3, #0
 8001932:	d00d      	beq.n	8001950 <LL_USART_Init+0xbc>
        && (USART_InitStruct->BaudRate != 0U))
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d009      	beq.n	8001950 <LL_USART_Init+0xbc>
    {
      status = SUCCESS;
 800193c:	2300      	movs	r3, #0
 800193e:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	699a      	ldr	r2, [r3, #24]
 8001944:	683b      	ldr	r3, [r7, #0]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	69b9      	ldr	r1, [r7, #24]
 800194a:	6878      	ldr	r0, [r7, #4]
 800194c:	f7ff ff6f 	bl	800182e <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MAX(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8001950:	7ffb      	ldrb	r3, [r7, #31]
}
 8001952:	4618      	mov	r0, r3
 8001954:	3720      	adds	r7, #32
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	efff69f3 	.word	0xefff69f3
 8001960:	40013800 	.word	0x40013800
 8001964:	40004400 	.word	0x40004400
 8001968:	40004800 	.word	0x40004800

0800196c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800196c:	b480      	push	{r7}
 800196e:	b085      	sub	sp, #20
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <LL_mDelay+0x44>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800197a:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (Delay < LL_MAX_DELAY)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001982:	d00c      	beq.n	800199e <LL_mDelay+0x32>
  {
    Delay++;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	3301      	adds	r3, #1
 8001988:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800198a:	e008      	b.n	800199e <LL_mDelay+0x32>
  {
    if ((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <LL_mDelay+0x44>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001994:	2b00      	cmp	r3, #0
 8001996:	d002      	beq.n	800199e <LL_mDelay+0x32>
    {
      Delay--;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	3b01      	subs	r3, #1
 800199c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d1f3      	bne.n	800198c <LL_mDelay+0x20>
    }
  }
}
 80019a4:	bf00      	nop
 80019a6:	3714      	adds	r7, #20
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr
 80019b0:	e000e010 	.word	0xe000e010

080019b4 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <LL_SetSystemCoreClock+0x1c>)
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6013      	str	r3, [r2, #0]
}
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	20000008 	.word	0x20000008

080019d4 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber to identify the drive */
)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b084      	sub	sp, #16
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;
  
  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80019de:	79fb      	ldrb	r3, [r7, #7]
 80019e0:	4a08      	ldr	r2, [pc, #32]	; (8001a04 <disk_status+0x30>)
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	4413      	add	r3, r2
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	79fa      	ldrb	r2, [r7, #7]
 80019ec:	4905      	ldr	r1, [pc, #20]	; (8001a04 <disk_status+0x30>)
 80019ee:	440a      	add	r2, r1
 80019f0:	7a12      	ldrb	r2, [r2, #8]
 80019f2:	4610      	mov	r0, r2
 80019f4:	4798      	blx	r3
 80019f6:	4603      	mov	r3, r0
 80019f8:	73fb      	strb	r3, [r7, #15]
  return stat;
 80019fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	2000042c 	.word	0x2000042c

08001a08 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	4603      	mov	r3, r0
 8001a10:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 8001a12:	2300      	movs	r3, #0
 8001a14:	73fb      	strb	r3, [r7, #15]
  
  if(disk.is_initialized[pdrv] == 0)
 8001a16:	79fb      	ldrb	r3, [r7, #7]
 8001a18:	4a0d      	ldr	r2, [pc, #52]	; (8001a50 <disk_initialize+0x48>)
 8001a1a:	5cd3      	ldrb	r3, [r2, r3]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d111      	bne.n	8001a44 <disk_initialize+0x3c>
  { 
    disk.is_initialized[pdrv] = 1;
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	4a0b      	ldr	r2, [pc, #44]	; (8001a50 <disk_initialize+0x48>)
 8001a24:	2101      	movs	r1, #1
 8001a26:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	4a09      	ldr	r2, [pc, #36]	; (8001a50 <disk_initialize+0x48>)
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	79fa      	ldrb	r2, [r7, #7]
 8001a36:	4906      	ldr	r1, [pc, #24]	; (8001a50 <disk_initialize+0x48>)
 8001a38:	440a      	add	r2, r1
 8001a3a:	7a12      	ldrb	r2, [r2, #8]
 8001a3c:	4610      	mov	r0, r2
 8001a3e:	4798      	blx	r3
 8001a40:	4603      	mov	r3, r0
 8001a42:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 8001a44:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000042c 	.word	0x2000042c

08001a54 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 8001a54:	b590      	push	{r4, r7, lr}
 8001a56:	b087      	sub	sp, #28
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	60b9      	str	r1, [r7, #8]
 8001a5c:	607a      	str	r2, [r7, #4]
 8001a5e:	603b      	str	r3, [r7, #0]
 8001a60:	4603      	mov	r3, r0
 8001a62:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
 
  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4a0a      	ldr	r2, [pc, #40]	; (8001a90 <disk_read+0x3c>)
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	689c      	ldr	r4, [r3, #8]
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	4a07      	ldr	r2, [pc, #28]	; (8001a90 <disk_read+0x3c>)
 8001a74:	4413      	add	r3, r2
 8001a76:	7a18      	ldrb	r0, [r3, #8]
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	687a      	ldr	r2, [r7, #4]
 8001a7c:	68b9      	ldr	r1, [r7, #8]
 8001a7e:	47a0      	blx	r4
 8001a80:	4603      	mov	r3, r0
 8001a82:	75fb      	strb	r3, [r7, #23]
  return res;
 8001a84:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	371c      	adds	r7, #28
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd90      	pop	{r4, r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	2000042c 	.word	0x2000042c

08001a94 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 8001a94:	b590      	push	{r4, r7, lr}
 8001a96:	b087      	sub	sp, #28
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	60b9      	str	r1, [r7, #8]
 8001a9c:	607a      	str	r2, [r7, #4]
 8001a9e:	603b      	str	r3, [r7, #0]
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	73fb      	strb	r3, [r7, #15]
  DRESULT res;
  
  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 8001aa4:	7bfb      	ldrb	r3, [r7, #15]
 8001aa6:	4a0a      	ldr	r2, [pc, #40]	; (8001ad0 <disk_write+0x3c>)
 8001aa8:	009b      	lsls	r3, r3, #2
 8001aaa:	4413      	add	r3, r2
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	68dc      	ldr	r4, [r3, #12]
 8001ab0:	7bfb      	ldrb	r3, [r7, #15]
 8001ab2:	4a07      	ldr	r2, [pc, #28]	; (8001ad0 <disk_write+0x3c>)
 8001ab4:	4413      	add	r3, r2
 8001ab6:	7a18      	ldrb	r0, [r3, #8]
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	687a      	ldr	r2, [r7, #4]
 8001abc:	68b9      	ldr	r1, [r7, #8]
 8001abe:	47a0      	blx	r4
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	75fb      	strb	r3, [r7, #23]
  return res;
 8001ac4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	371c      	adds	r7, #28
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd90      	pop	{r4, r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	2000042c 	.word	0x2000042c

08001ad4 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b084      	sub	sp, #16
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	603a      	str	r2, [r7, #0]
 8001ade:	71fb      	strb	r3, [r7, #7]
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 8001ae4:	79fb      	ldrb	r3, [r7, #7]
 8001ae6:	4a09      	ldr	r2, [pc, #36]	; (8001b0c <disk_ioctl+0x38>)
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	691b      	ldr	r3, [r3, #16]
 8001af0:	79fa      	ldrb	r2, [r7, #7]
 8001af2:	4906      	ldr	r1, [pc, #24]	; (8001b0c <disk_ioctl+0x38>)
 8001af4:	440a      	add	r2, r1
 8001af6:	7a10      	ldrb	r0, [r2, #8]
 8001af8:	79b9      	ldrb	r1, [r7, #6]
 8001afa:	683a      	ldr	r2, [r7, #0]
 8001afc:	4798      	blx	r3
 8001afe:	4603      	mov	r3, r0
 8001b00:	73fb      	strb	r3, [r7, #15]
  return res;
 8001b02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b04:	4618      	mov	r0, r3
 8001b06:	3710      	adds	r7, #16
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	2000042c 	.word	0x2000042c

08001b10 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8001b10:	b480      	push	{r7}
 8001b12:	b087      	sub	sp, #28
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	60f8      	str	r0, [r7, #12]
 8001b18:	60b9      	str	r1, [r7, #8]
 8001b1a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8001b24:	e007      	b.n	8001b36 <mem_cpy+0x26>
		*d++ = *s++;
 8001b26:	693a      	ldr	r2, [r7, #16]
 8001b28:	1c53      	adds	r3, r2, #1
 8001b2a:	613b      	str	r3, [r7, #16]
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	1c59      	adds	r1, r3, #1
 8001b30:	6179      	str	r1, [r7, #20]
 8001b32:	7812      	ldrb	r2, [r2, #0]
 8001b34:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	1e5a      	subs	r2, r3, #1
 8001b3a:	607a      	str	r2, [r7, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d1f2      	bne.n	8001b26 <mem_cpy+0x16>
}
 8001b40:	bf00      	nop
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8001b4c:	b480      	push	{r7}
 8001b4e:	b087      	sub	sp, #28
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	60f8      	str	r0, [r7, #12]
 8001b54:	60b9      	str	r1, [r7, #8]
 8001b56:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8001b5c:	e005      	b.n	8001b6a <mem_set+0x1e>
		*d++ = (BYTE)val;
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	1c5a      	adds	r2, r3, #1
 8001b62:	617a      	str	r2, [r7, #20]
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	1e5a      	subs	r2, r3, #1
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d1f4      	bne.n	8001b5e <mem_set+0x12>
}
 8001b74:	bf00      	nop
 8001b76:	371c      	adds	r7, #28
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7e:	4770      	bx	lr

08001b80 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	60f8      	str	r0, [r7, #12]
 8001b88:	60b9      	str	r1, [r7, #8]
 8001b8a:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	61fb      	str	r3, [r7, #28]
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8001b94:	2300      	movs	r3, #0
 8001b96:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8001b98:	bf00      	nop
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	1e5a      	subs	r2, r3, #1
 8001b9e:	607a      	str	r2, [r7, #4]
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d00d      	beq.n	8001bc0 <mem_cmp+0x40>
 8001ba4:	69fb      	ldr	r3, [r7, #28]
 8001ba6:	1c5a      	adds	r2, r3, #1
 8001ba8:	61fa      	str	r2, [r7, #28]
 8001baa:	781b      	ldrb	r3, [r3, #0]
 8001bac:	4619      	mov	r1, r3
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	1c5a      	adds	r2, r3, #1
 8001bb2:	61ba      	str	r2, [r7, #24]
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	1acb      	subs	r3, r1, r3
 8001bb8:	617b      	str	r3, [r7, #20]
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d0ec      	beq.n	8001b9a <mem_cmp+0x1a>
	return r;
 8001bc0:	697b      	ldr	r3, [r7, #20]
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3724      	adds	r7, #36	; 0x24
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bcc:	4770      	bx	lr

08001bce <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8001bce:	b480      	push	{r7}
 8001bd0:	b083      	sub	sp, #12
 8001bd2:	af00      	add	r7, sp, #0
 8001bd4:	6078      	str	r0, [r7, #4]
 8001bd6:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8001bd8:	e002      	b.n	8001be0 <chk_chr+0x12>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	3301      	adds	r3, #1
 8001bde:	607b      	str	r3, [r7, #4]
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d005      	beq.n	8001bf4 <chk_chr+0x26>
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	781b      	ldrb	r3, [r3, #0]
 8001bec:	461a      	mov	r2, r3
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d1f2      	bne.n	8001bda <chk_chr+0xc>
	return *str;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	781b      	ldrb	r3, [r3, #0]
}
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	370c      	adds	r7, #12
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr

08001c04 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b085      	sub	sp, #20
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60bb      	str	r3, [r7, #8]
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	60fb      	str	r3, [r7, #12]
 8001c16:	e038      	b.n	8001c8a <chk_lock+0x86>
		if (Files[i].fs) {	/* Existing entry */
 8001c18:	4930      	ldr	r1, [pc, #192]	; (8001cdc <chk_lock+0xd8>)
 8001c1a:	68fa      	ldr	r2, [r7, #12]
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	440b      	add	r3, r1
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d029      	beq.n	8001c80 <chk_lock+0x7c>
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8001c2c:	492b      	ldr	r1, [pc, #172]	; (8001cdc <chk_lock+0xd8>)
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	4613      	mov	r3, r2
 8001c32:	005b      	lsls	r3, r3, #1
 8001c34:	4413      	add	r3, r2
 8001c36:	009b      	lsls	r3, r3, #2
 8001c38:	440b      	add	r3, r1
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001c42:	429a      	cmp	r2, r3
 8001c44:	d11e      	bne.n	8001c84 <chk_lock+0x80>
				Files[i].clu == dp->sclust &&
 8001c46:	4925      	ldr	r1, [pc, #148]	; (8001cdc <chk_lock+0xd8>)
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	4613      	mov	r3, r2
 8001c4c:	005b      	lsls	r3, r3, #1
 8001c4e:	4413      	add	r3, r2
 8001c50:	009b      	lsls	r3, r3, #2
 8001c52:	440b      	add	r3, r1
 8001c54:	3304      	adds	r3, #4
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
			if (Files[i].fs == dp->fs &&	 	/* Check if the object matched with an open object */
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d110      	bne.n	8001c84 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8001c62:	491e      	ldr	r1, [pc, #120]	; (8001cdc <chk_lock+0xd8>)
 8001c64:	68fa      	ldr	r2, [r7, #12]
 8001c66:	4613      	mov	r3, r2
 8001c68:	005b      	lsls	r3, r3, #1
 8001c6a:	4413      	add	r3, r2
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	440b      	add	r3, r1
 8001c70:	3308      	adds	r3, #8
 8001c72:	881a      	ldrh	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
				Files[i].clu == dp->sclust &&
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d102      	bne.n	8001c84 <chk_lock+0x80>
				Files[i].idx == dp->index) break;
 8001c7e:	e007      	b.n	8001c90 <chk_lock+0x8c>
		} else {			/* Blank entry */
			be = 1;
 8001c80:	2301      	movs	r3, #1
 8001c82:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	3301      	adds	r3, #1
 8001c88:	60fb      	str	r3, [r7, #12]
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b01      	cmp	r3, #1
 8001c8e:	d9c3      	bls.n	8001c18 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK)	/* The object is not opened */
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2b02      	cmp	r3, #2
 8001c94:	d109      	bne.n	8001caa <chk_lock+0xa6>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8001c96:	68bb      	ldr	r3, [r7, #8]
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d102      	bne.n	8001ca2 <chk_lock+0x9e>
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	2b02      	cmp	r3, #2
 8001ca0:	d101      	bne.n	8001ca6 <chk_lock+0xa2>
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	e013      	b.n	8001cce <chk_lock+0xca>
 8001ca6:	2312      	movs	r3, #18
 8001ca8:	e011      	b.n	8001cce <chk_lock+0xca>

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d10b      	bne.n	8001cc8 <chk_lock+0xc4>
 8001cb0:	490a      	ldr	r1, [pc, #40]	; (8001cdc <chk_lock+0xd8>)
 8001cb2:	68fa      	ldr	r2, [r7, #12]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	005b      	lsls	r3, r3, #1
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	330a      	adds	r3, #10
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc6:	d101      	bne.n	8001ccc <chk_lock+0xc8>
 8001cc8:	2310      	movs	r3, #16
 8001cca:	e000      	b.n	8001cce <chk_lock+0xca>
 8001ccc:	2300      	movs	r3, #0
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000214 	.word	0x20000214

08001ce0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	e002      	b.n	8001cf2 <enq_lock+0x12>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d809      	bhi.n	8001d0c <enq_lock+0x2c>
 8001cf8:	490a      	ldr	r1, [pc, #40]	; (8001d24 <enq_lock+0x44>)
 8001cfa:	687a      	ldr	r2, [r7, #4]
 8001cfc:	4613      	mov	r3, r2
 8001cfe:	005b      	lsls	r3, r3, #1
 8001d00:	4413      	add	r3, r2
 8001d02:	009b      	lsls	r3, r3, #2
 8001d04:	440b      	add	r3, r1
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d1ef      	bne.n	8001cec <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	bf14      	ite	ne
 8001d12:	2301      	movne	r3, #1
 8001d14:	2300      	moveq	r3, #0
 8001d16:	b2db      	uxtb	r3, r3
}
 8001d18:	4618      	mov	r0, r3
 8001d1a:	370c      	adds	r7, #12
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr
 8001d24:	20000214 	.word	0x20000214

08001d28 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001d32:	2300      	movs	r3, #0
 8001d34:	60fb      	str	r3, [r7, #12]
 8001d36:	e02b      	b.n	8001d90 <inc_lock+0x68>
		if (Files[i].fs == dp->fs &&
 8001d38:	4956      	ldr	r1, [pc, #344]	; (8001e94 <inc_lock+0x16c>)
 8001d3a:	68fa      	ldr	r2, [r7, #12]
 8001d3c:	4613      	mov	r3, r2
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4413      	add	r3, r2
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	440b      	add	r3, r1
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8001d4e:	429a      	cmp	r2, r3
 8001d50:	d11b      	bne.n	8001d8a <inc_lock+0x62>
			Files[i].clu == dp->sclust &&
 8001d52:	4950      	ldr	r1, [pc, #320]	; (8001e94 <inc_lock+0x16c>)
 8001d54:	68fa      	ldr	r2, [r7, #12]
 8001d56:	4613      	mov	r3, r2
 8001d58:	005b      	lsls	r3, r3, #1
 8001d5a:	4413      	add	r3, r2
 8001d5c:	009b      	lsls	r3, r3, #2
 8001d5e:	440b      	add	r3, r1
 8001d60:	3304      	adds	r3, #4
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
		if (Files[i].fs == dp->fs &&
 8001d6a:	429a      	cmp	r2, r3
 8001d6c:	d10d      	bne.n	8001d8a <inc_lock+0x62>
			Files[i].idx == dp->index) break;
 8001d6e:	4949      	ldr	r1, [pc, #292]	; (8001e94 <inc_lock+0x16c>)
 8001d70:	68fa      	ldr	r2, [r7, #12]
 8001d72:	4613      	mov	r3, r2
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	4413      	add	r3, r2
 8001d78:	009b      	lsls	r3, r3, #2
 8001d7a:	440b      	add	r3, r1
 8001d7c:	3308      	adds	r3, #8
 8001d7e:	881a      	ldrh	r2, [r3, #0]
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
			Files[i].clu == dp->sclust &&
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d006      	beq.n	8001d98 <inc_lock+0x70>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	3301      	adds	r3, #1
 8001d8e:	60fb      	str	r3, [r7, #12]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	2b01      	cmp	r3, #1
 8001d94:	d9d0      	bls.n	8001d38 <inc_lock+0x10>
 8001d96:	e000      	b.n	8001d9a <inc_lock+0x72>
			Files[i].idx == dp->index) break;
 8001d98:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	2b02      	cmp	r3, #2
 8001d9e:	d145      	bne.n	8001e2c <inc_lock+0x104>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60fb      	str	r3, [r7, #12]
 8001da4:	e002      	b.n	8001dac <inc_lock+0x84>
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	3301      	adds	r3, #1
 8001daa:	60fb      	str	r3, [r7, #12]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d809      	bhi.n	8001dc6 <inc_lock+0x9e>
 8001db2:	4938      	ldr	r1, [pc, #224]	; (8001e94 <inc_lock+0x16c>)
 8001db4:	68fa      	ldr	r2, [r7, #12]
 8001db6:	4613      	mov	r3, r2
 8001db8:	005b      	lsls	r3, r3, #1
 8001dba:	4413      	add	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	440b      	add	r3, r1
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ef      	bne.n	8001da6 <inc_lock+0x7e>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d101      	bne.n	8001dd0 <inc_lock+0xa8>
 8001dcc:	2300      	movs	r3, #0
 8001dce:	e05a      	b.n	8001e86 <inc_lock+0x15e>
		Files[i].fs = dp->fs;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f8d3 1400 	ldr.w	r1, [r3, #1024]	; 0x400
 8001dd6:	482f      	ldr	r0, [pc, #188]	; (8001e94 <inc_lock+0x16c>)
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4613      	mov	r3, r2
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4413      	add	r3, r2
 8001de0:	009b      	lsls	r3, r3, #2
 8001de2:	4403      	add	r3, r0
 8001de4:	6019      	str	r1, [r3, #0]
		Files[i].clu = dp->sclust;
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	f8d3 1408 	ldr.w	r1, [r3, #1032]	; 0x408
 8001dec:	4829      	ldr	r0, [pc, #164]	; (8001e94 <inc_lock+0x16c>)
 8001dee:	68fa      	ldr	r2, [r7, #12]
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	4403      	add	r3, r0
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	6019      	str	r1, [r3, #0]
		Files[i].idx = dp->index;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	f8b3 0406 	ldrh.w	r0, [r3, #1030]	; 0x406
 8001e04:	4923      	ldr	r1, [pc, #140]	; (8001e94 <inc_lock+0x16c>)
 8001e06:	68fa      	ldr	r2, [r7, #12]
 8001e08:	4613      	mov	r3, r2
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	4413      	add	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	440b      	add	r3, r1
 8001e12:	3308      	adds	r3, #8
 8001e14:	4602      	mov	r2, r0
 8001e16:	801a      	strh	r2, [r3, #0]
		Files[i].ctr = 0;
 8001e18:	491e      	ldr	r1, [pc, #120]	; (8001e94 <inc_lock+0x16c>)
 8001e1a:	68fa      	ldr	r2, [r7, #12]
 8001e1c:	4613      	mov	r3, r2
 8001e1e:	005b      	lsls	r3, r3, #1
 8001e20:	4413      	add	r3, r2
 8001e22:	009b      	lsls	r3, r3, #2
 8001e24:	440b      	add	r3, r1
 8001e26:	330a      	adds	r3, #10
 8001e28:	2200      	movs	r2, #0
 8001e2a:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00c      	beq.n	8001e4c <inc_lock+0x124>
 8001e32:	4918      	ldr	r1, [pc, #96]	; (8001e94 <inc_lock+0x16c>)
 8001e34:	68fa      	ldr	r2, [r7, #12]
 8001e36:	4613      	mov	r3, r2
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	4413      	add	r3, r2
 8001e3c:	009b      	lsls	r3, r3, #2
 8001e3e:	440b      	add	r3, r1
 8001e40:	330a      	adds	r3, #10
 8001e42:	881b      	ldrh	r3, [r3, #0]
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <inc_lock+0x124>
 8001e48:	2300      	movs	r3, #0
 8001e4a:	e01c      	b.n	8001e86 <inc_lock+0x15e>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d10b      	bne.n	8001e6a <inc_lock+0x142>
 8001e52:	4910      	ldr	r1, [pc, #64]	; (8001e94 <inc_lock+0x16c>)
 8001e54:	68fa      	ldr	r2, [r7, #12]
 8001e56:	4613      	mov	r3, r2
 8001e58:	005b      	lsls	r3, r3, #1
 8001e5a:	4413      	add	r3, r2
 8001e5c:	009b      	lsls	r3, r3, #2
 8001e5e:	440b      	add	r3, r1
 8001e60:	330a      	adds	r3, #10
 8001e62:	881b      	ldrh	r3, [r3, #0]
 8001e64:	3301      	adds	r3, #1
 8001e66:	b299      	uxth	r1, r3
 8001e68:	e001      	b.n	8001e6e <inc_lock+0x146>
 8001e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001e6e:	4809      	ldr	r0, [pc, #36]	; (8001e94 <inc_lock+0x16c>)
 8001e70:	68fa      	ldr	r2, [r7, #12]
 8001e72:	4613      	mov	r3, r2
 8001e74:	005b      	lsls	r3, r3, #1
 8001e76:	4413      	add	r3, r2
 8001e78:	009b      	lsls	r3, r3, #2
 8001e7a:	4403      	add	r3, r0
 8001e7c:	330a      	adds	r3, #10
 8001e7e:	460a      	mov	r2, r1
 8001e80:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8001e82:	68fb      	ldr	r3, [r7, #12]
 8001e84:	3301      	adds	r3, #1
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr
 8001e92:	bf00      	nop
 8001e94:	20000214 	.word	0x20000214

08001e98 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b085      	sub	sp, #20
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	607b      	str	r3, [r7, #4]
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d82e      	bhi.n	8001f0a <dec_lock+0x72>
		n = Files[i].ctr;
 8001eac:	491b      	ldr	r1, [pc, #108]	; (8001f1c <dec_lock+0x84>)
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	005b      	lsls	r3, r3, #1
 8001eb4:	4413      	add	r3, r2
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	440b      	add	r3, r1
 8001eba:	330a      	adds	r3, #10
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8001ec0:	89fb      	ldrh	r3, [r7, #14]
 8001ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ec6:	d101      	bne.n	8001ecc <dec_lock+0x34>
 8001ec8:	2300      	movs	r3, #0
 8001eca:	81fb      	strh	r3, [r7, #14]
		if (n) n--;					/* Decrement read mode open count */
 8001ecc:	89fb      	ldrh	r3, [r7, #14]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d002      	beq.n	8001ed8 <dec_lock+0x40>
 8001ed2:	89fb      	ldrh	r3, [r7, #14]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8001ed8:	4910      	ldr	r1, [pc, #64]	; (8001f1c <dec_lock+0x84>)
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	4613      	mov	r3, r2
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	4413      	add	r3, r2
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	440b      	add	r3, r1
 8001ee6:	330a      	adds	r3, #10
 8001ee8:	89fa      	ldrh	r2, [r7, #14]
 8001eea:	801a      	strh	r2, [r3, #0]
		if (!n) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8001eec:	89fb      	ldrh	r3, [r7, #14]
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d108      	bne.n	8001f04 <dec_lock+0x6c>
 8001ef2:	490a      	ldr	r1, [pc, #40]	; (8001f1c <dec_lock+0x84>)
 8001ef4:	687a      	ldr	r2, [r7, #4]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	440b      	add	r3, r1
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	737b      	strb	r3, [r7, #13]
 8001f08:	e001      	b.n	8001f0e <dec_lock+0x76>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8001f0e:	7b7b      	ldrb	r3, [r7, #13]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	3714      	adds	r7, #20
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr
 8001f1c:	20000214 	.word	0x20000214

08001f20 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b085      	sub	sp, #20
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8001f28:	2300      	movs	r3, #0
 8001f2a:	60fb      	str	r3, [r7, #12]
 8001f2c:	e016      	b.n	8001f5c <clear_lock+0x3c>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8001f2e:	4910      	ldr	r1, [pc, #64]	; (8001f70 <clear_lock+0x50>)
 8001f30:	68fa      	ldr	r2, [r7, #12]
 8001f32:	4613      	mov	r3, r2
 8001f34:	005b      	lsls	r3, r3, #1
 8001f36:	4413      	add	r3, r2
 8001f38:	009b      	lsls	r3, r3, #2
 8001f3a:	440b      	add	r3, r1
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	429a      	cmp	r2, r3
 8001f42:	d108      	bne.n	8001f56 <clear_lock+0x36>
 8001f44:	490a      	ldr	r1, [pc, #40]	; (8001f70 <clear_lock+0x50>)
 8001f46:	68fa      	ldr	r2, [r7, #12]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	005b      	lsls	r3, r3, #1
 8001f4c:	4413      	add	r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	2200      	movs	r2, #0
 8001f54:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	3301      	adds	r3, #1
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d9e5      	bls.n	8001f2e <clear_lock+0xe>
	}
}
 8001f62:	bf00      	nop
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
 8001f6e:	bf00      	nop
 8001f70:	20000214 	.word	0x20000214

08001f74 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b086      	sub	sp, #24
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	f893 3404 	ldrb.w	r3, [r3, #1028]	; 0x404
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d038      	beq.n	8001ffc <sync_window+0x88>
		wsect = fs->winsect;	/* Current sector number */
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8001f90:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win.d8, wsect, 1) != RES_OK) {
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8001f98:	6879      	ldr	r1, [r7, #4]
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	697a      	ldr	r2, [r7, #20]
 8001f9e:	f7ff fd79 	bl	8001a94 <disk_write>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d002      	beq.n	8001fae <sync_window+0x3a>
			res = FR_DISK_ERR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	73fb      	strb	r3, [r7, #15]
 8001fac:	e026      	b.n	8001ffc <sync_window+0x88>
		} else {
			fs->wflag = 0;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8001fbc:	697a      	ldr	r2, [r7, #20]
 8001fbe:	1ad2      	subs	r2, r2, r3
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d218      	bcs.n	8001ffc <sync_window+0x88>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8001fd0:	613b      	str	r3, [r7, #16]
 8001fd2:	e010      	b.n	8001ff6 <sync_window+0x82>
					wsect += fs->fsize;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	4413      	add	r3, r2
 8001fde:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win.d8, wsect, 1);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8001fe6:	6879      	ldr	r1, [r7, #4]
 8001fe8:	2301      	movs	r3, #1
 8001fea:	697a      	ldr	r2, [r7, #20]
 8001fec:	f7ff fd52 	bl	8001a94 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	3b01      	subs	r3, #1
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b01      	cmp	r3, #1
 8001ffa:	d8eb      	bhi.n	8001fd4 <sync_window+0x60>
				}
			}
		}
	}
	return res;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3718      	adds	r7, #24
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}

08002006 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[].d8 */
)
{
 8002006:	b580      	push	{r7, lr}
 8002008:	b084      	sub	sp, #16
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	429a      	cmp	r2, r3
 800201e:	d01b      	beq.n	8002058 <move_window+0x52>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff ffa7 	bl	8001f74 <sync_window>
 8002026:	4603      	mov	r3, r0
 8002028:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800202a:	7bfb      	ldrb	r3, [r7, #15]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d113      	bne.n	8002058 <move_window+0x52>
			if (disk_read(fs->drv, fs->win.d8, sector, 1) != RES_OK) {
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	2301      	movs	r3, #1
 800203a:	683a      	ldr	r2, [r7, #0]
 800203c:	f7ff fd0a 	bl	8001a54 <disk_read>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d004      	beq.n	8002050 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8002046:	f04f 33ff 	mov.w	r3, #4294967295
 800204a:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800204c:	2301      	movs	r3, #1
 800204e:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	683a      	ldr	r2, [r7, #0]
 8002054:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
		}
	}
	return res;
 8002058:	7bfb      	ldrb	r3, [r7, #15]
}
 800205a:	4618      	mov	r0, r3
 800205c:	3710      	adds	r7, #16
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}

08002062 <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 8002062:	b580      	push	{r7, lr}
 8002064:	b084      	sub	sp, #16
 8002066:	af00      	add	r7, sp, #0
 8002068:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f7ff ff82 	bl	8001f74 <sync_window>
 8002070:	4603      	mov	r3, r0
 8002072:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	2b00      	cmp	r3, #0
 8002078:	f040 809c 	bne.w	80021b4 <sync_fs+0x152>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8002082:	2b03      	cmp	r3, #3
 8002084:	f040 8089 	bne.w	800219a <sync_fs+0x138>
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 800208e:	2b01      	cmp	r3, #1
 8002090:	f040 8083 	bne.w	800219a <sync_fs+0x138>
			/* Create FSINFO structure */
			mem_set(fs->win.d8, 0, SS(fs));
 8002094:	6878      	ldr	r0, [r7, #4]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800209c:	461a      	mov	r2, r3
 800209e:	2100      	movs	r1, #0
 80020a0:	f7ff fd54 	bl	8001b4c <mem_set>
			ST_WORD(fs->win.d8 + BS_55AA, 0xAA55);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2255      	movs	r2, #85	; 0x55
 80020a8:	f883 21fe 	strb.w	r2, [r3, #510]	; 0x1fe
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	22aa      	movs	r2, #170	; 0xaa
 80020b0:	f883 21ff 	strb.w	r2, [r3, #511]	; 0x1ff
			ST_DWORD(fs->win.d8 + FSI_LeadSig, 0x41615252);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2252      	movs	r2, #82	; 0x52
 80020b8:	701a      	strb	r2, [r3, #0]
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	2252      	movs	r2, #82	; 0x52
 80020be:	705a      	strb	r2, [r3, #1]
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2261      	movs	r2, #97	; 0x61
 80020c4:	709a      	strb	r2, [r3, #2]
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2241      	movs	r2, #65	; 0x41
 80020ca:	70da      	strb	r2, [r3, #3]
			ST_DWORD(fs->win.d8 + FSI_StrucSig, 0x61417272);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2272      	movs	r2, #114	; 0x72
 80020d0:	f883 21e4 	strb.w	r2, [r3, #484]	; 0x1e4
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2272      	movs	r2, #114	; 0x72
 80020d8:	f883 21e5 	strb.w	r2, [r3, #485]	; 0x1e5
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2241      	movs	r2, #65	; 0x41
 80020e0:	f883 21e6 	strb.w	r2, [r3, #486]	; 0x1e6
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2261      	movs	r2, #97	; 0x61
 80020e8:	f883 21e7 	strb.w	r2, [r3, #487]	; 0x1e7
			ST_DWORD(fs->win.d8 + FSI_Free_Count, fs->free_clust);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80020f2:	b2da      	uxtb	r2, r3
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f883 21e8 	strb.w	r2, [r3, #488]	; 0x1e8
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8002100:	b29b      	uxth	r3, r3
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	b29b      	uxth	r3, r3
 8002106:	b2da      	uxtb	r2, r3
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f883 21e9 	strb.w	r2, [r3, #489]	; 0x1e9
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8002114:	0c1b      	lsrs	r3, r3, #16
 8002116:	b2da      	uxtb	r2, r3
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f883 21ea 	strb.w	r2, [r3, #490]	; 0x1ea
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8002124:	0e1b      	lsrs	r3, r3, #24
 8002126:	b2da      	uxtb	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f883 21eb 	strb.w	r2, [r3, #491]	; 0x1eb
			ST_DWORD(fs->win.d8 + FSI_Nxt_Free, fs->last_clust);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002134:	b2da      	uxtb	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f883 21ec 	strb.w	r2, [r3, #492]	; 0x1ec
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002142:	b29b      	uxth	r3, r3
 8002144:	0a1b      	lsrs	r3, r3, #8
 8002146:	b29b      	uxth	r3, r3
 8002148:	b2da      	uxtb	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f883 21ed 	strb.w	r2, [r3, #493]	; 0x1ed
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002156:	0c1b      	lsrs	r3, r3, #16
 8002158:	b2da      	uxtb	r2, r3
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f883 21ee 	strb.w	r2, [r3, #494]	; 0x1ee
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002166:	0e1b      	lsrs	r3, r3, #24
 8002168:	b2da      	uxtb	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f883 21ef 	strb.w	r2, [r3, #495]	; 0x1ef
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8002176:	1c5a      	adds	r2, r3, #1
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
			disk_write(fs->drv, fs->win.d8, fs->winsect, 1);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 800218c:	2301      	movs	r3, #1
 800218e:	f7ff fc81 	bl	8001a94 <disk_write>
			fs->fsi_flag = 0;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 80021a0:	2200      	movs	r2, #0
 80021a2:	2100      	movs	r1, #0
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fc95 	bl	8001ad4 <disk_ioctl>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d001      	beq.n	80021b4 <sync_fs+0x152>
			res = FR_DISK_ERR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 80021b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3710      	adds	r7, #16
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd80      	pop	{r7, pc}

080021be <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 80021be:	b480      	push	{r7}
 80021c0:	b083      	sub	sp, #12
 80021c2:	af00      	add	r7, sp, #0
 80021c4:	6078      	str	r0, [r7, #4]
 80021c6:	6039      	str	r1, [r7, #0]
	clst -= 2;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	3b02      	subs	r3, #2
 80021cc:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80021d4:	3b02      	subs	r3, #2
 80021d6:	683a      	ldr	r2, [r7, #0]
 80021d8:	429a      	cmp	r2, r3
 80021da:	d301      	bcc.n	80021e0 <clust2sect+0x22>
 80021dc:	2300      	movs	r3, #0
 80021de:	e00a      	b.n	80021f6 <clust2sect+0x38>
	return clst * fs->csize + fs->database;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80021e6:	461a      	mov	r2, r3
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	fb03 f202 	mul.w	r2, r3, r2
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 80021f4:	4413      	add	r3, r2
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr

08002202 <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b086      	sub	sp, #24
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
 800220a:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	2b01      	cmp	r3, #1
 8002210:	d905      	bls.n	800221e <get_fat+0x1c>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	429a      	cmp	r2, r3
 800221c:	d302      	bcc.n	8002224 <get_fat+0x22>
		val = 1;	/* Internal error */
 800221e:	2301      	movs	r3, #1
 8002220:	617b      	str	r3, [r7, #20]
 8002222:	e0d4      	b.n	80023ce <get_fat+0x1cc>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8002224:	f04f 33ff 	mov.w	r3, #4294967295
 8002228:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8002230:	2b02      	cmp	r3, #2
 8002232:	d05e      	beq.n	80022f2 <get_fat+0xf0>
 8002234:	2b03      	cmp	r3, #3
 8002236:	f000 808a 	beq.w	800234e <get_fat+0x14c>
 800223a:	2b01      	cmp	r3, #1
 800223c:	f040 80bd 	bne.w	80023ba <get_fat+0x1b8>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	085b      	lsrs	r3, r3, #1
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	4413      	add	r3, r2
 800224c:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800225a:	4619      	mov	r1, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002262:	4413      	add	r3, r2
 8002264:	4619      	mov	r1, r3
 8002266:	6878      	ldr	r0, [r7, #4]
 8002268:	f7ff fecd 	bl	8002006 <move_window>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	f040 80a6 	bne.w	80023c0 <get_fat+0x1be>
			wc = fs->win.d8[bc++ % SS(fs)];
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	1c5a      	adds	r2, r3, #1
 8002278:	60fa      	str	r2, [r7, #12]
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8002280:	fbb3 f1f2 	udiv	r1, r3, r2
 8002284:	fb02 f201 	mul.w	r2, r2, r1
 8002288:	1a9b      	subs	r3, r3, r2
 800228a:	687a      	ldr	r2, [r7, #4]
 800228c:	5cd3      	ldrb	r3, [r2, r3]
 800228e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800229c:	4619      	mov	r1, r3
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	fbb3 f3f1 	udiv	r3, r3, r1
 80022a4:	4413      	add	r3, r2
 80022a6:	4619      	mov	r1, r3
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	f7ff feac 	bl	8002006 <move_window>
 80022ae:	4603      	mov	r3, r0
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	f040 8087 	bne.w	80023c4 <get_fat+0x1c2>
			wc |= fs->win.d8[bc % SS(fs)] << 8;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80022bc:	461a      	mov	r2, r3
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	fbb3 f1f2 	udiv	r1, r3, r2
 80022c4:	fb02 f201 	mul.w	r2, r2, r1
 80022c8:	1a9b      	subs	r3, r3, r2
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	5cd3      	ldrb	r3, [r2, r3]
 80022ce:	021b      	lsls	r3, r3, #8
 80022d0:	461a      	mov	r2, r3
 80022d2:	68bb      	ldr	r3, [r7, #8]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	f003 0301 	and.w	r3, r3, #1
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d002      	beq.n	80022e8 <get_fat+0xe6>
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	091b      	lsrs	r3, r3, #4
 80022e6:	e002      	b.n	80022ee <get_fat+0xec>
 80022e8:	68bb      	ldr	r3, [r7, #8]
 80022ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80022ee:	617b      	str	r3, [r7, #20]
			break;
 80022f0:	e06d      	b.n	80023ce <get_fat+0x1cc>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80022fe:	085b      	lsrs	r3, r3, #1
 8002300:	b29b      	uxth	r3, r3
 8002302:	4619      	mov	r1, r3
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	fbb3 f3f1 	udiv	r3, r3, r1
 800230a:	4413      	add	r3, r2
 800230c:	4619      	mov	r1, r3
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff fe79 	bl	8002006 <move_window>
 8002314:	4603      	mov	r3, r0
 8002316:	2b00      	cmp	r3, #0
 8002318:	d156      	bne.n	80023c8 <get_fat+0x1c6>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8002324:	fbb3 f1f2 	udiv	r1, r3, r2
 8002328:	fb02 f201 	mul.w	r2, r2, r1
 800232c:	1a9b      	subs	r3, r3, r2
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	4413      	add	r3, r2
 8002332:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	3301      	adds	r3, #1
 8002338:	781b      	ldrb	r3, [r3, #0]
 800233a:	021b      	lsls	r3, r3, #8
 800233c:	b21a      	sxth	r2, r3
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	b21b      	sxth	r3, r3
 8002344:	4313      	orrs	r3, r2
 8002346:	b21b      	sxth	r3, r3
 8002348:	b29b      	uxth	r3, r3
 800234a:	617b      	str	r3, [r7, #20]
			break;
 800234c:	e03f      	b.n	80023ce <get_fat+0x1cc>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800235a:	089b      	lsrs	r3, r3, #2
 800235c:	b29b      	uxth	r3, r3
 800235e:	4619      	mov	r1, r3
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	fbb3 f3f1 	udiv	r3, r3, r1
 8002366:	4413      	add	r3, r2
 8002368:	4619      	mov	r1, r3
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fe4b 	bl	8002006 <move_window>
 8002370:	4603      	mov	r3, r0
 8002372:	2b00      	cmp	r3, #0
 8002374:	d12a      	bne.n	80023cc <get_fat+0x1ca>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 8002376:	683b      	ldr	r3, [r7, #0]
 8002378:	009b      	lsls	r3, r3, #2
 800237a:	687a      	ldr	r2, [r7, #4]
 800237c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8002380:	fbb3 f1f2 	udiv	r1, r3, r2
 8002384:	fb02 f201 	mul.w	r2, r2, r1
 8002388:	1a9b      	subs	r3, r3, r2
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	4413      	add	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 8002390:	693b      	ldr	r3, [r7, #16]
 8002392:	3303      	adds	r3, #3
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	061a      	lsls	r2, r3, #24
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	3302      	adds	r3, #2
 800239c:	781b      	ldrb	r3, [r3, #0]
 800239e:	041b      	lsls	r3, r3, #16
 80023a0:	4313      	orrs	r3, r2
 80023a2:	693a      	ldr	r2, [r7, #16]
 80023a4:	3201      	adds	r2, #1
 80023a6:	7812      	ldrb	r2, [r2, #0]
 80023a8:	0212      	lsls	r2, r2, #8
 80023aa:	4313      	orrs	r3, r2
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	7812      	ldrb	r2, [r2, #0]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80023b6:	617b      	str	r3, [r7, #20]
			break;
 80023b8:	e009      	b.n	80023ce <get_fat+0x1cc>

		default:
			val = 1;	/* Internal error */
 80023ba:	2301      	movs	r3, #1
 80023bc:	617b      	str	r3, [r7, #20]
 80023be:	e006      	b.n	80023ce <get_fat+0x1cc>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80023c0:	bf00      	nop
 80023c2:	e004      	b.n	80023ce <get_fat+0x1cc>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80023c4:	bf00      	nop
 80023c6:	e002      	b.n	80023ce <get_fat+0x1cc>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80023c8:	bf00      	nop
 80023ca:	e000      	b.n	80023ce <get_fat+0x1cc>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80023cc:	bf00      	nop
		}
	}

	return val;
 80023ce:	697b      	ldr	r3, [r7, #20]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}

080023d8 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b088      	sub	sp, #32
 80023dc:	af00      	add	r7, sp, #0
 80023de:	60f8      	str	r0, [r7, #12]
 80023e0:	60b9      	str	r1, [r7, #8]
 80023e2:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 80023e4:	68bb      	ldr	r3, [r7, #8]
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d905      	bls.n	80023f6 <put_fat+0x1e>
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	429a      	cmp	r2, r3
 80023f4:	d302      	bcc.n	80023fc <put_fat+0x24>
		res = FR_INT_ERR;
 80023f6:	2302      	movs	r3, #2
 80023f8:	77fb      	strb	r3, [r7, #31]
 80023fa:	e125      	b.n	8002648 <put_fat+0x270>

	} else {
		switch (fs->fs_type) {
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8002402:	2b02      	cmp	r3, #2
 8002404:	f000 808c 	beq.w	8002520 <put_fat+0x148>
 8002408:	2b03      	cmp	r3, #3
 800240a:	f000 80bd 	beq.w	8002588 <put_fat+0x1b0>
 800240e:	2b01      	cmp	r3, #1
 8002410:	f040 8110 	bne.w	8002634 <put_fat+0x25c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]
 800241a:	085b      	lsrs	r3, r3, #1
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4413      	add	r3, r2
 8002420:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800242e:	4619      	mov	r1, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	fbb3 f3f1 	udiv	r3, r3, r1
 8002436:	4413      	add	r3, r2
 8002438:	4619      	mov	r1, r3
 800243a:	68f8      	ldr	r0, [r7, #12]
 800243c:	f7ff fde3 	bl	8002006 <move_window>
 8002440:	4603      	mov	r3, r0
 8002442:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002444:	7ffb      	ldrb	r3, [r7, #31]
 8002446:	2b00      	cmp	r3, #0
 8002448:	f040 80f7 	bne.w	800263a <put_fat+0x262>
			p = &fs->win.d8[bc++ % SS(fs)];
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	1c5a      	adds	r2, r3, #1
 8002450:	617a      	str	r2, [r7, #20]
 8002452:	68fa      	ldr	r2, [r7, #12]
 8002454:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8002458:	fbb3 f1f2 	udiv	r1, r3, r2
 800245c:	fb02 f201 	mul.w	r2, r2, r1
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	68fa      	ldr	r2, [r7, #12]
 8002464:	4413      	add	r3, r2
 8002466:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	f003 0301 	and.w	r3, r3, #1
 800246e:	2b00      	cmp	r3, #0
 8002470:	d00d      	beq.n	800248e <put_fat+0xb6>
 8002472:	69bb      	ldr	r3, [r7, #24]
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	b25b      	sxtb	r3, r3
 8002478:	f003 030f 	and.w	r3, r3, #15
 800247c:	b25a      	sxtb	r2, r3
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	b2db      	uxtb	r3, r3
 8002482:	011b      	lsls	r3, r3, #4
 8002484:	b25b      	sxtb	r3, r3
 8002486:	4313      	orrs	r3, r2
 8002488:	b25b      	sxtb	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	e001      	b.n	8002492 <put_fat+0xba>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	b2db      	uxtb	r3, r3
 8002492:	69ba      	ldr	r2, [r7, #24]
 8002494:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	2201      	movs	r2, #1
 800249a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80024aa:	4619      	mov	r1, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80024b2:	4413      	add	r3, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	68f8      	ldr	r0, [r7, #12]
 80024b8:	f7ff fda5 	bl	8002006 <move_window>
 80024bc:	4603      	mov	r3, r0
 80024be:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80024c0:	7ffb      	ldrb	r3, [r7, #31]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	f040 80bb 	bne.w	800263e <put_fat+0x266>
			p = &fs->win.d8[bc % SS(fs)];
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80024ce:	461a      	mov	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80024d6:	fb02 f201 	mul.w	r2, r2, r1
 80024da:	1a9b      	subs	r3, r3, r2
 80024dc:	68fa      	ldr	r2, [r7, #12]
 80024de:	4413      	add	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	f003 0301 	and.w	r3, r3, #1
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d003      	beq.n	80024f4 <put_fat+0x11c>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	e00e      	b.n	8002512 <put_fat+0x13a>
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	b25b      	sxtb	r3, r3
 80024fa:	f023 030f 	bic.w	r3, r3, #15
 80024fe:	b25a      	sxtb	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	0a1b      	lsrs	r3, r3, #8
 8002504:	b25b      	sxtb	r3, r3
 8002506:	f003 030f 	and.w	r3, r3, #15
 800250a:	b25b      	sxtb	r3, r3
 800250c:	4313      	orrs	r3, r2
 800250e:	b25b      	sxtb	r3, r3
 8002510:	b2db      	uxtb	r3, r3
 8002512:	69ba      	ldr	r2, [r7, #24]
 8002514:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	2201      	movs	r2, #1
 800251a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 800251e:	e093      	b.n	8002648 <put_fat+0x270>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800252c:	085b      	lsrs	r3, r3, #1
 800252e:	b29b      	uxth	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	68bb      	ldr	r3, [r7, #8]
 8002534:	fbb3 f3f1 	udiv	r3, r3, r1
 8002538:	4413      	add	r3, r2
 800253a:	4619      	mov	r1, r3
 800253c:	68f8      	ldr	r0, [r7, #12]
 800253e:	f7ff fd62 	bl	8002006 <move_window>
 8002542:	4603      	mov	r3, r0
 8002544:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8002546:	7ffb      	ldrb	r3, [r7, #31]
 8002548:	2b00      	cmp	r3, #0
 800254a:	d17a      	bne.n	8002642 <put_fat+0x26a>
			p = &fs->win.d8[clst * 2 % SS(fs)];
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	68fa      	ldr	r2, [r7, #12]
 8002552:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8002556:	fbb3 f1f2 	udiv	r1, r3, r2
 800255a:	fb02 f201 	mul.w	r2, r2, r1
 800255e:	1a9b      	subs	r3, r3, r2
 8002560:	68fa      	ldr	r2, [r7, #12]
 8002562:	4413      	add	r3, r2
 8002564:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	b2da      	uxtb	r2, r3
 800256a:	69bb      	ldr	r3, [r7, #24]
 800256c:	701a      	strb	r2, [r3, #0]
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	b29b      	uxth	r3, r3
 8002572:	0a1b      	lsrs	r3, r3, #8
 8002574:	b29a      	uxth	r2, r3
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	3301      	adds	r3, #1
 800257a:	b2d2      	uxtb	r2, r2
 800257c:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	2201      	movs	r2, #1
 8002582:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8002586:	e05f      	b.n	8002648 <put_fat+0x270>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8002594:	089b      	lsrs	r3, r3, #2
 8002596:	b29b      	uxth	r3, r3
 8002598:	4619      	mov	r1, r3
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	fbb3 f3f1 	udiv	r3, r3, r1
 80025a0:	4413      	add	r3, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff fd2e 	bl	8002006 <move_window>
 80025aa:	4603      	mov	r3, r0
 80025ac:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80025ae:	7ffb      	ldrb	r3, [r7, #31]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d148      	bne.n	8002646 <put_fat+0x26e>
			p = &fs->win.d8[clst * 4 % SS(fs)];
 80025b4:	68bb      	ldr	r3, [r7, #8]
 80025b6:	009b      	lsls	r3, r3, #2
 80025b8:	68fa      	ldr	r2, [r7, #12]
 80025ba:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80025be:	fbb3 f1f2 	udiv	r1, r3, r2
 80025c2:	fb02 f201 	mul.w	r2, r2, r1
 80025c6:	1a9b      	subs	r3, r3, r2
 80025c8:	68fa      	ldr	r2, [r7, #12]
 80025ca:	4413      	add	r3, r2
 80025cc:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 80025ce:	69bb      	ldr	r3, [r7, #24]
 80025d0:	3303      	adds	r3, #3
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	061a      	lsls	r2, r3, #24
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	3302      	adds	r3, #2
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	041b      	lsls	r3, r3, #16
 80025de:	4313      	orrs	r3, r2
 80025e0:	69ba      	ldr	r2, [r7, #24]
 80025e2:	3201      	adds	r2, #1
 80025e4:	7812      	ldrb	r2, [r2, #0]
 80025e6:	0212      	lsls	r2, r2, #8
 80025e8:	4313      	orrs	r3, r2
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	7812      	ldrb	r2, [r2, #0]
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80025f4:	687a      	ldr	r2, [r7, #4]
 80025f6:	4313      	orrs	r3, r2
 80025f8:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	b2da      	uxtb	r2, r3
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	701a      	strb	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	b29b      	uxth	r3, r3
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	b29a      	uxth	r2, r3
 800260a:	69bb      	ldr	r3, [r7, #24]
 800260c:	3301      	adds	r3, #1
 800260e:	b2d2      	uxtb	r2, r2
 8002610:	701a      	strb	r2, [r3, #0]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	0c1a      	lsrs	r2, r3, #16
 8002616:	69bb      	ldr	r3, [r7, #24]
 8002618:	3302      	adds	r3, #2
 800261a:	b2d2      	uxtb	r2, r2
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	0e1a      	lsrs	r2, r3, #24
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	3303      	adds	r3, #3
 8002626:	b2d2      	uxtb	r2, r2
 8002628:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2201      	movs	r2, #1
 800262e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
			break;
 8002632:	e009      	b.n	8002648 <put_fat+0x270>

		default :
			res = FR_INT_ERR;
 8002634:	2302      	movs	r3, #2
 8002636:	77fb      	strb	r3, [r7, #31]
 8002638:	e006      	b.n	8002648 <put_fat+0x270>
			if (res != FR_OK) break;
 800263a:	bf00      	nop
 800263c:	e004      	b.n	8002648 <put_fat+0x270>
			if (res != FR_OK) break;
 800263e:	bf00      	nop
 8002640:	e002      	b.n	8002648 <put_fat+0x270>
			if (res != FR_OK) break;
 8002642:	bf00      	nop
 8002644:	e000      	b.n	8002648 <put_fat+0x270>
			if (res != FR_OK) break;
 8002646:	bf00      	nop
		}
	}

	return res;
 8002648:	7ffb      	ldrb	r3, [r7, #31]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3720      	adds	r7, #32
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}

08002652 <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 8002652:	b580      	push	{r7, lr}
 8002654:	b084      	sub	sp, #16
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b01      	cmp	r3, #1
 8002660:	d905      	bls.n	800266e <remove_chain+0x1c>
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	429a      	cmp	r2, r3
 800266c:	d302      	bcc.n	8002674 <remove_chain+0x22>
		res = FR_INT_ERR;
 800266e:	2302      	movs	r3, #2
 8002670:	73fb      	strb	r3, [r7, #15]
 8002672:	e043      	b.n	80026fc <remove_chain+0xaa>

	} else {
		res = FR_OK;
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8002678:	e036      	b.n	80026e8 <remove_chain+0x96>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 800267a:	6839      	ldr	r1, [r7, #0]
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7ff fdc0 	bl	8002202 <get_fat>
 8002682:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d035      	beq.n	80026f6 <remove_chain+0xa4>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	2b01      	cmp	r3, #1
 800268e:	d102      	bne.n	8002696 <remove_chain+0x44>
 8002690:	2302      	movs	r3, #2
 8002692:	73fb      	strb	r3, [r7, #15]
 8002694:	e032      	b.n	80026fc <remove_chain+0xaa>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800269c:	d102      	bne.n	80026a4 <remove_chain+0x52>
 800269e:	2301      	movs	r3, #1
 80026a0:	73fb      	strb	r3, [r7, #15]
 80026a2:	e02b      	b.n	80026fc <remove_chain+0xaa>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 80026a4:	2200      	movs	r2, #0
 80026a6:	6839      	ldr	r1, [r7, #0]
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f7ff fe95 	bl	80023d8 <put_fat>
 80026ae:	4603      	mov	r3, r0
 80026b0:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d120      	bne.n	80026fa <remove_chain+0xa8>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80026be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026c2:	d00f      	beq.n	80026e4 <remove_chain+0x92>
				fs->free_clust++;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				fs->fsi_flag |= 1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 80026d8:	f043 0301 	orr.w	r3, r3, #1
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80026e4:	68bb      	ldr	r3, [r7, #8]
 80026e6:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80026ee:	683a      	ldr	r2, [r7, #0]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	d3c2      	bcc.n	800267a <remove_chain+0x28>
 80026f4:	e002      	b.n	80026fc <remove_chain+0xaa>
			if (nxt == 0) break;				/* Empty cluster? */
 80026f6:	bf00      	nop
 80026f8:	e000      	b.n	80026fc <remove_chain+0xaa>
			if (res != FR_OK) break;
 80026fa:	bf00      	nop
		}
	}

	return res;
 80026fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026fe:	4618      	mov	r0, r3
 8002700:	3710      	adds	r7, #16
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}

08002706 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 8002706:	b580      	push	{r7, lr}
 8002708:	b086      	sub	sp, #24
 800270a:	af00      	add	r7, sp, #0
 800270c:	6078      	str	r0, [r7, #4]
 800270e:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	2b00      	cmp	r3, #0
 8002714:	d10f      	bne.n	8002736 <create_chain+0x30>
		scl = fs->last_clust;			/* Get suggested start point */
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800271c:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d005      	beq.n	8002730 <create_chain+0x2a>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800272a:	693a      	ldr	r2, [r7, #16]
 800272c:	429a      	cmp	r2, r3
 800272e:	d31c      	bcc.n	800276a <create_chain+0x64>
 8002730:	2301      	movs	r3, #1
 8002732:	613b      	str	r3, [r7, #16]
 8002734:	e019      	b.n	800276a <create_chain+0x64>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 8002736:	6839      	ldr	r1, [r7, #0]
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff fd62 	bl	8002202 <get_fat>
 800273e:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 8002740:	68bb      	ldr	r3, [r7, #8]
 8002742:	2b01      	cmp	r3, #1
 8002744:	d801      	bhi.n	800274a <create_chain+0x44>
 8002746:	2301      	movs	r3, #1
 8002748:	e076      	b.n	8002838 <create_chain+0x132>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800274a:	68bb      	ldr	r3, [r7, #8]
 800274c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002750:	d101      	bne.n	8002756 <create_chain+0x50>
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	e070      	b.n	8002838 <create_chain+0x132>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800275c:	68ba      	ldr	r2, [r7, #8]
 800275e:	429a      	cmp	r2, r3
 8002760:	d201      	bcs.n	8002766 <create_chain+0x60>
 8002762:	68bb      	ldr	r3, [r7, #8]
 8002764:	e068      	b.n	8002838 <create_chain+0x132>
		scl = clst;
 8002766:	683b      	ldr	r3, [r7, #0]
 8002768:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	3301      	adds	r3, #1
 8002772:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800277a:	697a      	ldr	r2, [r7, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d307      	bcc.n	8002790 <create_chain+0x8a>
			ncl = 2;
 8002780:	2302      	movs	r3, #2
 8002782:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8002784:	697a      	ldr	r2, [r7, #20]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	429a      	cmp	r2, r3
 800278a:	d901      	bls.n	8002790 <create_chain+0x8a>
 800278c:	2300      	movs	r3, #0
 800278e:	e053      	b.n	8002838 <create_chain+0x132>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8002790:	6979      	ldr	r1, [r7, #20]
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f7ff fd35 	bl	8002202 <get_fat>
 8002798:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d00e      	beq.n	80027be <create_chain+0xb8>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027a6:	d002      	beq.n	80027ae <create_chain+0xa8>
 80027a8:	68bb      	ldr	r3, [r7, #8]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d101      	bne.n	80027b2 <create_chain+0xac>
			return cs;
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	e042      	b.n	8002838 <create_chain+0x132>
		if (ncl == scl) return 0;		/* No free cluster */
 80027b2:	697a      	ldr	r2, [r7, #20]
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	429a      	cmp	r2, r3
 80027b8:	d1d9      	bne.n	800276e <create_chain+0x68>
 80027ba:	2300      	movs	r3, #0
 80027bc:	e03c      	b.n	8002838 <create_chain+0x132>
		if (cs == 0) break;				/* Found a free cluster */
 80027be:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 80027c0:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80027c4:	6979      	ldr	r1, [r7, #20]
 80027c6:	6878      	ldr	r0, [r7, #4]
 80027c8:	f7ff fe06 	bl	80023d8 <put_fat>
 80027cc:	4603      	mov	r3, r0
 80027ce:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d109      	bne.n	80027ea <create_chain+0xe4>
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d006      	beq.n	80027ea <create_chain+0xe4>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 80027dc:	697a      	ldr	r2, [r7, #20]
 80027de:	6839      	ldr	r1, [r7, #0]
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	f7ff fdf9 	bl	80023d8 <put_fat>
 80027e6:	4603      	mov	r3, r0
 80027e8:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11a      	bne.n	8002826 <create_chain+0x120>
		fs->last_clust = ncl;			/* Update FSINFO */
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	697a      	ldr	r2, [r7, #20]
 80027f4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
		if (fs->free_clust != 0xFFFFFFFF) {
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80027fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002802:	d018      	beq.n	8002836 <create_chain+0x130>
			fs->free_clust--;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fs->fsi_flag |= 1;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	f893 3405 	ldrb.w	r3, [r3, #1029]	; 0x405
 8002818:	f043 0301 	orr.w	r3, r3, #1
 800281c:	b2da      	uxtb	r2, r3
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
 8002824:	e007      	b.n	8002836 <create_chain+0x130>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 8002826:	7bfb      	ldrb	r3, [r7, #15]
 8002828:	2b01      	cmp	r3, #1
 800282a:	d102      	bne.n	8002832 <create_chain+0x12c>
 800282c:	f04f 33ff 	mov.w	r3, #4294967295
 8002830:	e000      	b.n	8002834 <create_chain+0x12e>
 8002832:	2301      	movs	r3, #1
 8002834:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 8002836:	697b      	ldr	r3, [r7, #20]
}
 8002838:	4618      	mov	r0, r3
 800283a:	3718      	adds	r7, #24
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File offset to be converted to cluster# */
)
{
 8002840:	b480      	push	{r7}
 8002842:	b087      	sub	sp, #28
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8002850:	3304      	adds	r3, #4
 8002852:	613b      	str	r3, [r7, #16]
	cl = ofs / SS(fp->fs) / fp->fs->csize;	/* Cluster order from top of the file */
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800285a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800285e:	461a      	mov	r2, r3
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	fbb3 f3f2 	udiv	r3, r3, r2
 8002866:	687a      	ldr	r2, [r7, #4]
 8002868:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800286c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8002870:	fbb3 f3f2 	udiv	r3, r3, r2
 8002874:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	1d1a      	adds	r2, r3, #4
 800287a:	613a      	str	r2, [r7, #16]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	60fb      	str	r3, [r7, #12]
		if (!ncl) return 0;		/* End of table? (error) */
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d101      	bne.n	800288a <clmt_clust+0x4a>
 8002886:	2300      	movs	r3, #0
 8002888:	e010      	b.n	80028ac <clmt_clust+0x6c>
		if (cl < ncl) break;	/* In this fragment? */
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	429a      	cmp	r2, r3
 8002890:	d307      	bcc.n	80028a2 <clmt_clust+0x62>
		cl -= ncl; tbl++;		/* Next fragment */
 8002892:	697a      	ldr	r2, [r7, #20]
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	617b      	str	r3, [r7, #20]
 800289a:	693b      	ldr	r3, [r7, #16]
 800289c:	3304      	adds	r3, #4
 800289e:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 80028a0:	e7e9      	b.n	8002876 <clmt_clust+0x36>
		if (cl < ncl) break;	/* In this fragment? */
 80028a2:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	681a      	ldr	r2, [r3, #0]
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	4413      	add	r3, r2
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	371c      	adds	r7, #28
 80028b0:	46bd      	mov	sp, r7
 80028b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b6:	4770      	bx	lr

080028b8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
 80028c0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	b29a      	uxth	r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80028d2:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 80028d4:	697b      	ldr	r3, [r7, #20]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d007      	beq.n	80028ea <dir_sdi+0x32>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80028e0:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80028e4:	697a      	ldr	r2, [r7, #20]
 80028e6:	429a      	cmp	r2, r3
 80028e8:	d301      	bcc.n	80028ee <dir_sdi+0x36>
		return FR_INT_ERR;
 80028ea:	2302      	movs	r3, #2
 80028ec:	e091      	b.n	8002a12 <dir_sdi+0x15a>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10c      	bne.n	800290e <dir_sdi+0x56>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80028fa:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 80028fe:	2b03      	cmp	r3, #3
 8002900:	d105      	bne.n	800290e <dir_sdi+0x56>
		clst = dp->fs->dirbase;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002908:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 800290c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800290e:	697b      	ldr	r3, [r7, #20]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d111      	bne.n	8002938 <dir_sdi+0x80>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800291a:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 800291e:	461a      	mov	r2, r3
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	4293      	cmp	r3, r2
 8002924:	d301      	bcc.n	800292a <dir_sdi+0x72>
			return FR_INT_ERR;
 8002926:	2302      	movs	r3, #2
 8002928:	e073      	b.n	8002a12 <dir_sdi+0x15a>
		sect = dp->fs->dirbase;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002930:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8002934:	613b      	str	r3, [r7, #16]
 8002936:	e03b      	b.n	80029b0 <dir_sdi+0xf8>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800293e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8002942:	095b      	lsrs	r3, r3, #5
 8002944:	b29b      	uxth	r3, r3
 8002946:	461a      	mov	r2, r3
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800294e:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8002952:	fb03 f302 	mul.w	r3, r3, r2
 8002956:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 8002958:	e01e      	b.n	8002998 <dir_sdi+0xe0>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002960:	6979      	ldr	r1, [r7, #20]
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff fc4d 	bl	8002202 <get_fat>
 8002968:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002970:	d101      	bne.n	8002976 <dir_sdi+0xbe>
 8002972:	2301      	movs	r3, #1
 8002974:	e04d      	b.n	8002a12 <dir_sdi+0x15a>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	2b01      	cmp	r3, #1
 800297a:	d907      	bls.n	800298c <dir_sdi+0xd4>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002982:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002986:	697a      	ldr	r2, [r7, #20]
 8002988:	429a      	cmp	r2, r3
 800298a:	d301      	bcc.n	8002990 <dir_sdi+0xd8>
				return FR_INT_ERR;
 800298c:	2302      	movs	r3, #2
 800298e:	e040      	b.n	8002a12 <dir_sdi+0x15a>
			idx -= ic;
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8002998:	683a      	ldr	r2, [r7, #0]
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	429a      	cmp	r2, r3
 800299e:	d2dc      	bcs.n	800295a <dir_sdi+0xa2>
		}
		sect = clust2sect(dp->fs, clst);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80029a6:	6979      	ldr	r1, [r7, #20]
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fc08 	bl	80021be <clust2sect>
 80029ae:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	if (!sect) return FR_INT_ERR;
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d101      	bne.n	80029c2 <dir_sdi+0x10a>
 80029be:	2302      	movs	r3, #2
 80029c0:	e027      	b.n	8002a12 <dir_sdi+0x15a>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80029c8:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80029cc:	095b      	lsrs	r3, r3, #5
 80029ce:	b29b      	uxth	r3, r3
 80029d0:	461a      	mov	r2, r3
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	fbb3 f2f2 	udiv	r2, r3, r2
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	441a      	add	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
	dp->dir = dp->fs->win.d8 + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80029e8:	4618      	mov	r0, r3
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80029f0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80029f4:	095b      	lsrs	r3, r3, #5
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	461a      	mov	r2, r3
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a00:	fb02 f201 	mul.w	r2, r2, r1
 8002a04:	1a9b      	subs	r3, r3, r2
 8002a06:	015b      	lsls	r3, r3, #5
 8002a08:	18c2      	adds	r2, r0, r3
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8002a10:	2300      	movs	r3, #0
}
 8002a12:	4618      	mov	r0, r3
 8002a14:	3718      	adds	r7, #24
 8002a16:	46bd      	mov	sp, r7
 8002a18:	bd80      	pop	{r7, pc}

08002a1a <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 8002a1a:	b590      	push	{r4, r7, lr}
 8002a1c:	b087      	sub	sp, #28
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	6078      	str	r0, [r7, #4]
 8002a22:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8002a2a:	3301      	adds	r3, #1
 8002a2c:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d004      	beq.n	8002a40 <dir_next+0x26>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <dir_next+0x2a>
		return FR_NO_FILE;
 8002a40:	2304      	movs	r3, #4
 8002a42:	e100      	b.n	8002c46 <dir_next+0x22c>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002a4a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8002a4e:	095b      	lsrs	r3, r3, #5
 8002a50:	b29b      	uxth	r3, r3
 8002a52:	461a      	mov	r2, r3
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	fbb3 f1f2 	udiv	r1, r3, r2
 8002a5a:	fb02 f201 	mul.w	r2, r2, r1
 8002a5e:	1a9b      	subs	r3, r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	f040 80d3 	bne.w	8002c0c <dir_next+0x1f2>
		dp->sect++;					/* Next sector */
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410

		if (!dp->clust) {		/* Static table */
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d10b      	bne.n	8002a96 <dir_next+0x7c>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002a84:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8002a88:	461a      	mov	r2, r3
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	f0c0 80bd 	bcc.w	8002c0c <dir_next+0x1f2>
				return FR_NO_FILE;
 8002a92:	2304      	movs	r3, #4
 8002a94:	e0d7      	b.n	8002c46 <dir_next+0x22c>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002a9c:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8002aa0:	095b      	lsrs	r3, r3, #5
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	fbb3 f3f2 	udiv	r3, r3, r2
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8002ab2:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8002ab6:	3a01      	subs	r2, #1
 8002ab8:	4013      	ands	r3, r2
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	f040 80a6 	bne.w	8002c0c <dir_next+0x1f2>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002acc:	4619      	mov	r1, r3
 8002ace:	4610      	mov	r0, r2
 8002ad0:	f7ff fb97 	bl	8002202 <get_fat>
 8002ad4:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8002ad6:	697b      	ldr	r3, [r7, #20]
 8002ad8:	2b01      	cmp	r3, #1
 8002ada:	d801      	bhi.n	8002ae0 <dir_next+0xc6>
 8002adc:	2302      	movs	r3, #2
 8002ade:	e0b2      	b.n	8002c46 <dir_next+0x22c>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002ae0:	697b      	ldr	r3, [r7, #20]
 8002ae2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ae6:	d101      	bne.n	8002aec <dir_next+0xd2>
 8002ae8:	2301      	movs	r3, #1
 8002aea:	e0ac      	b.n	8002c46 <dir_next+0x22c>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002af2:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d378      	bcc.n	8002bee <dir_next+0x1d4>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d101      	bne.n	8002b06 <dir_next+0xec>
 8002b02:	2304      	movs	r3, #4
 8002b04:	e09f      	b.n	8002c46 <dir_next+0x22c>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8002b12:	4619      	mov	r1, r3
 8002b14:	4610      	mov	r0, r2
 8002b16:	f7ff fdf6 	bl	8002706 <create_chain>
 8002b1a:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8002b1c:	697b      	ldr	r3, [r7, #20]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <dir_next+0x10c>
 8002b22:	2307      	movs	r3, #7
 8002b24:	e08f      	b.n	8002c46 <dir_next+0x22c>
					if (clst == 1) return FR_INT_ERR;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	2b01      	cmp	r3, #1
 8002b2a:	d101      	bne.n	8002b30 <dir_next+0x116>
 8002b2c:	2302      	movs	r3, #2
 8002b2e:	e08a      	b.n	8002c46 <dir_next+0x22c>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 8002b30:	697b      	ldr	r3, [r7, #20]
 8002b32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b36:	d101      	bne.n	8002b3c <dir_next+0x122>
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e084      	b.n	8002c46 <dir_next+0x22c>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7ff fa16 	bl	8001f74 <sync_window>
 8002b48:	4603      	mov	r3, r0
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d001      	beq.n	8002b52 <dir_next+0x138>
 8002b4e:	2301      	movs	r3, #1
 8002b50:	e079      	b.n	8002c46 <dir_next+0x22c>
					mem_set(dp->fs->win.d8, 0, SS(dp->fs));		/* Clear window buffer */
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002b58:	4618      	mov	r0, r3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002b60:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8002b64:	461a      	mov	r2, r3
 8002b66:	2100      	movs	r1, #0
 8002b68:	f7fe fff0 	bl	8001b4c <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f8d3 4400 	ldr.w	r4, [r3, #1024]	; 0x400
 8002b78:	6979      	ldr	r1, [r7, #20]
 8002b7a:	4610      	mov	r0, r2
 8002b7c:	f7ff fb1f 	bl	80021be <clust2sect>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f8c4 342c 	str.w	r3, [r4, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	e01b      	b.n	8002bc4 <dir_next+0x1aa>
						dp->fs->wflag = 1;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f7ff f9e8 	bl	8001f74 <sync_window>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d001      	beq.n	8002bae <dir_next+0x194>
 8002baa:	2301      	movs	r3, #1
 8002bac:	e04b      	b.n	8002c46 <dir_next+0x22c>
						dp->fs->winsect++;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002bb4:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 8002bb8:	3201      	adds	r2, #1
 8002bba:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8002bbe:	693b      	ldr	r3, [r7, #16]
 8002bc0:	3301      	adds	r3, #1
 8002bc2:	613b      	str	r3, [r7, #16]
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002bca:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8002bce:	461a      	mov	r2, r3
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d3da      	bcc.n	8002b8c <dir_next+0x172>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002bdc:	f8d3 142c 	ldr.w	r1, [r3, #1068]	; 0x42c
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002be6:	693a      	ldr	r2, [r7, #16]
 8002be8:	1a8a      	subs	r2, r1, r2
 8002bea:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	697a      	ldr	r2, [r7, #20]
 8002bf2:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
				dp->sect = clust2sect(dp->fs, clst);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002bfc:	6979      	ldr	r1, [r7, #20]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f7ff fadd 	bl	80021be <clust2sect>
 8002c04:	4602      	mov	r2, r0
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
	dp->dir = dp->fs->win.d8 + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8002c24:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8002c28:	095b      	lsrs	r3, r3, #5
 8002c2a:	b29b      	uxth	r3, r3
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	fbb3 f1f2 	udiv	r1, r3, r2
 8002c34:	fb02 f201 	mul.w	r2, r2, r1
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	015b      	lsls	r3, r3, #5
 8002c3c:	18c2      	adds	r2, r0, r3
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414

	return FR_OK;
 8002c44:	2300      	movs	r3, #0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	371c      	adds	r7, #28
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd90      	pop	{r4, r7, pc}

08002c4e <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8002c58:	2100      	movs	r1, #0
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f7ff fe2c 	bl	80028b8 <dir_sdi>
 8002c60:	4603      	mov	r3, r0
 8002c62:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8002c64:	7bfb      	ldrb	r3, [r7, #15]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d131      	bne.n	8002cce <dir_alloc+0x80>
		n = 0;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	4610      	mov	r0, r2
 8002c7e:	f7ff f9c2 	bl	8002006 <move_window>
 8002c82:	4603      	mov	r3, r0
 8002c84:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d11f      	bne.n	8002ccc <dir_alloc+0x7e>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2be5      	cmp	r3, #229	; 0xe5
 8002c96:	d005      	beq.n	8002ca4 <dir_alloc+0x56>
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d107      	bne.n	8002cb4 <dir_alloc+0x66>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 8002ca4:	68bb      	ldr	r3, [r7, #8]
 8002ca6:	3301      	adds	r3, #1
 8002ca8:	60bb      	str	r3, [r7, #8]
 8002caa:	68ba      	ldr	r2, [r7, #8]
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d102      	bne.n	8002cb8 <dir_alloc+0x6a>
 8002cb2:	e00c      	b.n	8002cce <dir_alloc+0x80>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 8002cb4:	2300      	movs	r3, #0
 8002cb6:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 8002cb8:	2101      	movs	r1, #1
 8002cba:	6878      	ldr	r0, [r7, #4]
 8002cbc:	f7ff fead 	bl	8002a1a <dir_next>
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d0d1      	beq.n	8002c6e <dir_alloc+0x20>
 8002cca:	e000      	b.n	8002cce <dir_alloc+0x80>
			if (res != FR_OK) break;
 8002ccc:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8002cce:	7bfb      	ldrb	r3, [r7, #15]
 8002cd0:	2b04      	cmp	r3, #4
 8002cd2:	d101      	bne.n	8002cd8 <dir_alloc+0x8a>
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	73fb      	strb	r3, [r7, #15]
	return res;
 8002cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	3710      	adds	r7, #16
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bd80      	pop	{r7, pc}

08002ce2 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b085      	sub	sp, #20
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
 8002cea:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	331b      	adds	r3, #27
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	021b      	lsls	r3, r3, #8
 8002cf4:	b21a      	sxth	r2, r3
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	331a      	adds	r3, #26
 8002cfa:	781b      	ldrb	r3, [r3, #0]
 8002cfc:	b21b      	sxth	r3, r3
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	b21b      	sxth	r3, r3
 8002d02:	b29b      	uxth	r3, r3
 8002d04:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8002d0c:	2b03      	cmp	r3, #3
 8002d0e:	d10f      	bne.n	8002d30 <ld_clust+0x4e>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	3315      	adds	r3, #21
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	b21a      	sxth	r2, r3
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	3314      	adds	r3, #20
 8002d1e:	781b      	ldrb	r3, [r3, #0]
 8002d20:	b21b      	sxth	r3, r3
 8002d22:	4313      	orrs	r3, r2
 8002d24:	b21b      	sxth	r3, r3
 8002d26:	b29b      	uxth	r3, r3
 8002d28:	041b      	lsls	r3, r3, #16
 8002d2a:	68fa      	ldr	r2, [r7, #12]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	60fb      	str	r3, [r7, #12]

	return cl;
 8002d30:	68fb      	ldr	r3, [r7, #12]
}
 8002d32:	4618      	mov	r0, r3
 8002d34:	3714      	adds	r7, #20
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
 8002d46:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	331a      	adds	r3, #26
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	b2d2      	uxtb	r2, r2
 8002d50:	701a      	strb	r2, [r3, #0]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	0a1b      	lsrs	r3, r3, #8
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	331b      	adds	r3, #27
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	0c1a      	lsrs	r2, r3, #16
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	3314      	adds	r3, #20
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	0c1b      	lsrs	r3, r3, #16
 8002d72:	b29b      	uxth	r3, r3
 8002d74:	0a1b      	lsrs	r3, r3, #8
 8002d76:	b29a      	uxth	r2, r3
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	3315      	adds	r3, #21
 8002d7c:	b2d2      	uxtb	r2, r2
 8002d7e:	701a      	strb	r2, [r3, #0]
}
 8002d80:	bf00      	nop
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <cmp_lfn>:
static
int cmp_lfn (			/* 1:Matched, 0:Not matched */
	WCHAR* lfnbuf,		/* Pointer to the LFN to be compared */
	BYTE* dir			/* Pointer to the directory entry containing a part of LFN */
)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b086      	sub	sp, #24
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Get offset in the LFN buffer */
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	781b      	ldrb	r3, [r3, #0]
 8002d9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d9e:	1e5a      	subs	r2, r3, #1
 8002da0:	4613      	mov	r3, r2
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	4413      	add	r3, r2
 8002da6:	009b      	lsls	r3, r3, #2
 8002da8:	4413      	add	r3, r2
 8002daa:	617b      	str	r3, [r7, #20]
	s = 0; wc = 1;
 8002dac:	2300      	movs	r3, #0
 8002dae:	613b      	str	r3, [r7, #16]
 8002db0:	2301      	movs	r3, #1
 8002db2:	81fb      	strh	r3, [r7, #14]
	do {
		uc = LD_WORD(dir + LfnOfs[s]);	/* Pick an LFN character from the entry */
 8002db4:	4a2b      	ldr	r2, [pc, #172]	; (8002e64 <cmp_lfn+0xd8>)
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	4413      	add	r3, r2
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	3301      	adds	r3, #1
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	781b      	ldrb	r3, [r3, #0]
 8002dc4:	021b      	lsls	r3, r3, #8
 8002dc6:	b21a      	sxth	r2, r3
 8002dc8:	4926      	ldr	r1, [pc, #152]	; (8002e64 <cmp_lfn+0xd8>)
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	440b      	add	r3, r1
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	4619      	mov	r1, r3
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	440b      	add	r3, r1
 8002dd6:	781b      	ldrb	r3, [r3, #0]
 8002dd8:	b21b      	sxth	r3, r3
 8002dda:	4313      	orrs	r3, r2
 8002ddc:	b21b      	sxth	r3, r3
 8002dde:	81bb      	strh	r3, [r7, #12]
		if (wc) {	/* Last character has not been processed */
 8002de0:	89fb      	ldrh	r3, [r7, #14]
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d019      	beq.n	8002e1a <cmp_lfn+0x8e>
			wc = ff_wtoupper(uc);		/* Convert it to upper case */
 8002de6:	89bb      	ldrh	r3, [r7, #12]
 8002de8:	4618      	mov	r0, r3
 8002dea:	f002 fb23 	bl	8005434 <ff_wtoupper>
 8002dee:	4603      	mov	r3, r0
 8002df0:	81fb      	strh	r3, [r7, #14]
			if (i >= _MAX_LFN || wc != ff_wtoupper(lfnbuf[i++]))	/* Compare it */
 8002df2:	697b      	ldr	r3, [r7, #20]
 8002df4:	2bfe      	cmp	r3, #254	; 0xfe
 8002df6:	d80e      	bhi.n	8002e16 <cmp_lfn+0x8a>
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	617a      	str	r2, [r7, #20]
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	4413      	add	r3, r2
 8002e04:	881b      	ldrh	r3, [r3, #0]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f002 fb14 	bl	8005434 <ff_wtoupper>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	461a      	mov	r2, r3
 8002e10:	89fb      	ldrh	r3, [r7, #14]
 8002e12:	4293      	cmp	r3, r2
 8002e14:	d008      	beq.n	8002e28 <cmp_lfn+0x9c>
				return 0;				/* Not matched */
 8002e16:	2300      	movs	r3, #0
 8002e18:	e01f      	b.n	8002e5a <cmp_lfn+0xce>
		} else {
			if (uc != 0xFFFF) return 0;	/* Check filler */
 8002e1a:	89bb      	ldrh	r3, [r7, #12]
 8002e1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d001      	beq.n	8002e28 <cmp_lfn+0x9c>
 8002e24:	2300      	movs	r3, #0
 8002e26:	e018      	b.n	8002e5a <cmp_lfn+0xce>
		}
	} while (++s < 13);				/* Repeat until all characters in the entry are checked */
 8002e28:	693b      	ldr	r3, [r7, #16]
 8002e2a:	3301      	adds	r3, #1
 8002e2c:	613b      	str	r3, [r7, #16]
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	2b0c      	cmp	r3, #12
 8002e32:	d9bf      	bls.n	8002db4 <cmp_lfn+0x28>

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i])	/* Last segment matched but different length */
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d00b      	beq.n	8002e58 <cmp_lfn+0xcc>
 8002e40:	89fb      	ldrh	r3, [r7, #14]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d008      	beq.n	8002e58 <cmp_lfn+0xcc>
 8002e46:	697b      	ldr	r3, [r7, #20]
 8002e48:	005b      	lsls	r3, r3, #1
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	4413      	add	r3, r2
 8002e4e:	881b      	ldrh	r3, [r3, #0]
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d001      	beq.n	8002e58 <cmp_lfn+0xcc>
		return 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	e000      	b.n	8002e5a <cmp_lfn+0xce>

	return 1;						/* The part of LFN matched */
 8002e58:	2301      	movs	r3, #1
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3718      	adds	r7, #24
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}
 8002e62:	bf00      	nop
 8002e64:	0800730c 	.word	0x0800730c

08002e68 <fit_lfn>:
	const WCHAR* lfnbuf,	/* Pointer to the LFN buffer */
	BYTE* dir,				/* Pointer to the directory entry */
	BYTE ord,				/* LFN order (1-20) */
	BYTE sum				/* SFN sum */
)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	b089      	sub	sp, #36	; 0x24
 8002e6c:	af00      	add	r7, sp, #0
 8002e6e:	60f8      	str	r0, [r7, #12]
 8002e70:	60b9      	str	r1, [r7, #8]
 8002e72:	4611      	mov	r1, r2
 8002e74:	461a      	mov	r2, r3
 8002e76:	460b      	mov	r3, r1
 8002e78:	71fb      	strb	r3, [r7, #7]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set check sum */
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	330d      	adds	r3, #13
 8002e82:	79ba      	ldrb	r2, [r7, #6]
 8002e84:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	330b      	adds	r3, #11
 8002e8a:	220f      	movs	r2, #15
 8002e8c:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	330c      	adds	r3, #12
 8002e92:	2200      	movs	r2, #0
 8002e94:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + LDIR_FstClusLO, 0);
 8002e96:	68bb      	ldr	r3, [r7, #8]
 8002e98:	331a      	adds	r3, #26
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]
 8002e9e:	68bb      	ldr	r3, [r7, #8]
 8002ea0:	331b      	adds	r3, #27
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	701a      	strb	r2, [r3, #0]

	i = (ord - 1) * 13;				/* Get offset in the LFN buffer */
 8002ea6:	79fb      	ldrb	r3, [r7, #7]
 8002ea8:	1e5a      	subs	r2, r3, #1
 8002eaa:	4613      	mov	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	4413      	add	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	82fb      	strh	r3, [r7, #22]
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfnbuf[i++];	/* Get an effective character */
 8002ebe:	8afb      	ldrh	r3, [r7, #22]
 8002ec0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ec4:	4293      	cmp	r3, r2
 8002ec6:	d007      	beq.n	8002ed8 <fit_lfn+0x70>
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	1c5a      	adds	r2, r3, #1
 8002ecc:	61fa      	str	r2, [r7, #28]
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	68fa      	ldr	r2, [r7, #12]
 8002ed2:	4413      	add	r3, r2
 8002ed4:	881b      	ldrh	r3, [r3, #0]
 8002ed6:	82fb      	strh	r3, [r7, #22]
		ST_WORD(dir+LfnOfs[s], wc);	/* Put it */
 8002ed8:	4a1d      	ldr	r2, [pc, #116]	; (8002f50 <fit_lfn+0xe8>)
 8002eda:	69bb      	ldr	r3, [r7, #24]
 8002edc:	4413      	add	r3, r2
 8002ede:	781b      	ldrb	r3, [r3, #0]
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	68bb      	ldr	r3, [r7, #8]
 8002ee4:	4413      	add	r3, r2
 8002ee6:	8afa      	ldrh	r2, [r7, #22]
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	701a      	strb	r2, [r3, #0]
 8002eec:	8afb      	ldrh	r3, [r7, #22]
 8002eee:	0a1b      	lsrs	r3, r3, #8
 8002ef0:	b299      	uxth	r1, r3
 8002ef2:	4a17      	ldr	r2, [pc, #92]	; (8002f50 <fit_lfn+0xe8>)
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	3301      	adds	r3, #1
 8002efc:	68ba      	ldr	r2, [r7, #8]
 8002efe:	4413      	add	r3, r2
 8002f00:	b2ca      	uxtb	r2, r1
 8002f02:	701a      	strb	r2, [r3, #0]
		if (!wc) wc = 0xFFFF;		/* Padding characters following last character */
 8002f04:	8afb      	ldrh	r3, [r7, #22]
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d102      	bne.n	8002f10 <fit_lfn+0xa8>
 8002f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f0e:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 8002f10:	69bb      	ldr	r3, [r7, #24]
 8002f12:	3301      	adds	r3, #1
 8002f14:	61bb      	str	r3, [r7, #24]
 8002f16:	69bb      	ldr	r3, [r7, #24]
 8002f18:	2b0c      	cmp	r3, #12
 8002f1a:	d9d0      	bls.n	8002ebe <fit_lfn+0x56>
	if (wc == 0xFFFF || !lfnbuf[i]) ord |= LLEF;	/* Bottom LFN part is the start of LFN sequence */
 8002f1c:	8afb      	ldrh	r3, [r7, #22]
 8002f1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d006      	beq.n	8002f34 <fit_lfn+0xcc>
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	005b      	lsls	r3, r3, #1
 8002f2a:	68fa      	ldr	r2, [r7, #12]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	881b      	ldrh	r3, [r3, #0]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d103      	bne.n	8002f3c <fit_lfn+0xd4>
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002f3a:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 8002f3c:	68bb      	ldr	r3, [r7, #8]
 8002f3e:	79fa      	ldrb	r2, [r7, #7]
 8002f40:	701a      	strb	r2, [r3, #0]
}
 8002f42:	bf00      	nop
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
 8002f4e:	bf00      	nop
 8002f50:	0800730c 	.word	0x0800730c

08002f54 <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b08c      	sub	sp, #48	; 0x30
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8002f62:	220b      	movs	r2, #11
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	f7fe fdd2 	bl	8001b10 <mem_cpy>

	if (seq > 5) {	/* On many collisions, generate a hash number instead of sequential number */
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	2b05      	cmp	r3, #5
 8002f70:	d92b      	bls.n	8002fca <gen_numname+0x76>
		sr = seq;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8002f76:	e022      	b.n	8002fbe <gen_numname+0x6a>
			wc = *lfn++;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	1c9a      	adds	r2, r3, #2
 8002f7c:	607a      	str	r2, [r7, #4]
 8002f7e:	881b      	ldrh	r3, [r3, #0]
 8002f80:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8002f82:	2300      	movs	r3, #0
 8002f84:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f86:	e017      	b.n	8002fb8 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	005a      	lsls	r2, r3, #1
 8002f8c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8002f96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f98:	085b      	lsrs	r3, r3, #1
 8002f9a:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8002f9c:	69fb      	ldr	r3, [r7, #28]
 8002f9e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d005      	beq.n	8002fb2 <gen_numname+0x5e>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 8002fac:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 8002fb0:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8002fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8002fb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fba:	2b0f      	cmp	r3, #15
 8002fbc:	d9e4      	bls.n	8002f88 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	881b      	ldrh	r3, [r3, #0]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d1d8      	bne.n	8002f78 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8002fc6:	69fb      	ldr	r3, [r7, #28]
 8002fc8:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8002fca:	2307      	movs	r3, #7
 8002fcc:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (seq % 16) + '0';
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	b2db      	uxtb	r3, r3
 8002fd2:	f003 030f 	and.w	r3, r3, #15
 8002fd6:	b2db      	uxtb	r3, r3
 8002fd8:	3330      	adds	r3, #48	; 0x30
 8002fda:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8002fde:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fe2:	2b39      	cmp	r3, #57	; 0x39
 8002fe4:	d904      	bls.n	8002ff0 <gen_numname+0x9c>
 8002fe6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002fea:	3307      	adds	r3, #7
 8002fec:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8002ff0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ff2:	1e5a      	subs	r2, r3, #1
 8002ff4:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ff6:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8002ffa:	4413      	add	r3, r2
 8002ffc:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8003000:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	091b      	lsrs	r3, r3, #4
 8003008:	603b      	str	r3, [r7, #0]
	} while (seq);
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	2b00      	cmp	r3, #0
 800300e:	d1de      	bne.n	8002fce <gen_numname+0x7a>
	ns[i] = '~';
 8003010:	f107 0214 	add.w	r2, r7, #20
 8003014:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003016:	4413      	add	r3, r2
 8003018:	227e      	movs	r2, #126	; 0x7e
 800301a:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800301c:	2300      	movs	r3, #0
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
 8003020:	e002      	b.n	8003028 <gen_numname+0xd4>
 8003022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003024:	3301      	adds	r3, #1
 8003026:	627b      	str	r3, [r7, #36]	; 0x24
 8003028:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800302a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800302c:	429a      	cmp	r2, r3
 800302e:	d205      	bcs.n	800303c <gen_numname+0xe8>
 8003030:	68fa      	ldr	r2, [r7, #12]
 8003032:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003034:	4413      	add	r3, r2
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b20      	cmp	r3, #32
 800303a:	d1f2      	bne.n	8003022 <gen_numname+0xce>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800303c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800303e:	2b07      	cmp	r3, #7
 8003040:	d808      	bhi.n	8003054 <gen_numname+0x100>
 8003042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003044:	1c5a      	adds	r2, r3, #1
 8003046:	62ba      	str	r2, [r7, #40]	; 0x28
 8003048:	f107 0230 	add.w	r2, r7, #48	; 0x30
 800304c:	4413      	add	r3, r2
 800304e:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8003052:	e000      	b.n	8003056 <gen_numname+0x102>
 8003054:	2120      	movs	r1, #32
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	1c5a      	adds	r2, r3, #1
 800305a:	627a      	str	r2, [r7, #36]	; 0x24
 800305c:	68fa      	ldr	r2, [r7, #12]
 800305e:	4413      	add	r3, r2
 8003060:	460a      	mov	r2, r1
 8003062:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8003064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003066:	2b07      	cmp	r3, #7
 8003068:	d9e8      	bls.n	800303c <gen_numname+0xe8>
}
 800306a:	bf00      	nop
 800306c:	3730      	adds	r7, #48	; 0x30
 800306e:	46bd      	mov	sp, r7
 8003070:	bd80      	pop	{r7, pc}

08003072 <sum_sfn>:
#if _USE_LFN
static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8003072:	b480      	push	{r7}
 8003074:	b085      	sub	sp, #20
 8003076:	af00      	add	r7, sp, #0
 8003078:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800307a:	2300      	movs	r3, #0
 800307c:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800307e:	230b      	movs	r3, #11
 8003080:	60bb      	str	r3, [r7, #8]

	do sum = (sum >> 1) + (sum << 7) + *dir++; while (--n);
 8003082:	7bfb      	ldrb	r3, [r7, #15]
 8003084:	b2da      	uxtb	r2, r3
 8003086:	0852      	lsrs	r2, r2, #1
 8003088:	01db      	lsls	r3, r3, #7
 800308a:	4313      	orrs	r3, r2
 800308c:	b2da      	uxtb	r2, r3
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	1c59      	adds	r1, r3, #1
 8003092:	6079      	str	r1, [r7, #4]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	4413      	add	r3, r2
 8003098:	73fb      	strb	r3, [r7, #15]
 800309a:	68bb      	ldr	r3, [r7, #8]
 800309c:	3b01      	subs	r3, #1
 800309e:	60bb      	str	r3, [r7, #8]
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1ed      	bne.n	8003082 <sum_sfn+0x10>
	return sum;
 80030a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3714      	adds	r7, #20
 80030ac:	46bd      	mov	sp, r7
 80030ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b2:	4770      	bx	lr

080030b4 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b086      	sub	sp, #24
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 80030bc:	2100      	movs	r1, #0
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f7ff fbfa 	bl	80028b8 <dir_sdi>
 80030c4:	4603      	mov	r3, r0
 80030c6:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 80030c8:	7dfb      	ldrb	r3, [r7, #23]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d001      	beq.n	80030d2 <dir_find+0x1e>
 80030ce:	7dfb      	ldrb	r3, [r7, #23]
 80030d0:	e0ac      	b.n	800322c <dir_find+0x178>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80030d2:	23ff      	movs	r3, #255	; 0xff
 80030d4:	753b      	strb	r3, [r7, #20]
 80030d6:	7d3b      	ldrb	r3, [r7, #20]
 80030d8:	757b      	strb	r3, [r7, #21]
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80030e0:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80030f0:	4619      	mov	r1, r3
 80030f2:	4610      	mov	r0, r2
 80030f4:	f7fe ff87 	bl	8002006 <move_window>
 80030f8:	4603      	mov	r3, r0
 80030fa:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 80030fc:	7dfb      	ldrb	r3, [r7, #23]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f040 808e 	bne.w	8003220 <dir_find+0x16c>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800310a:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8003112:	7dbb      	ldrb	r3, [r7, #22]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d102      	bne.n	800311e <dir_find+0x6a>
 8003118:	2304      	movs	r3, #4
 800311a:	75fb      	strb	r3, [r7, #23]
 800311c:	e085      	b.n	800322a <dir_find+0x176>
#if _USE_LFN	/* LFN configuration */
		a = dir[DIR_Attr] & AM_MASK;
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	330b      	adds	r3, #11
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003128:	73fb      	strb	r3, [r7, #15]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800312a:	7dbb      	ldrb	r3, [r7, #22]
 800312c:	2be5      	cmp	r3, #229	; 0xe5
 800312e:	d007      	beq.n	8003140 <dir_find+0x8c>
 8003130:	7bfb      	ldrb	r3, [r7, #15]
 8003132:	f003 0308 	and.w	r3, r3, #8
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <dir_find+0x9c>
 800313a:	7bfb      	ldrb	r3, [r7, #15]
 800313c:	2b0f      	cmp	r3, #15
 800313e:	d007      	beq.n	8003150 <dir_find+0x9c>
			ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 8003140:	23ff      	movs	r3, #255	; 0xff
 8003142:	757b      	strb	r3, [r7, #21]
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800314a:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
 800314e:	e05c      	b.n	800320a <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8003150:	7bfb      	ldrb	r3, [r7, #15]
 8003152:	2b0f      	cmp	r3, #15
 8003154:	d133      	bne.n	80031be <dir_find+0x10a>
				if (dp->lfn) {
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800315c:	2b00      	cmp	r3, #0
 800315e:	d054      	beq.n	800320a <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8003160:	7dbb      	ldrb	r3, [r7, #22]
 8003162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003166:	2b00      	cmp	r3, #0
 8003168:	d00e      	beq.n	8003188 <dir_find+0xd4>
						sum = dir[LDIR_Chksum];
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	7b5b      	ldrb	r3, [r3, #13]
 800316e:	753b      	strb	r3, [r7, #20]
						c &= ~LLEF; ord = c;	/* LFN start order */
 8003170:	7dbb      	ldrb	r3, [r7, #22]
 8003172:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003176:	75bb      	strb	r3, [r7, #22]
 8003178:	7dbb      	ldrb	r3, [r7, #22]
 800317a:	757b      	strb	r3, [r7, #21]
						dp->lfn_idx = dp->index;	/* Start index of LFN */
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dir[LDIR_Chksum] && cmp_lfn(dp->lfn, dir)) ? ord - 1 : 0xFF;
 8003188:	7dba      	ldrb	r2, [r7, #22]
 800318a:	7d7b      	ldrb	r3, [r7, #21]
 800318c:	429a      	cmp	r2, r3
 800318e:	d113      	bne.n	80031b8 <dir_find+0x104>
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	330d      	adds	r3, #13
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	7d3a      	ldrb	r2, [r7, #20]
 8003198:	429a      	cmp	r2, r3
 800319a:	d10d      	bne.n	80031b8 <dir_find+0x104>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80031a2:	6939      	ldr	r1, [r7, #16]
 80031a4:	4618      	mov	r0, r3
 80031a6:	f7ff fdf1 	bl	8002d8c <cmp_lfn>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d003      	beq.n	80031b8 <dir_find+0x104>
 80031b0:	7d7b      	ldrb	r3, [r7, #21]
 80031b2:	3b01      	subs	r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	e000      	b.n	80031ba <dir_find+0x106>
 80031b8:	23ff      	movs	r3, #255	; 0xff
 80031ba:	757b      	strb	r3, [r7, #21]
 80031bc:	e025      	b.n	800320a <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 80031be:	7d7b      	ldrb	r3, [r7, #21]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d107      	bne.n	80031d4 <dir_find+0x120>
 80031c4:	6938      	ldr	r0, [r7, #16]
 80031c6:	f7ff ff54 	bl	8003072 <sum_sfn>
 80031ca:	4603      	mov	r3, r0
 80031cc:	461a      	mov	r2, r3
 80031ce:	7d3b      	ldrb	r3, [r7, #20]
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d027      	beq.n	8003224 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80031da:	330b      	adds	r3, #11
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	f003 0301 	and.w	r3, r3, #1
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d10a      	bne.n	80031fc <dir_find+0x148>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80031ec:	220b      	movs	r2, #11
 80031ee:	4619      	mov	r1, r3
 80031f0:	6938      	ldr	r0, [r7, #16]
 80031f2:	f7fe fcc5 	bl	8001b80 <mem_cmp>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d015      	beq.n	8003228 <dir_find+0x174>
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
 80031fc:	23ff      	movs	r3, #255	; 0xff
 80031fe:	757b      	strb	r3, [r7, #21]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003206:	f8a3 2424 	strh.w	r2, [r3, #1060]	; 0x424
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 800320a:	2100      	movs	r1, #0
 800320c:	6878      	ldr	r0, [r7, #4]
 800320e:	f7ff fc04 	bl	8002a1a <dir_next>
 8003212:	4603      	mov	r3, r0
 8003214:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8003216:	7dfb      	ldrb	r3, [r7, #23]
 8003218:	2b00      	cmp	r3, #0
 800321a:	f43f af63 	beq.w	80030e4 <dir_find+0x30>
 800321e:	e004      	b.n	800322a <dir_find+0x176>
		if (res != FR_OK) break;
 8003220:	bf00      	nop
 8003222:	e002      	b.n	800322a <dir_find+0x176>
				if (!ord && sum == sum_sfn(dir)) break;	/* LFN matched? */
 8003224:	bf00      	nop
 8003226:	e000      	b.n	800322a <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
 8003228:	bf00      	nop

	return res;
 800322a:	7dfb      	ldrb	r3, [r7, #23]
}
 800322c:	4618      	mov	r0, r3
 800322e:	3718      	adds	r7, #24
 8003230:	46bd      	mov	sp, r7
 8003232:	bd80      	pop	{r7, pc}

08003234 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b08c      	sub	sp, #48	; 0x30
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
	UINT n, nent;
	BYTE sn[12], *fn, sum;
	WCHAR *lfn;


	fn = dp->fn; lfn = dp->lfn;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003242:	623b      	str	r3, [r7, #32]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800324a:	61fb      	str	r3, [r7, #28]
	mem_cpy(sn, fn, 12);
 800324c:	f107 030c 	add.w	r3, r7, #12
 8003250:	220c      	movs	r2, #12
 8003252:	6a39      	ldr	r1, [r7, #32]
 8003254:	4618      	mov	r0, r3
 8003256:	f7fe fc5b 	bl	8001b10 <mem_cpy>

	if (_FS_RPATH && (sn[NSFLAG] & NS_DOT))		/* Cannot create dot entry */
		return FR_INVALID_NAME;

	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	f003 0301 	and.w	r3, r3, #1
 8003260:	2b00      	cmp	r3, #0
 8003262:	d037      	beq.n	80032d4 <dir_register+0xa0>
		fn[NSFLAG] = 0; dp->lfn = 0;			/* Find only SFN */
 8003264:	6a3b      	ldr	r3, [r7, #32]
 8003266:	330b      	adds	r3, #11
 8003268:	2200      	movs	r2, #0
 800326a:	701a      	strb	r2, [r3, #0]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2200      	movs	r2, #0
 8003270:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		for (n = 1; n < 100; n++) {
 8003274:	2301      	movs	r3, #1
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28
 8003278:	e013      	b.n	80032a2 <dir_register+0x6e>
			gen_numname(fn, sn, lfn, n);	/* Generate a numbered name */
 800327a:	f107 010c 	add.w	r1, r7, #12
 800327e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003280:	69fa      	ldr	r2, [r7, #28]
 8003282:	6a38      	ldr	r0, [r7, #32]
 8003284:	f7ff fe66 	bl	8002f54 <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff13 	bl	80030b4 <dir_find>
 800328e:	4603      	mov	r3, r0
 8003290:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8003294:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003298:	2b00      	cmp	r3, #0
 800329a:	d106      	bne.n	80032aa <dir_register+0x76>
		for (n = 1; n < 100; n++) {
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	3301      	adds	r3, #1
 80032a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032a4:	2b63      	cmp	r3, #99	; 0x63
 80032a6:	d9e8      	bls.n	800327a <dir_register+0x46>
 80032a8:	e000      	b.n	80032ac <dir_register+0x78>
			if (res != FR_OK) break;
 80032aa:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 80032ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d101      	bne.n	80032b6 <dir_register+0x82>
 80032b2:	2307      	movs	r3, #7
 80032b4:	e0c5      	b.n	8003442 <dir_register+0x20e>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 80032b6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032ba:	2b04      	cmp	r3, #4
 80032bc:	d002      	beq.n	80032c4 <dir_register+0x90>
 80032be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80032c2:	e0be      	b.n	8003442 <dir_register+0x20e>
		fn[NSFLAG] = sn[NSFLAG]; dp->lfn = lfn;
 80032c4:	6a3b      	ldr	r3, [r7, #32]
 80032c6:	330b      	adds	r3, #11
 80032c8:	7dfa      	ldrb	r2, [r7, #23]
 80032ca:	701a      	strb	r2, [r3, #0]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69fa      	ldr	r2, [r7, #28]
 80032d0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	}

	if (sn[NSFLAG] & NS_LFN) {			/* When LFN is to be created, allocate entries for an SFN + LFNs. */
 80032d4:	7dfb      	ldrb	r3, [r7, #23]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d014      	beq.n	8003308 <dir_register+0xd4>
		for (n = 0; lfn[n]; n++) ;
 80032de:	2300      	movs	r3, #0
 80032e0:	62bb      	str	r3, [r7, #40]	; 0x28
 80032e2:	e002      	b.n	80032ea <dir_register+0xb6>
 80032e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032e6:	3301      	adds	r3, #1
 80032e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80032ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	69fa      	ldr	r2, [r7, #28]
 80032f0:	4413      	add	r3, r2
 80032f2:	881b      	ldrh	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d1f5      	bne.n	80032e4 <dir_register+0xb0>
		nent = (n + 25) / 13;
 80032f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80032fa:	3319      	adds	r3, #25
 80032fc:	4a53      	ldr	r2, [pc, #332]	; (800344c <dir_register+0x218>)
 80032fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003302:	089b      	lsrs	r3, r3, #2
 8003304:	627b      	str	r3, [r7, #36]	; 0x24
 8003306:	e001      	b.n	800330c <dir_register+0xd8>
	} else {						/* Otherwise allocate an entry for an SFN  */
		nent = 1;
 8003308:	2301      	movs	r3, #1
 800330a:	627b      	str	r3, [r7, #36]	; 0x24
	}
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800330c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7ff fc9d 	bl	8002c4e <dir_alloc>
 8003314:	4603      	mov	r3, r0
 8003316:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800331a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800331e:	2b00      	cmp	r3, #0
 8003320:	d153      	bne.n	80033ca <dir_register+0x196>
 8003322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003324:	3b01      	subs	r3, #1
 8003326:	627b      	str	r3, [r7, #36]	; 0x24
 8003328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800332a:	2b00      	cmp	r3, #0
 800332c:	d04d      	beq.n	80033ca <dir_register+0x196>
		res = dir_sdi(dp, dp->index - nent);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8003334:	461a      	mov	r2, r3
 8003336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003338:	1ad3      	subs	r3, r2, r3
 800333a:	4619      	mov	r1, r3
 800333c:	6878      	ldr	r0, [r7, #4]
 800333e:	f7ff fabb 	bl	80028b8 <dir_sdi>
 8003342:	4603      	mov	r3, r0
 8003344:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8003348:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800334c:	2b00      	cmp	r3, #0
 800334e:	d13c      	bne.n	80033ca <dir_register+0x196>
			sum = sum_sfn(dp->fn);	/* Sum value of the SFN tied to the LFN */
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fe8b 	bl	8003072 <sum_sfn>
 800335c:	4603      	mov	r3, r0
 800335e:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(dp->fs, dp->sect);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 800336c:	4619      	mov	r1, r3
 800336e:	4610      	mov	r0, r2
 8003370:	f7fe fe49 	bl	8002006 <move_window>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800337a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800337e:	2b00      	cmp	r3, #0
 8003380:	d122      	bne.n	80033c8 <dir_register+0x194>
				fit_lfn(dp->lfn, dp->dir, (BYTE)nent, sum);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8d3 0420 	ldr.w	r0, [r3, #1056]	; 0x420
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f8d3 1414 	ldr.w	r1, [r3, #1044]	; 0x414
 800338e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003390:	b2da      	uxtb	r2, r3
 8003392:	7efb      	ldrb	r3, [r7, #27]
 8003394:	f7ff fd68 	bl	8002e68 <fit_lfn>
				dp->fs->wflag = 1;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800339e:	2201      	movs	r2, #1
 80033a0:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = dir_next(dp, 0);	/* Next entry */
 80033a4:	2100      	movs	r1, #0
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f7ff fb37 	bl	8002a1a <dir_next>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 80033b2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d107      	bne.n	80033ca <dir_register+0x196>
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	3b01      	subs	r3, #1
 80033be:	627b      	str	r3, [r7, #36]	; 0x24
 80033c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1cc      	bne.n	8003360 <dir_register+0x12c>
 80033c6:	e000      	b.n	80033ca <dir_register+0x196>
				if (res != FR_OK) break;
 80033c8:	bf00      	nop
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 80033ca:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d135      	bne.n	800343e <dir_register+0x20a>
		res = move_window(dp->fs, dp->sect);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80033de:	4619      	mov	r1, r3
 80033e0:	4610      	mov	r0, r2
 80033e2:	f7fe fe10 	bl	8002006 <move_window>
 80033e6:	4603      	mov	r3, r0
 80033e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 80033ec:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d124      	bne.n	800343e <dir_register+0x20a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80033fa:	2220      	movs	r2, #32
 80033fc:	2100      	movs	r1, #0
 80033fe:	4618      	mov	r0, r3
 8003400:	f7fe fba4 	bl	8001b4c <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f8d3 0414 	ldr.w	r0, [r3, #1044]	; 0x414
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003410:	220b      	movs	r2, #11
 8003412:	4619      	mov	r1, r3
 8003414:	f7fe fb7c 	bl	8001b10 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800341e:	330b      	adds	r3, #11
 8003420:	781a      	ldrb	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003428:	330c      	adds	r3, #12
 800342a:	f002 0218 	and.w	r2, r2, #24
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]
#endif
			dp->fs->wflag = 1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003438:	2201      	movs	r2, #1
 800343a:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
		}
	}

	return res;
 800343e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003442:	4618      	mov	r0, r3
 8003444:	3730      	adds	r7, #48	; 0x30
 8003446:	46bd      	mov	sp, r7
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	4ec4ec4f 	.word	0x4ec4ec4f

08003450 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8003450:	b580      	push	{r7, lr}
 8003452:	b08a      	sub	sp, #40	; 0x28
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]
 8003460:	e002      	b.n	8003468 <create_name+0x18>
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	3301      	adds	r3, #1
 8003466:	613b      	str	r3, [r7, #16]
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	781b      	ldrb	r3, [r3, #0]
 800346c:	2b2f      	cmp	r3, #47	; 0x2f
 800346e:	d0f8      	beq.n	8003462 <create_name+0x12>
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	2b5c      	cmp	r3, #92	; 0x5c
 8003476:	d0f4      	beq.n	8003462 <create_name+0x12>
	lfn = dp->lfn;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800347e:	60fb      	str	r3, [r7, #12]
	si = di = 0;
 8003480:	2300      	movs	r3, #0
 8003482:	617b      	str	r3, [r7, #20]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	1c5a      	adds	r2, r3, #1
 800348c:	61ba      	str	r2, [r7, #24]
 800348e:	693a      	ldr	r2, [r7, #16]
 8003490:	4413      	add	r3, r2
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ' || w == '/' || w == '\\') break;	/* Break on end of segment */
 8003496:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003498:	2b1f      	cmp	r3, #31
 800349a:	d92f      	bls.n	80034fc <create_name+0xac>
 800349c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800349e:	2b2f      	cmp	r3, #47	; 0x2f
 80034a0:	d02c      	beq.n	80034fc <create_name+0xac>
 80034a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034a4:	2b5c      	cmp	r3, #92	; 0x5c
 80034a6:	d029      	beq.n	80034fc <create_name+0xac>
		if (di >= _MAX_LFN)				/* Reject too long name */
 80034a8:	697b      	ldr	r3, [r7, #20]
 80034aa:	2bfe      	cmp	r3, #254	; 0xfe
 80034ac:	d901      	bls.n	80034b2 <create_name+0x62>
			return FR_INVALID_NAME;
 80034ae:	2306      	movs	r3, #6
 80034b0:	e17b      	b.n	80037aa <create_name+0x35a>
#if !_LFN_UNICODE
		w &= 0xFF;
 80034b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034b4:	b2db      	uxtb	r3, r3
 80034b6:	84bb      	strh	r3, [r7, #36]	; 0x24
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b))
				return FR_INVALID_NAME;	/* Reject invalid sequence */
#endif
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 80034b8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034ba:	2101      	movs	r1, #1
 80034bc:	4618      	mov	r0, r3
 80034be:	f001 ff7d 	bl	80053bc <ff_convert>
 80034c2:	4603      	mov	r3, r0
 80034c4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 80034c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d101      	bne.n	80034d0 <create_name+0x80>
 80034cc:	2306      	movs	r3, #6
 80034ce:	e16c      	b.n	80037aa <create_name+0x35a>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) /* Reject illegal characters for LFN */
 80034d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034d2:	2b7f      	cmp	r3, #127	; 0x7f
 80034d4:	d809      	bhi.n	80034ea <create_name+0x9a>
 80034d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034d8:	4619      	mov	r1, r3
 80034da:	48b6      	ldr	r0, [pc, #728]	; (80037b4 <create_name+0x364>)
 80034dc:	f7fe fb77 	bl	8001bce <chk_chr>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <create_name+0x9a>
			return FR_INVALID_NAME;
 80034e6:	2306      	movs	r3, #6
 80034e8:	e15f      	b.n	80037aa <create_name+0x35a>
		lfn[di++] = w;					/* Store the Unicode character */
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	1c5a      	adds	r2, r3, #1
 80034ee:	617a      	str	r2, [r7, #20]
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	68fa      	ldr	r2, [r7, #12]
 80034f4:	4413      	add	r3, r2
 80034f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034f8:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 80034fa:	e7c5      	b.n	8003488 <create_name+0x38>
	}
	*path = &p[si];						/* Return pointer to the next segment */
 80034fc:	693a      	ldr	r2, [r7, #16]
 80034fe:	69bb      	ldr	r3, [r7, #24]
 8003500:	441a      	add	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8003506:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003508:	2b1f      	cmp	r3, #31
 800350a:	d801      	bhi.n	8003510 <create_name+0xc0>
 800350c:	2304      	movs	r3, #4
 800350e:	e000      	b.n	8003512 <create_name+0xc2>
 8003510:	2300      	movs	r3, #0
 8003512:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Strip trailing spaces and dots */
 8003516:	e011      	b.n	800353c <create_name+0xec>
		w = lfn[di - 1];
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800351e:	3b01      	subs	r3, #1
 8003520:	005b      	lsls	r3, r3, #1
 8003522:	68fa      	ldr	r2, [r7, #12]
 8003524:	4413      	add	r3, r2
 8003526:	881b      	ldrh	r3, [r3, #0]
 8003528:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800352a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800352c:	2b20      	cmp	r3, #32
 800352e:	d002      	beq.n	8003536 <create_name+0xe6>
 8003530:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003532:	2b2e      	cmp	r3, #46	; 0x2e
 8003534:	d106      	bne.n	8003544 <create_name+0xf4>
		di--;
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	3b01      	subs	r3, #1
 800353a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Strip trailing spaces and dots */
 800353c:	697b      	ldr	r3, [r7, #20]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1ea      	bne.n	8003518 <create_name+0xc8>
 8003542:	e000      	b.n	8003546 <create_name+0xf6>
		if (w != ' ' && w != '.') break;
 8003544:	bf00      	nop
	}
	if (!di) return FR_INVALID_NAME;	/* Reject nul string */
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d101      	bne.n	8003550 <create_name+0x100>
 800354c:	2306      	movs	r3, #6
 800354e:	e12c      	b.n	80037aa <create_name+0x35a>

	lfn[di] = 0;						/* LFN is created */
 8003550:	697b      	ldr	r3, [r7, #20]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	4413      	add	r3, r2
 8003558:	2200      	movs	r2, #0
 800355a:	801a      	strh	r2, [r3, #0]

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003562:	220b      	movs	r2, #11
 8003564:	2120      	movs	r1, #32
 8003566:	4618      	mov	r0, r3
 8003568:	f7fe faf0 	bl	8001b4c <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800356c:	2300      	movs	r3, #0
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	e002      	b.n	8003578 <create_name+0x128>
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	3301      	adds	r3, #1
 8003576:	61bb      	str	r3, [r7, #24]
 8003578:	69bb      	ldr	r3, [r7, #24]
 800357a:	005b      	lsls	r3, r3, #1
 800357c:	68fa      	ldr	r2, [r7, #12]
 800357e:	4413      	add	r3, r2
 8003580:	881b      	ldrh	r3, [r3, #0]
 8003582:	2b20      	cmp	r3, #32
 8003584:	d0f5      	beq.n	8003572 <create_name+0x122>
 8003586:	69bb      	ldr	r3, [r7, #24]
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4413      	add	r3, r2
 800358e:	881b      	ldrh	r3, [r3, #0]
 8003590:	2b2e      	cmp	r3, #46	; 0x2e
 8003592:	d0ee      	beq.n	8003572 <create_name+0x122>
	if (si) cf |= NS_LOSS | NS_LFN;
 8003594:	69bb      	ldr	r3, [r7, #24]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d009      	beq.n	80035ae <create_name+0x15e>
 800359a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800359e:	f043 0303 	orr.w	r3, r3, #3
 80035a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 80035a6:	e002      	b.n	80035ae <create_name+0x15e>
 80035a8:	697b      	ldr	r3, [r7, #20]
 80035aa:	3b01      	subs	r3, #1
 80035ac:	617b      	str	r3, [r7, #20]
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d009      	beq.n	80035c8 <create_name+0x178>
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80035ba:	3b01      	subs	r3, #1
 80035bc:	005b      	lsls	r3, r3, #1
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	4413      	add	r3, r2
 80035c2:	881b      	ldrh	r3, [r3, #0]
 80035c4:	2b2e      	cmp	r3, #46	; 0x2e
 80035c6:	d1ef      	bne.n	80035a8 <create_name+0x158>

	b = i = 0; ni = 8;
 80035c8:	2300      	movs	r3, #0
 80035ca:	623b      	str	r3, [r7, #32]
 80035cc:	2300      	movs	r3, #0
 80035ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80035d2:	2308      	movs	r3, #8
 80035d4:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	1c5a      	adds	r2, r3, #1
 80035da:	61ba      	str	r2, [r7, #24]
 80035dc:	005b      	lsls	r3, r3, #1
 80035de:	68fa      	ldr	r2, [r7, #12]
 80035e0:	4413      	add	r3, r2
 80035e2:	881b      	ldrh	r3, [r3, #0]
 80035e4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 80035e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 8090 	beq.w	800370e <create_name+0x2be>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 80035ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035f0:	2b20      	cmp	r3, #32
 80035f2:	d006      	beq.n	8003602 <create_name+0x1b2>
 80035f4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035f6:	2b2e      	cmp	r3, #46	; 0x2e
 80035f8:	d10a      	bne.n	8003610 <create_name+0x1c0>
 80035fa:	69ba      	ldr	r2, [r7, #24]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	429a      	cmp	r2, r3
 8003600:	d006      	beq.n	8003610 <create_name+0x1c0>
			cf |= NS_LOSS | NS_LFN; continue;
 8003602:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003606:	f043 0303 	orr.w	r3, r3, #3
 800360a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800360e:	e07d      	b.n	800370c <create_name+0x2bc>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 8003610:	6a3a      	ldr	r2, [r7, #32]
 8003612:	69fb      	ldr	r3, [r7, #28]
 8003614:	429a      	cmp	r2, r3
 8003616:	d203      	bcs.n	8003620 <create_name+0x1d0>
 8003618:	69ba      	ldr	r2, [r7, #24]
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	429a      	cmp	r2, r3
 800361e:	d123      	bne.n	8003668 <create_name+0x218>
			if (ni == 11) {				/* Long extension */
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b0b      	cmp	r3, #11
 8003624:	d106      	bne.n	8003634 <create_name+0x1e4>
				cf |= NS_LOSS | NS_LFN; break;
 8003626:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800362a:	f043 0303 	orr.w	r3, r3, #3
 800362e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003632:	e06f      	b.n	8003714 <create_name+0x2c4>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 8003634:	69ba      	ldr	r2, [r7, #24]
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	429a      	cmp	r2, r3
 800363a:	d005      	beq.n	8003648 <create_name+0x1f8>
 800363c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003640:	f043 0303 	orr.w	r3, r3, #3
 8003644:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (si > di) break;			/* No extension */
 8003648:	69ba      	ldr	r2, [r7, #24]
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	429a      	cmp	r2, r3
 800364e:	d860      	bhi.n	8003712 <create_name+0x2c2>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	61bb      	str	r3, [r7, #24]
 8003654:	2308      	movs	r3, #8
 8003656:	623b      	str	r3, [r7, #32]
 8003658:	230b      	movs	r3, #11
 800365a:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800365c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003660:	009b      	lsls	r3, r3, #2
 8003662:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003666:	e051      	b.n	800370c <create_name+0x2bc>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8003668:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800366a:	2b7f      	cmp	r3, #127	; 0x7f
 800366c:	d914      	bls.n	8003698 <create_name+0x248>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800366e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003670:	2100      	movs	r1, #0
 8003672:	4618      	mov	r0, r3
 8003674:	f001 fea2 	bl	80053bc <ff_convert>
 8003678:	4603      	mov	r3, r0
 800367a:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800367c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800367e:	2b00      	cmp	r3, #0
 8003680:	d004      	beq.n	800368c <create_name+0x23c>
 8003682:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003684:	3b80      	subs	r3, #128	; 0x80
 8003686:	4a4c      	ldr	r2, [pc, #304]	; (80037b8 <create_name+0x368>)
 8003688:	5cd3      	ldrb	r3, [r2, r3]
 800368a:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800368c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003690:	f043 0302 	orr.w	r3, r3, #2
 8003694:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8003698:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <create_name+0x25e>
 800369e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036a0:	4619      	mov	r1, r3
 80036a2:	4846      	ldr	r0, [pc, #280]	; (80037bc <create_name+0x36c>)
 80036a4:	f7fe fa93 	bl	8001bce <chk_chr>
 80036a8:	4603      	mov	r3, r0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d008      	beq.n	80036c0 <create_name+0x270>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 80036ae:	235f      	movs	r3, #95	; 0x5f
 80036b0:	84bb      	strh	r3, [r7, #36]	; 0x24
 80036b2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80036b6:	f043 0303 	orr.w	r3, r3, #3
 80036ba:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80036be:	e01b      	b.n	80036f8 <create_name+0x2a8>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 80036c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d909      	bls.n	80036da <create_name+0x28a>
 80036c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036c8:	2b5a      	cmp	r3, #90	; 0x5a
 80036ca:	d806      	bhi.n	80036da <create_name+0x28a>
					b |= 2;
 80036cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036d0:	f043 0302 	orr.w	r3, r3, #2
 80036d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036d8:	e00e      	b.n	80036f8 <create_name+0x2a8>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 80036da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036dc:	2b60      	cmp	r3, #96	; 0x60
 80036de:	d90b      	bls.n	80036f8 <create_name+0x2a8>
 80036e0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036e2:	2b7a      	cmp	r3, #122	; 0x7a
 80036e4:	d808      	bhi.n	80036f8 <create_name+0x2a8>
						b |= 1; w -= 0x20;
 80036e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80036ea:	f043 0301 	orr.w	r3, r3, #1
 80036ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80036f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036f4:	3b20      	subs	r3, #32
 80036f6:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80036fe:	6a3b      	ldr	r3, [r7, #32]
 8003700:	1c59      	adds	r1, r3, #1
 8003702:	6239      	str	r1, [r7, #32]
 8003704:	4413      	add	r3, r2
 8003706:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003708:	b2d2      	uxtb	r2, r2
 800370a:	701a      	strb	r2, [r3, #0]
		w = lfn[si++];					/* Get an LFN character */
 800370c:	e763      	b.n	80035d6 <create_name+0x186>
		if (!w) break;					/* Break on end of the LFN */
 800370e:	bf00      	nop
 8003710:	e000      	b.n	8003714 <create_name+0x2c4>
			if (si > di) break;			/* No extension */
 8003712:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with deleted mark, replace it with RDDEM */
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	2be5      	cmp	r3, #229	; 0xe5
 800371e:	d104      	bne.n	800372a <create_name+0x2da>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8003726:	2205      	movs	r2, #5
 8003728:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 800372a:	69fb      	ldr	r3, [r7, #28]
 800372c:	2b08      	cmp	r3, #8
 800372e:	d104      	bne.n	800373a <create_name+0x2ea>
 8003730:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03)	/* Create LFN entry when there are composite capitals */
 800373a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800373e:	f003 030c 	and.w	r3, r3, #12
 8003742:	2b0c      	cmp	r3, #12
 8003744:	d005      	beq.n	8003752 <create_name+0x302>
 8003746:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800374a:	f003 0303 	and.w	r3, r3, #3
 800374e:	2b03      	cmp	r3, #3
 8003750:	d105      	bne.n	800375e <create_name+0x30e>
		cf |= NS_LFN;
 8003752:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003756:	f043 0302 	orr.w	r3, r3, #2
 800375a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800375e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003762:	f003 0302 	and.w	r3, r3, #2
 8003766:	2b00      	cmp	r3, #0
 8003768:	d117      	bne.n	800379a <create_name+0x34a>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800376a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800376e:	f003 0303 	and.w	r3, r3, #3
 8003772:	2b01      	cmp	r3, #1
 8003774:	d105      	bne.n	8003782 <create_name+0x332>
 8003776:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800377a:	f043 0310 	orr.w	r3, r3, #16
 800377e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8003782:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003786:	f003 030c 	and.w	r3, r3, #12
 800378a:	2b04      	cmp	r3, #4
 800378c:	d105      	bne.n	800379a <create_name+0x34a>
 800378e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003792:	f043 0308 	orr.w	r3, r3, #8
 8003796:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 80037a0:	330b      	adds	r3, #11
 80037a2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80037a6:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 80037a8:	2300      	movs	r3, #0

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */

	return FR_OK;
#endif
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3728      	adds	r7, #40	; 0x28
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	080071d0 	.word	0x080071d0
 80037b8:	0800728c 	.word	0x0800728c
 80037bc:	080071dc 	.word	0x080071dc

080037c0 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 80037c0:	b580      	push	{r7, lr}
 80037c2:	b084      	sub	sp, #16
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
 80037c8:	6039      	str	r1, [r7, #0]
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
	}
#else
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	781b      	ldrb	r3, [r3, #0]
 80037ce:	2b2f      	cmp	r3, #47	; 0x2f
 80037d0:	d003      	beq.n	80037da <follow_path+0x1a>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	781b      	ldrb	r3, [r3, #0]
 80037d6:	2b5c      	cmp	r3, #92	; 0x5c
 80037d8:	d102      	bne.n	80037e0 <follow_path+0x20>
		path++;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	3301      	adds	r3, #1
 80037de:	603b      	str	r3, [r7, #0]
	dp->sclust = 0;							/* Always start from the root directory */
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	781b      	ldrb	r3, [r3, #0]
 80037ec:	2b1f      	cmp	r3, #31
 80037ee:	d80a      	bhi.n	8003806 <follow_path+0x46>
		res = dir_sdi(dp, 0);
 80037f0:	2100      	movs	r1, #0
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f7ff f860 	bl	80028b8 <dir_sdi>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 8003804:	e045      	b.n	8003892 <follow_path+0xd2>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003806:	463b      	mov	r3, r7
 8003808:	4619      	mov	r1, r3
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f7ff fe20 	bl	8003450 <create_name>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8003814:	7bfb      	ldrb	r3, [r7, #15]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d136      	bne.n	8003888 <follow_path+0xc8>
			res = dir_find(dp);				/* Find an object with the sagment name */
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f7ff fc4a 	bl	80030b4 <dir_find>
 8003820:	4603      	mov	r3, r0
 8003822:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800382a:	7adb      	ldrb	r3, [r3, #11]
 800382c:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 800382e:	7bfb      	ldrb	r3, [r7, #15]
 8003830:	2b00      	cmp	r3, #0
 8003832:	d00a      	beq.n	800384a <follow_path+0x8a>
				if (res == FR_NO_FILE) {	/* Object is not found */
 8003834:	7bfb      	ldrb	r3, [r7, #15]
 8003836:	2b04      	cmp	r3, #4
 8003838:	d128      	bne.n	800388c <follow_path+0xcc>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800383a:	7bbb      	ldrb	r3, [r7, #14]
 800383c:	f003 0304 	and.w	r3, r3, #4
 8003840:	2b00      	cmp	r3, #0
 8003842:	d123      	bne.n	800388c <follow_path+0xcc>
 8003844:	2305      	movs	r3, #5
 8003846:	73fb      	strb	r3, [r7, #15]
					}
				}
				break;
 8003848:	e020      	b.n	800388c <follow_path+0xcc>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800384a:	7bbb      	ldrb	r3, [r7, #14]
 800384c:	f003 0304 	and.w	r3, r3, #4
 8003850:	2b00      	cmp	r3, #0
 8003852:	d11d      	bne.n	8003890 <follow_path+0xd0>
			dir = dp->dir;						/* Follow the sub-directory */
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800385a:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800385c:	68bb      	ldr	r3, [r7, #8]
 800385e:	330b      	adds	r3, #11
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	f003 0310 	and.w	r3, r3, #16
 8003866:	2b00      	cmp	r3, #0
 8003868:	d102      	bne.n	8003870 <follow_path+0xb0>
				res = FR_NO_PATH; break;
 800386a:	2305      	movs	r3, #5
 800386c:	73fb      	strb	r3, [r7, #15]
 800386e:	e010      	b.n	8003892 <follow_path+0xd2>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8003876:	68b9      	ldr	r1, [r7, #8]
 8003878:	4618      	mov	r0, r3
 800387a:	f7ff fa32 	bl	8002ce2 <ld_clust>
 800387e:	4602      	mov	r2, r0
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8003886:	e7be      	b.n	8003806 <follow_path+0x46>
			if (res != FR_OK) break;
 8003888:	bf00      	nop
 800388a:	e002      	b.n	8003892 <follow_path+0xd2>
				break;
 800388c:	bf00      	nop
 800388e:	e000      	b.n	8003892 <follow_path+0xd2>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8003890:	bf00      	nop
		}
	}

	return res;
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}

0800389c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800389c:	b480      	push	{r7}
 800389e:	b087      	sub	sp, #28
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80038a4:	f04f 33ff 	mov.w	r3, #4294967295
 80038a8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d031      	beq.n	8003916 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	617b      	str	r3, [r7, #20]
 80038b8:	e002      	b.n	80038c0 <get_ldnumber+0x24>
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	3301      	adds	r3, #1
 80038be:	617b      	str	r3, [r7, #20]
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	781b      	ldrb	r3, [r3, #0]
 80038c4:	2b1f      	cmp	r3, #31
 80038c6:	d903      	bls.n	80038d0 <get_ldnumber+0x34>
 80038c8:	697b      	ldr	r3, [r7, #20]
 80038ca:	781b      	ldrb	r3, [r3, #0]
 80038cc:	2b3a      	cmp	r3, #58	; 0x3a
 80038ce:	d1f4      	bne.n	80038ba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	781b      	ldrb	r3, [r3, #0]
 80038d4:	2b3a      	cmp	r3, #58	; 0x3a
 80038d6:	d11c      	bne.n	8003912 <get_ldnumber+0x76>
			tp = *path;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0'; 
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	1c5a      	adds	r2, r3, #1
 80038e2:	60fa      	str	r2, [r7, #12]
 80038e4:	781b      	ldrb	r3, [r3, #0]
 80038e6:	3b30      	subs	r3, #48	; 0x30
 80038e8:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80038ea:	68bb      	ldr	r3, [r7, #8]
 80038ec:	2b09      	cmp	r3, #9
 80038ee:	d80e      	bhi.n	800390e <get_ldnumber+0x72>
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	697b      	ldr	r3, [r7, #20]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d10a      	bne.n	800390e <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d107      	bne.n	800390e <get_ldnumber+0x72>
					vol = (int)i;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	3301      	adds	r3, #1
 8003906:	617b      	str	r3, [r7, #20]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	697a      	ldr	r2, [r7, #20]
 800390c:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	e002      	b.n	8003918 <get_ldnumber+0x7c>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 8003912:	2300      	movs	r3, #0
 8003914:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 8003916:	693b      	ldr	r3, [r7, #16]
}
 8003918:	4618      	mov	r0, r3
 800391a:	371c      	adds	r7, #28
 800391c:	46bd      	mov	sp, r7
 800391e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003922:	4770      	bx	lr

08003924 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	b082      	sub	sp, #8
 8003928:	af00      	add	r7, sp, #0
 800392a:	6078      	str	r0, [r7, #4]
 800392c:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f04f 32ff 	mov.w	r2, #4294967295
 800393c:	f8c3 242c 	str.w	r2, [r3, #1068]	; 0x42c
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 8003940:	6839      	ldr	r1, [r7, #0]
 8003942:	6878      	ldr	r0, [r7, #4]
 8003944:	f7fe fb5f 	bl	8002006 <move_window>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <check_fs+0x2e>
		return 3;
 800394e:	2303      	movs	r3, #3
 8003950:	e04a      	b.n	80039e8 <check_fs+0xc4>

	if (LD_WORD(&fs->win.d8[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8003958:	3301      	adds	r3, #1
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	b21a      	sxth	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8003966:	b21b      	sxth	r3, r3
 8003968:	4313      	orrs	r3, r2
 800396a:	b21b      	sxth	r3, r3
 800396c:	4a20      	ldr	r2, [pc, #128]	; (80039f0 <check_fs+0xcc>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d001      	beq.n	8003976 <check_fs+0x52>
		return 2;
 8003972:	2302      	movs	r3, #2
 8003974:	e038      	b.n	80039e8 <check_fs+0xc4>

	if ((LD_DWORD(&fs->win.d8[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	3336      	adds	r3, #54	; 0x36
 800397a:	3303      	adds	r3, #3
 800397c:	781b      	ldrb	r3, [r3, #0]
 800397e:	061a      	lsls	r2, r3, #24
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	3336      	adds	r3, #54	; 0x36
 8003984:	3302      	adds	r3, #2
 8003986:	781b      	ldrb	r3, [r3, #0]
 8003988:	041b      	lsls	r3, r3, #16
 800398a:	4313      	orrs	r3, r2
 800398c:	687a      	ldr	r2, [r7, #4]
 800398e:	3236      	adds	r2, #54	; 0x36
 8003990:	3201      	adds	r2, #1
 8003992:	7812      	ldrb	r2, [r2, #0]
 8003994:	0212      	lsls	r2, r2, #8
 8003996:	4313      	orrs	r3, r2
 8003998:	687a      	ldr	r2, [r7, #4]
 800399a:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 800399e:	4313      	orrs	r3, r2
 80039a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039a4:	4a13      	ldr	r2, [pc, #76]	; (80039f4 <check_fs+0xd0>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d101      	bne.n	80039ae <check_fs+0x8a>
		return 0;
 80039aa:	2300      	movs	r3, #0
 80039ac:	e01c      	b.n	80039e8 <check_fs+0xc4>
	if ((LD_DWORD(&fs->win.d8[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	3352      	adds	r3, #82	; 0x52
 80039b2:	3303      	adds	r3, #3
 80039b4:	781b      	ldrb	r3, [r3, #0]
 80039b6:	061a      	lsls	r2, r3, #24
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3352      	adds	r3, #82	; 0x52
 80039bc:	3302      	adds	r3, #2
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	041b      	lsls	r3, r3, #16
 80039c2:	4313      	orrs	r3, r2
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	3252      	adds	r2, #82	; 0x52
 80039c8:	3201      	adds	r2, #1
 80039ca:	7812      	ldrb	r2, [r2, #0]
 80039cc:	0212      	lsls	r2, r2, #8
 80039ce:	4313      	orrs	r3, r2
 80039d0:	687a      	ldr	r2, [r7, #4]
 80039d2:	f892 2052 	ldrb.w	r2, [r2, #82]	; 0x52
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80039dc:	4a05      	ldr	r2, [pc, #20]	; (80039f4 <check_fs+0xd0>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d101      	bne.n	80039e6 <check_fs+0xc2>
		return 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	e000      	b.n	80039e8 <check_fs+0xc4>

	return 1;
 80039e6:	2301      	movs	r3, #1
}
 80039e8:	4618      	mov	r0, r3
 80039ea:	3708      	adds	r7, #8
 80039ec:	46bd      	mov	sp, r7
 80039ee:	bd80      	pop	{r7, pc}
 80039f0:	ffffaa55 	.word	0xffffaa55
 80039f4:	00544146 	.word	0x00544146

080039f8 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b096      	sub	sp, #88	; 0x58
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	60f8      	str	r0, [r7, #12]
 8003a00:	60b9      	str	r1, [r7, #8]
 8003a02:	4613      	mov	r3, r2
 8003a04:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 8003a0c:	68b8      	ldr	r0, [r7, #8]
 8003a0e:	f7ff ff45 	bl	800389c <get_ldnumber>
 8003a12:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8003a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	da01      	bge.n	8003a1e <find_volume+0x26>
 8003a1a:	230b      	movs	r3, #11
 8003a1c:	e2de      	b.n	8003fdc <find_volume+0x5e4>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 8003a1e:	4ab1      	ldr	r2, [pc, #708]	; (8003ce4 <find_volume+0x2ec>)
 8003a20:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a22:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a26:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8003a28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d101      	bne.n	8003a32 <find_volume+0x3a>
 8003a2e:	230c      	movs	r3, #12
 8003a30:	e2d4      	b.n	8003fdc <find_volume+0x5e4>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003a36:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 8003a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a3a:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01b      	beq.n	8003a7a <find_volume+0x82>
		stat = disk_status(fs->drv);
 8003a42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a44:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fd ffc3 	bl	80019d4 <disk_status>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8003a54:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d10c      	bne.n	8003a7a <find_volume+0x82>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 8003a60:	79fb      	ldrb	r3, [r7, #7]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d007      	beq.n	8003a76 <find_volume+0x7e>
 8003a66:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003a6a:	f003 0304 	and.w	r3, r3, #4
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <find_volume+0x7e>
				return FR_WRITE_PROTECTED;
 8003a72:	230a      	movs	r3, #10
 8003a74:	e2b2      	b.n	8003fdc <find_volume+0x5e4>
			return FR_OK;				/* The file system object is valid */
 8003a76:	2300      	movs	r3, #0
 8003a78:	e2b0      	b.n	8003fdc <find_volume+0x5e4>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 8003a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8003a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a84:	b2da      	uxtb	r2, r3
 8003a86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a88:	f883 2401 	strb.w	r2, [r3, #1025]	; 0x401
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8003a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a8e:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 8003a92:	4618      	mov	r0, r3
 8003a94:	f7fd ffb8 	bl	8001a08 <disk_initialize>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8003a9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d001      	beq.n	8003aae <find_volume+0xb6>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e296      	b.n	8003fdc <find_volume+0x5e4>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8003aae:	79fb      	ldrb	r3, [r7, #7]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d007      	beq.n	8003ac4 <find_volume+0xcc>
 8003ab4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d001      	beq.n	8003ac4 <find_volume+0xcc>
		return FR_WRITE_PROTECTED;
 8003ac0:	230a      	movs	r3, #10
 8003ac2:	e28b      	b.n	8003fdc <find_volume+0x5e4>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
 8003ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ac6:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8003aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003acc:	f203 430a 	addw	r3, r3, #1034	; 0x40a
 8003ad0:	461a      	mov	r2, r3
 8003ad2:	2102      	movs	r1, #2
 8003ad4:	f7fd fffe 	bl	8001ad4 <disk_ioctl>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d10b      	bne.n	8003af6 <find_volume+0xfe>
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
 8003ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ae0:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8003ae4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ae8:	d305      	bcc.n	8003af6 <find_volume+0xfe>
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8003af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003af4:	d901      	bls.n	8003afa <find_volume+0x102>
 8003af6:	2301      	movs	r3, #1
 8003af8:	e270      	b.n	8003fdc <find_volume+0x5e4>
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 8003afa:	2300      	movs	r3, #0
 8003afc:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 8003afe:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003b00:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b02:	f7ff ff0f 	bl	8003924 <check_fs>
 8003b06:	4603      	mov	r3, r0
 8003b08:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 8003b0c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d155      	bne.n	8003bc0 <find_volume+0x1c8>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003b14:	2300      	movs	r3, #0
 8003b16:	643b      	str	r3, [r7, #64]	; 0x40
 8003b18:	e029      	b.n	8003b6e <find_volume+0x176>
			pt = fs->win.d8 + MBR_Table + i * SZ_PTE;
 8003b1a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003b1c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b1e:	011b      	lsls	r3, r3, #4
 8003b20:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8003b24:	4413      	add	r3, r2
 8003b26:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 8003b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b2a:	3304      	adds	r3, #4
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d012      	beq.n	8003b58 <find_volume+0x160>
 8003b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b34:	330b      	adds	r3, #11
 8003b36:	781b      	ldrb	r3, [r3, #0]
 8003b38:	061a      	lsls	r2, r3, #24
 8003b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b3c:	330a      	adds	r3, #10
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	041b      	lsls	r3, r3, #16
 8003b42:	4313      	orrs	r3, r2
 8003b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b46:	3209      	adds	r2, #9
 8003b48:	7812      	ldrb	r2, [r2, #0]
 8003b4a:	0212      	lsls	r2, r2, #8
 8003b4c:	4313      	orrs	r3, r2
 8003b4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b50:	3208      	adds	r2, #8
 8003b52:	7812      	ldrb	r2, [r2, #0]
 8003b54:	431a      	orrs	r2, r3
 8003b56:	e000      	b.n	8003b5a <find_volume+0x162>
 8003b58:	2200      	movs	r2, #0
 8003b5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b5c:	009b      	lsls	r3, r3, #2
 8003b5e:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8003b62:	440b      	add	r3, r1
 8003b64:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8003b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	643b      	str	r3, [r7, #64]	; 0x40
 8003b6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b70:	2b03      	cmp	r3, #3
 8003b72:	d9d2      	bls.n	8003b1a <find_volume+0x122>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 8003b74:	2300      	movs	r3, #0
 8003b76:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 8003b78:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d002      	beq.n	8003b84 <find_volume+0x18c>
 8003b7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b80:	3b01      	subs	r3, #1
 8003b82:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 8003b84:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003b86:	009b      	lsls	r3, r3, #2
 8003b88:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8003b8c:	4413      	add	r3, r2
 8003b8e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8003b92:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 8003b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <find_volume+0x1ae>
 8003b9a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003b9c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003b9e:	f7ff fec1 	bl	8003924 <check_fs>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	e000      	b.n	8003ba8 <find_volume+0x1b0>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 8003bac:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d005      	beq.n	8003bc0 <find_volume+0x1c8>
 8003bb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	643b      	str	r3, [r7, #64]	; 0x40
 8003bba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d9e1      	bls.n	8003b84 <find_volume+0x18c>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8003bc0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bc4:	2b03      	cmp	r3, #3
 8003bc6:	d101      	bne.n	8003bcc <find_volume+0x1d4>
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e207      	b.n	8003fdc <find_volume+0x5e4>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 8003bcc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d001      	beq.n	8003bd8 <find_volume+0x1e0>
 8003bd4:	230d      	movs	r3, #13
 8003bd6:	e201      	b.n	8003fdc <find_volume+0x5e4>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win.d8 + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8003bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bda:	7b1b      	ldrb	r3, [r3, #12]
 8003bdc:	021b      	lsls	r3, r3, #8
 8003bde:	b21a      	sxth	r2, r3
 8003be0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003be2:	7adb      	ldrb	r3, [r3, #11]
 8003be4:	b21b      	sxth	r3, r3
 8003be6:	4313      	orrs	r3, r2
 8003be8:	b21b      	sxth	r3, r3
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bee:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8003bf2:	429a      	cmp	r2, r3
 8003bf4:	d001      	beq.n	8003bfa <find_volume+0x202>
		return FR_NO_FILESYSTEM;
 8003bf6:	230d      	movs	r3, #13
 8003bf8:	e1f0      	b.n	8003fdc <find_volume+0x5e4>

	fasize = LD_WORD(fs->win.d8 + BPB_FATSz16);			/* Number of sectors per FAT */
 8003bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003bfc:	7ddb      	ldrb	r3, [r3, #23]
 8003bfe:	021b      	lsls	r3, r3, #8
 8003c00:	b21a      	sxth	r2, r3
 8003c02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c04:	7d9b      	ldrb	r3, [r3, #22]
 8003c06:	b21b      	sxth	r3, r3
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	b21b      	sxth	r3, r3
 8003c0c:	b29b      	uxth	r3, r3
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win.d8 + BPB_FATSz32);
 8003c10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d112      	bne.n	8003c3c <find_volume+0x244>
 8003c16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c18:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003c1c:	061a      	lsls	r2, r3, #24
 8003c1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c20:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003c24:	041b      	lsls	r3, r3, #16
 8003c26:	4313      	orrs	r3, r2
 8003c28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c2a:	f892 2025 	ldrb.w	r2, [r2, #37]	; 0x25
 8003c2e:	0212      	lsls	r2, r2, #8
 8003c30:	4313      	orrs	r3, r2
 8003c32:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003c34:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 8003c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c3e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c40:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418

	fs->n_fats = fs->win.d8[BPB_NumFATs];					/* Number of FAT copies */
 8003c44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c46:	7c1a      	ldrb	r2, [r3, #16]
 8003c48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c4a:	f883 2403 	strb.w	r2, [r3, #1027]	; 0x403
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 8003c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c50:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8003c54:	2b01      	cmp	r3, #1
 8003c56:	d006      	beq.n	8003c66 <find_volume+0x26e>
 8003c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c5a:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8003c5e:	2b02      	cmp	r3, #2
 8003c60:	d001      	beq.n	8003c66 <find_volume+0x26e>
		return FR_NO_FILESYSTEM;
 8003c62:	230d      	movs	r3, #13
 8003c64:	e1ba      	b.n	8003fdc <find_volume+0x5e4>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 8003c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c68:	f893 3403 	ldrb.w	r3, [r3, #1027]	; 0x403
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c70:	fb02 f303 	mul.w	r3, r2, r3
 8003c74:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win.d8[BPB_SecPerClus];				/* Number of sectors per cluster */
 8003c76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c78:	7b5a      	ldrb	r2, [r3, #13]
 8003c7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c7c:	f883 2402 	strb.w	r2, [r3, #1026]	; 0x402
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 8003c80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c82:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d00a      	beq.n	8003ca0 <find_volume+0x2a8>
 8003c8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c8c:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8003c90:	461a      	mov	r2, r3
 8003c92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c94:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8003c98:	3b01      	subs	r3, #1
 8003c9a:	4013      	ands	r3, r2
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d001      	beq.n	8003ca4 <find_volume+0x2ac>
		return FR_NO_FILESYSTEM;
 8003ca0:	230d      	movs	r3, #13
 8003ca2:	e19b      	b.n	8003fdc <find_volume+0x5e4>

	fs->n_rootdir = LD_WORD(fs->win.d8 + BPB_RootEntCnt);	/* Number of root directory entries */
 8003ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ca6:	7c9b      	ldrb	r3, [r3, #18]
 8003ca8:	021b      	lsls	r3, r3, #8
 8003caa:	b21a      	sxth	r2, r3
 8003cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cae:	7c5b      	ldrb	r3, [r3, #17]
 8003cb0:	b21b      	sxth	r3, r3
 8003cb2:	4313      	orrs	r3, r2
 8003cb4:	b21b      	sxth	r3, r3
 8003cb6:	b29a      	uxth	r2, r3
 8003cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cba:	f8a3 2408 	strh.w	r2, [r3, #1032]	; 0x408
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8003cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003cc6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8003cca:	0952      	lsrs	r2, r2, #5
 8003ccc:	b292      	uxth	r2, r2
 8003cce:	fbb3 f1f2 	udiv	r1, r3, r2
 8003cd2:	fb02 f201 	mul.w	r2, r2, r1
 8003cd6:	1a9b      	subs	r3, r3, r2
 8003cd8:	b29b      	uxth	r3, r3
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d004      	beq.n	8003ce8 <find_volume+0x2f0>
		return FR_NO_FILESYSTEM;
 8003cde:	230d      	movs	r3, #13
 8003ce0:	e17c      	b.n	8003fdc <find_volume+0x5e4>
 8003ce2:	bf00      	nop
 8003ce4:	2000020c 	.word	0x2000020c

	tsect = LD_WORD(fs->win.d8 + BPB_TotSec16);			/* Number of sectors on the volume */
 8003ce8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cea:	7d1b      	ldrb	r3, [r3, #20]
 8003cec:	021b      	lsls	r3, r3, #8
 8003cee:	b21a      	sxth	r2, r3
 8003cf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cf2:	7cdb      	ldrb	r3, [r3, #19]
 8003cf4:	b21b      	sxth	r3, r3
 8003cf6:	4313      	orrs	r3, r2
 8003cf8:	b21b      	sxth	r3, r3
 8003cfa:	b29b      	uxth	r3, r3
 8003cfc:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win.d8 + BPB_TotSec32);
 8003cfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d112      	bne.n	8003d2a <find_volume+0x332>
 8003d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d06:	f893 3023 	ldrb.w	r3, [r3, #35]	; 0x23
 8003d0a:	061a      	lsls	r2, r3, #24
 8003d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d0e:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8003d12:	041b      	lsls	r3, r3, #16
 8003d14:	4313      	orrs	r3, r2
 8003d16:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d18:	f892 2021 	ldrb.w	r2, [r2, #33]	; 0x21
 8003d1c:	0212      	lsls	r2, r2, #8
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d22:	f892 2020 	ldrb.w	r2, [r2, #32]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win.d8 + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8003d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d2c:	7bdb      	ldrb	r3, [r3, #15]
 8003d2e:	021b      	lsls	r3, r3, #8
 8003d30:	b21a      	sxth	r2, r3
 8003d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d34:	7b9b      	ldrb	r3, [r3, #14]
 8003d36:	b21b      	sxth	r3, r3
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	b21b      	sxth	r3, r3
 8003d3c:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 8003d3e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d101      	bne.n	8003d48 <find_volume+0x350>
 8003d44:	230d      	movs	r3, #13
 8003d46:	e149      	b.n	8003fdc <find_volume+0x5e4>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8003d48:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d4c:	4413      	add	r3, r2
 8003d4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d50:	f8b2 1408 	ldrh.w	r1, [r2, #1032]	; 0x408
 8003d54:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d56:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8003d5a:	0952      	lsrs	r2, r2, #5
 8003d5c:	b292      	uxth	r2, r2
 8003d5e:	fbb1 f2f2 	udiv	r2, r1, r2
 8003d62:	b292      	uxth	r2, r2
 8003d64:	4413      	add	r3, r2
 8003d66:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8003d68:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d201      	bcs.n	8003d74 <find_volume+0x37c>
 8003d70:	230d      	movs	r3, #13
 8003d72:	e133      	b.n	8003fdc <find_volume+0x5e4>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8003d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d78:	1ad3      	subs	r3, r2, r3
 8003d7a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003d7c:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8003d80:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d84:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 8003d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d101      	bne.n	8003d90 <find_volume+0x398>
 8003d8c:	230d      	movs	r3, #13
 8003d8e:	e125      	b.n	8003fdc <find_volume+0x5e4>
	fmt = FS_FAT12;
 8003d90:	2301      	movs	r3, #1
 8003d92:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 8003d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d98:	f640 72f5 	movw	r2, #4085	; 0xff5
 8003d9c:	4293      	cmp	r3, r2
 8003d9e:	d902      	bls.n	8003da6 <find_volume+0x3ae>
 8003da0:	2302      	movs	r3, #2
 8003da2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 8003da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003da8:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d902      	bls.n	8003db6 <find_volume+0x3be>
 8003db0:	2303      	movs	r3, #3
 8003db2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 8003db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003db8:	1c9a      	adds	r2, r3, #2
 8003dba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbc:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
	fs->volbase = bsect;								/* Volume start sector */
 8003dc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dc2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003dc4:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 8003dc8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8003dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003dcc:	441a      	add	r2, r3
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dd0:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
	fs->database = bsect + sysect;						/* Data start sector */
 8003dd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd8:	441a      	add	r2, r3
 8003dda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ddc:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
	if (fmt == FS_FAT32) {
 8003de0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003de4:	2b03      	cmp	r3, #3
 8003de6:	d121      	bne.n	8003e2c <find_volume+0x434>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 8003de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dea:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d001      	beq.n	8003df6 <find_volume+0x3fe>
 8003df2:	230d      	movs	r3, #13
 8003df4:	e0f2      	b.n	8003fdc <find_volume+0x5e4>
		fs->dirbase = LD_DWORD(fs->win.d8 + BPB_RootClus);	/* Root directory start cluster */
 8003df6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003df8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8003dfc:	061a      	lsls	r2, r3, #24
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	f893 302e 	ldrb.w	r3, [r3, #46]	; 0x2e
 8003e04:	041b      	lsls	r3, r3, #16
 8003e06:	4313      	orrs	r3, r2
 8003e08:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e0a:	f892 202d 	ldrb.w	r2, [r2, #45]	; 0x2d
 8003e0e:	0212      	lsls	r2, r2, #8
 8003e10:	4313      	orrs	r3, r2
 8003e12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e14:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8003e18:	431a      	orrs	r2, r3
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8003e20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e22:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	647b      	str	r3, [r7, #68]	; 0x44
 8003e2a:	e025      	b.n	8003e78 <find_volume+0x480>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 8003e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e2e:	f8b3 3408 	ldrh.w	r3, [r3, #1032]	; 0x408
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d101      	bne.n	8003e3a <find_volume+0x442>
 8003e36:	230d      	movs	r3, #13
 8003e38:	e0d0      	b.n	8003fdc <find_volume+0x5e4>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8003e3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3c:	f8d3 2420 	ldr.w	r2, [r3, #1056]	; 0x420
 8003e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e42:	441a      	add	r2, r3
 8003e44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e46:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8003e4a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d104      	bne.n	8003e5c <find_volume+0x464>
 8003e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e54:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003e58:	005b      	lsls	r3, r3, #1
 8003e5a:	e00c      	b.n	8003e76 <find_volume+0x47e>
 8003e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5e:	f8d3 2414 	ldr.w	r2, [r3, #1044]	; 0x414
 8003e62:	4613      	mov	r3, r2
 8003e64:	005b      	lsls	r3, r3, #1
 8003e66:	4413      	add	r3, r2
 8003e68:	085a      	lsrs	r2, r3, #1
 8003e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e6c:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8003e76:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 8003e78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e7a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8003e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e80:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8003e84:	4619      	mov	r1, r3
 8003e86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e88:	440b      	add	r3, r1
 8003e8a:	3b01      	subs	r3, #1
 8003e8c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003e8e:	f8b1 140a 	ldrh.w	r1, [r1, #1034]	; 0x40a
 8003e92:	fbb3 f3f1 	udiv	r3, r3, r1
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d201      	bcs.n	8003e9e <find_volume+0x4a6>
		return FR_NO_FILESYSTEM;
 8003e9a:	230d      	movs	r3, #13
 8003e9c:	e09e      	b.n	8003fdc <find_volume+0x5e4>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 8003e9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ea4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
 8003ea8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eaa:	f8d3 2410 	ldr.w	r2, [r3, #1040]	; 0x410
 8003eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 8003eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003eb6:	2280      	movs	r2, #128	; 0x80
 8003eb8:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 8003ebc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003ec0:	2b03      	cmp	r3, #3
 8003ec2:	d177      	bne.n	8003fb4 <find_volume+0x5bc>
		&& LD_WORD(fs->win.d8 + BPB_FSInfo) == 1
 8003ec4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ec6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8003eca:	021b      	lsls	r3, r3, #8
 8003ecc:	b21a      	sxth	r2, r3
 8003ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ed0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003ed4:	b21b      	sxth	r3, r3
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	b21b      	sxth	r3, r3
 8003eda:	2b01      	cmp	r3, #1
 8003edc:	d16a      	bne.n	8003fb4 <find_volume+0x5bc>
		&& move_window(fs, bsect + 1) == FR_OK)
 8003ede:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ee0:	3301      	adds	r3, #1
 8003ee2:	4619      	mov	r1, r3
 8003ee4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003ee6:	f7fe f88e 	bl	8002006 <move_window>
 8003eea:	4603      	mov	r3, r0
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d161      	bne.n	8003fb4 <find_volume+0x5bc>
	{
		fs->fsi_flag = 0;
 8003ef0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ef2:	2200      	movs	r2, #0
 8003ef4:	f883 2405 	strb.w	r2, [r3, #1029]	; 0x405
		if (LD_WORD(fs->win.d8 + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 8003ef8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003efa:	f893 31ff 	ldrb.w	r3, [r3, #511]	; 0x1ff
 8003efe:	021b      	lsls	r3, r3, #8
 8003f00:	b21a      	sxth	r2, r3
 8003f02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f04:	f893 31fe 	ldrb.w	r3, [r3, #510]	; 0x1fe
 8003f08:	b21b      	sxth	r3, r3
 8003f0a:	4313      	orrs	r3, r2
 8003f0c:	b21b      	sxth	r3, r3
 8003f0e:	4a35      	ldr	r2, [pc, #212]	; (8003fe4 <find_volume+0x5ec>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d14f      	bne.n	8003fb4 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_LeadSig) == 0x41615252
 8003f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f16:	78db      	ldrb	r3, [r3, #3]
 8003f18:	061a      	lsls	r2, r3, #24
 8003f1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f1c:	789b      	ldrb	r3, [r3, #2]
 8003f1e:	041b      	lsls	r3, r3, #16
 8003f20:	4313      	orrs	r3, r2
 8003f22:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f24:	7852      	ldrb	r2, [r2, #1]
 8003f26:	0212      	lsls	r2, r2, #8
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f2c:	7812      	ldrb	r2, [r2, #0]
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	4a2d      	ldr	r2, [pc, #180]	; (8003fe8 <find_volume+0x5f0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d13e      	bne.n	8003fb4 <find_volume+0x5bc>
			&& LD_DWORD(fs->win.d8 + FSI_StrucSig) == 0x61417272)
 8003f36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f38:	f893 31e7 	ldrb.w	r3, [r3, #487]	; 0x1e7
 8003f3c:	061a      	lsls	r2, r3, #24
 8003f3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f40:	f893 31e6 	ldrb.w	r3, [r3, #486]	; 0x1e6
 8003f44:	041b      	lsls	r3, r3, #16
 8003f46:	4313      	orrs	r3, r2
 8003f48:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f4a:	f892 21e5 	ldrb.w	r2, [r2, #485]	; 0x1e5
 8003f4e:	0212      	lsls	r2, r2, #8
 8003f50:	4313      	orrs	r3, r2
 8003f52:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f54:	f892 21e4 	ldrb.w	r2, [r2, #484]	; 0x1e4
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	4a24      	ldr	r2, [pc, #144]	; (8003fec <find_volume+0x5f4>)
 8003f5c:	4293      	cmp	r3, r2
 8003f5e:	d129      	bne.n	8003fb4 <find_volume+0x5bc>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win.d8 + FSI_Free_Count);
 8003f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f62:	f893 31eb 	ldrb.w	r3, [r3, #491]	; 0x1eb
 8003f66:	061a      	lsls	r2, r3, #24
 8003f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f6a:	f893 31ea 	ldrb.w	r3, [r3, #490]	; 0x1ea
 8003f6e:	041b      	lsls	r3, r3, #16
 8003f70:	4313      	orrs	r3, r2
 8003f72:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f74:	f892 21e9 	ldrb.w	r2, [r2, #489]	; 0x1e9
 8003f78:	0212      	lsls	r2, r2, #8
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f7e:	f892 21e8 	ldrb.w	r2, [r2, #488]	; 0x1e8
 8003f82:	431a      	orrs	r2, r3
 8003f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f86:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win.d8 + FSI_Nxt_Free);
 8003f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f8c:	f893 31ef 	ldrb.w	r3, [r3, #495]	; 0x1ef
 8003f90:	061a      	lsls	r2, r3, #24
 8003f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f94:	f893 31ee 	ldrb.w	r3, [r3, #494]	; 0x1ee
 8003f98:	041b      	lsls	r3, r3, #16
 8003f9a:	4313      	orrs	r3, r2
 8003f9c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003f9e:	f892 21ed 	ldrb.w	r2, [r2, #493]	; 0x1ed
 8003fa2:	0212      	lsls	r2, r2, #8
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003fa8:	f892 21ec 	ldrb.w	r2, [r2, #492]	; 0x1ec
 8003fac:	431a      	orrs	r2, r3
 8003fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 8003fb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fb6:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 8003fba:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	fs->id = ++Fsid;	/* File system mount ID */
 8003fbe:	4b0c      	ldr	r3, [pc, #48]	; (8003ff0 <find_volume+0x5f8>)
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	3301      	adds	r3, #1
 8003fc4:	b29a      	uxth	r2, r3
 8003fc6:	4b0a      	ldr	r3, [pc, #40]	; (8003ff0 <find_volume+0x5f8>)
 8003fc8:	801a      	strh	r2, [r3, #0]
 8003fca:	4b09      	ldr	r3, [pc, #36]	; (8003ff0 <find_volume+0x5f8>)
 8003fcc:	881a      	ldrh	r2, [r3, #0]
 8003fce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fd0:	f8a3 2406 	strh.w	r2, [r3, #1030]	; 0x406
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
 8003fd4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fd6:	f7fd ffa3 	bl	8001f20 <clear_lock>
#endif

	return FR_OK;
 8003fda:	2300      	movs	r3, #0
}
 8003fdc:	4618      	mov	r0, r3
 8003fde:	3758      	adds	r7, #88	; 0x58
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}
 8003fe4:	ffffaa55 	.word	0xffffaa55
 8003fe8:	41615252 	.word	0x41615252
 8003fec:	61417272 	.word	0x61417272
 8003ff0:	20000210 	.word	0x20000210

08003ff4 <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b084      	sub	sp, #16
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id || (disk_status(fil->fs->drv) & STA_NOINIT))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d022      	beq.n	800404c <validate+0x58>
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800400c:	2b00      	cmp	r3, #0
 800400e:	d01d      	beq.n	800404c <validate+0x58>
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004016:	f893 3400 	ldrb.w	r3, [r3, #1024]	; 0x400
 800401a:	2b00      	cmp	r3, #0
 800401c:	d016      	beq.n	800404c <validate+0x58>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004024:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f8b3 3404 	ldrh.w	r3, [r3, #1028]	; 0x404
 800402e:	429a      	cmp	r2, r3
 8004030:	d10c      	bne.n	800404c <validate+0x58>
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004038:	f893 3401 	ldrb.w	r3, [r3, #1025]	; 0x401
 800403c:	4618      	mov	r0, r3
 800403e:	f7fd fcc9 	bl	80019d4 <disk_status>
 8004042:	4603      	mov	r3, r0
 8004044:	f003 0301 	and.w	r3, r3, #1
 8004048:	2b00      	cmp	r3, #0
 800404a:	d001      	beq.n	8004050 <validate+0x5c>
		return FR_INVALID_OBJECT;
 800404c:	2309      	movs	r3, #9
 800404e:	e000      	b.n	8004052 <validate+0x5e>

	ENTER_FF(fil->fs);		/* Lock file system */

	return FR_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 800405c:	b580      	push	{r7, lr}
 800405e:	b088      	sub	sp, #32
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800406e:	f107 0310 	add.w	r3, r7, #16
 8004072:	4618      	mov	r0, r3
 8004074:	f7ff fc12 	bl	800389c <get_ldnumber>
 8004078:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2b00      	cmp	r3, #0
 800407e:	da01      	bge.n	8004084 <f_mount+0x28>
 8004080:	230b      	movs	r3, #11
 8004082:	e02d      	b.n	80040e0 <f_mount+0x84>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <f_mount+0x8c>)
 8004086:	69fb      	ldr	r3, [r7, #28]
 8004088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800408c:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d006      	beq.n	80040a2 <f_mount+0x46>
#if _FS_LOCK
		clear_lock(cfs);
 8004094:	69b8      	ldr	r0, [r7, #24]
 8004096:	f7fd ff43 	bl	8001f20 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 800409a:	69bb      	ldr	r3, [r7, #24]
 800409c:	2200      	movs	r2, #0
 800409e:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
	}

	if (fs) {
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2b00      	cmp	r3, #0
 80040a6:	d003      	beq.n	80040b0 <f_mount+0x54>
		fs->fs_type = 0;				/* Clear new fs object */
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f883 2400 	strb.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	490d      	ldr	r1, [pc, #52]	; (80040e8 <f_mount+0x8c>)
 80040b4:	69fb      	ldr	r3, [r7, #28]
 80040b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d002      	beq.n	80040c6 <f_mount+0x6a>
 80040c0:	79fb      	ldrb	r3, [r7, #7]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d001      	beq.n	80040ca <f_mount+0x6e>
 80040c6:	2300      	movs	r3, #0
 80040c8:	e00a      	b.n	80040e0 <f_mount+0x84>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 80040ca:	f107 0108 	add.w	r1, r7, #8
 80040ce:	f107 030c 	add.w	r3, r7, #12
 80040d2:	2200      	movs	r2, #0
 80040d4:	4618      	mov	r0, r3
 80040d6:	f7ff fc8f 	bl	80039f8 <find_volume>
 80040da:	4603      	mov	r3, r0
 80040dc:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80040de:	7dfb      	ldrb	r3, [r7, #23]
}
 80040e0:	4618      	mov	r0, r3
 80040e2:	3720      	adds	r7, #32
 80040e4:	46bd      	mov	sp, r7
 80040e6:	bd80      	pop	{r7, pc}
 80040e8:	2000020c 	.word	0x2000020c

080040ec <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	f5ad 6d8b 	sub.w	sp, sp, #1112	; 0x458
 80040f2:	af00      	add	r7, sp, #0
 80040f4:	f107 030c 	add.w	r3, r7, #12
 80040f8:	6018      	str	r0, [r3, #0]
 80040fa:	f107 0308 	add.w	r3, r7, #8
 80040fe:	6019      	str	r1, [r3, #0]
 8004100:	1dfb      	adds	r3, r7, #7
 8004102:	701a      	strb	r2, [r3, #0]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 8004104:	f107 030c 	add.w	r3, r7, #12
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d101      	bne.n	8004112 <f_open+0x26>
 800410e:	2309      	movs	r3, #9
 8004110:	e1f9      	b.n	8004506 <f_open+0x41a>
	fp->fs = 0;			/* Clear file object */
 8004112:	f107 030c 	add.w	r3, r7, #12
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2200      	movs	r2, #0
 800411a:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 800411e:	1dfb      	adds	r3, r7, #7
 8004120:	1dfa      	adds	r2, r7, #7
 8004122:	7812      	ldrb	r2, [r2, #0]
 8004124:	f002 021f 	and.w	r2, r2, #31
 8004128:	701a      	strb	r2, [r3, #0]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 800412a:	1dfb      	adds	r3, r7, #7
 800412c:	781b      	ldrb	r3, [r3, #0]
 800412e:	f023 0301 	bic.w	r3, r3, #1
 8004132:	b2da      	uxtb	r2, r3
 8004134:	f107 0108 	add.w	r1, r7, #8
 8004138:	f107 0320 	add.w	r3, r7, #32
 800413c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fc59 	bl	80039f8 <find_volume>
 8004146:	4603      	mov	r3, r0
 8004148:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 800414c:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8004150:	2b00      	cmp	r3, #0
 8004152:	f040 81d6 	bne.w	8004502 <f_open+0x416>
		INIT_BUF(dj);
 8004156:	f107 0320 	add.w	r3, r7, #32
 800415a:	f107 0214 	add.w	r2, r7, #20
 800415e:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8004162:	f107 0320 	add.w	r3, r7, #32
 8004166:	4a8b      	ldr	r2, [pc, #556]	; (8004394 <f_open+0x2a8>)
 8004168:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
		res = follow_path(&dj, path);	/* Follow the file path */
 800416c:	f107 0308 	add.w	r3, r7, #8
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	f107 0320 	add.w	r3, r7, #32
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff fb21 	bl	80037c0 <follow_path>
 800417e:	4603      	mov	r3, r0
 8004180:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
		dir = dj.dir;
 8004184:	f107 0320 	add.w	r3, r7, #32
 8004188:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800418c:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8004190:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8004194:	2b00      	cmp	r3, #0
 8004196:	d11a      	bne.n	80041ce <f_open+0xe2>
			if (!dir)	/* Default directory itself */
 8004198:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800419c:	2b00      	cmp	r3, #0
 800419e:	d103      	bne.n	80041a8 <f_open+0xbc>
				res = FR_INVALID_NAME;
 80041a0:	2306      	movs	r3, #6
 80041a2:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 80041a6:	e012      	b.n	80041ce <f_open+0xe2>
#if _FS_LOCK
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80041a8:	1dfb      	adds	r3, r7, #7
 80041aa:	781b      	ldrb	r3, [r3, #0]
 80041ac:	f023 0301 	bic.w	r3, r3, #1
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	bf14      	ite	ne
 80041b4:	2301      	movne	r3, #1
 80041b6:	2300      	moveq	r3, #0
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	f107 0320 	add.w	r3, r7, #32
 80041c0:	4611      	mov	r1, r2
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fd fd1e 	bl	8001c04 <chk_lock>
 80041c8:	4603      	mov	r3, r0
 80041ca:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80041ce:	1dfb      	adds	r3, r7, #7
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	f003 031c 	and.w	r3, r3, #28
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	f000 80cc 	beq.w	8004374 <f_open+0x288>
			if (res != FR_OK) {					/* No file, create new */
 80041dc:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d01f      	beq.n	8004224 <f_open+0x138>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 80041e4:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 80041e8:	2b04      	cmp	r3, #4
 80041ea:	d10e      	bne.n	800420a <f_open+0x11e>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80041ec:	f7fd fd78 	bl	8001ce0 <enq_lock>
 80041f0:	4603      	mov	r3, r0
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d006      	beq.n	8004204 <f_open+0x118>
 80041f6:	f107 0320 	add.w	r3, r7, #32
 80041fa:	4618      	mov	r0, r3
 80041fc:	f7ff f81a 	bl	8003234 <dir_register>
 8004200:	4603      	mov	r3, r0
 8004202:	e000      	b.n	8004206 <f_open+0x11a>
 8004204:	2312      	movs	r3, #18
 8004206:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
#else
					res = dir_register(&dj);
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800420a:	1dfb      	adds	r3, r7, #7
 800420c:	1dfa      	adds	r2, r7, #7
 800420e:	7812      	ldrb	r2, [r2, #0]
 8004210:	f042 0208 	orr.w	r2, r2, #8
 8004214:	701a      	strb	r2, [r3, #0]
				dir = dj.dir;					/* New entry */
 8004216:	f107 0320 	add.w	r3, r7, #32
 800421a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800421e:	f8c7 3450 	str.w	r3, [r7, #1104]	; 0x450
 8004222:	e014      	b.n	800424e <f_open+0x162>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8004224:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8004228:	330b      	adds	r3, #11
 800422a:	781b      	ldrb	r3, [r3, #0]
 800422c:	f003 0311 	and.w	r3, r3, #17
 8004230:	2b00      	cmp	r3, #0
 8004232:	d003      	beq.n	800423c <f_open+0x150>
					res = FR_DENIED;
 8004234:	2307      	movs	r3, #7
 8004236:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 800423a:	e008      	b.n	800424e <f_open+0x162>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800423c:	1dfb      	adds	r3, r7, #7
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	f003 0304 	and.w	r3, r3, #4
 8004244:	2b00      	cmp	r3, #0
 8004246:	d002      	beq.n	800424e <f_open+0x162>
						res = FR_EXIST;
 8004248:	2308      	movs	r3, #8
 800424a:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800424e:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8004252:	2b00      	cmp	r3, #0
 8004254:	f040 80b1 	bne.w	80043ba <f_open+0x2ce>
 8004258:	1dfb      	adds	r3, r7, #7
 800425a:	781b      	ldrb	r3, [r3, #0]
 800425c:	f003 0308 	and.w	r3, r3, #8
 8004260:	2b00      	cmp	r3, #0
 8004262:	f000 80aa 	beq.w	80043ba <f_open+0x2ce>
				dw = GET_FATTIME();				/* Created time */
 8004266:	f001 f925 	bl	80054b4 <get_fattime>
 800426a:	f8c7 044c 	str.w	r0, [r7, #1100]	; 0x44c
				ST_DWORD(dir + DIR_CrtTime, dw);
 800426e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8004272:	330e      	adds	r3, #14
 8004274:	f8d7 244c 	ldr.w	r2, [r7, #1100]	; 0x44c
 8004278:	b2d2      	uxtb	r2, r2
 800427a:	701a      	strb	r2, [r3, #0]
 800427c:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8004280:	b29b      	uxth	r3, r3
 8004282:	0a1b      	lsrs	r3, r3, #8
 8004284:	b29a      	uxth	r2, r3
 8004286:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800428a:	330f      	adds	r3, #15
 800428c:	b2d2      	uxtb	r2, r2
 800428e:	701a      	strb	r2, [r3, #0]
 8004290:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 8004294:	0c1a      	lsrs	r2, r3, #16
 8004296:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800429a:	3310      	adds	r3, #16
 800429c:	b2d2      	uxtb	r2, r2
 800429e:	701a      	strb	r2, [r3, #0]
 80042a0:	f8d7 344c 	ldr.w	r3, [r7, #1100]	; 0x44c
 80042a4:	0e1a      	lsrs	r2, r3, #24
 80042a6:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80042aa:	3311      	adds	r3, #17
 80042ac:	b2d2      	uxtb	r2, r2
 80042ae:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80042b0:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80042b4:	330b      	adds	r3, #11
 80042b6:	2200      	movs	r2, #0
 80042b8:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80042ba:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80042be:	331c      	adds	r3, #28
 80042c0:	2200      	movs	r2, #0
 80042c2:	701a      	strb	r2, [r3, #0]
 80042c4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80042c8:	331d      	adds	r3, #29
 80042ca:	2200      	movs	r2, #0
 80042cc:	701a      	strb	r2, [r3, #0]
 80042ce:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80042d2:	331e      	adds	r3, #30
 80042d4:	2200      	movs	r2, #0
 80042d6:	701a      	strb	r2, [r3, #0]
 80042d8:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80042dc:	331f      	adds	r3, #31
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 80042e2:	f107 0320 	add.w	r3, r7, #32
 80042e6:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80042ea:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 80042ee:	4618      	mov	r0, r3
 80042f0:	f7fe fcf7 	bl	8002ce2 <ld_clust>
 80042f4:	f8c7 0448 	str.w	r0, [r7, #1096]	; 0x448
				st_clust(dir, 0);				/* cluster = 0 */
 80042f8:	2100      	movs	r1, #0
 80042fa:	f8d7 0450 	ldr.w	r0, [r7, #1104]	; 0x450
 80042fe:	f7fe fd1e 	bl	8002d3e <st_clust>
				dj.fs->wflag = 1;
 8004302:	f107 0320 	add.w	r3, r7, #32
 8004306:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800430a:	2201      	movs	r2, #1
 800430c:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				if (cl) {						/* Remove the cluster chain if exist */
 8004310:	f8d7 3448 	ldr.w	r3, [r7, #1096]	; 0x448
 8004314:	2b00      	cmp	r3, #0
 8004316:	d050      	beq.n	80043ba <f_open+0x2ce>
					dw = dj.fs->winsect;
 8004318:	f107 0320 	add.w	r3, r7, #32
 800431c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004320:	f8d3 342c 	ldr.w	r3, [r3, #1068]	; 0x42c
 8004324:	f8c7 344c 	str.w	r3, [r7, #1100]	; 0x44c
					res = remove_chain(dj.fs, cl);
 8004328:	f107 0320 	add.w	r3, r7, #32
 800432c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004330:	f8d7 1448 	ldr.w	r1, [r7, #1096]	; 0x448
 8004334:	4618      	mov	r0, r3
 8004336:	f7fe f98c 	bl	8002652 <remove_chain>
 800433a:	4603      	mov	r3, r0
 800433c:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
					if (res == FR_OK) {
 8004340:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8004344:	2b00      	cmp	r3, #0
 8004346:	d138      	bne.n	80043ba <f_open+0x2ce>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8004348:	f107 0320 	add.w	r3, r7, #32
 800434c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004350:	f8d7 2448 	ldr.w	r2, [r7, #1096]	; 0x448
 8004354:	3a01      	subs	r2, #1
 8004356:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
						res = move_window(dj.fs, dw);
 800435a:	f107 0320 	add.w	r3, r7, #32
 800435e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004362:	f8d7 144c 	ldr.w	r1, [r7, #1100]	; 0x44c
 8004366:	4618      	mov	r0, r3
 8004368:	f7fd fe4d 	bl	8002006 <move_window>
 800436c:	4603      	mov	r3, r0
 800436e:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8004372:	e022      	b.n	80043ba <f_open+0x2ce>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8004374:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8004378:	2b00      	cmp	r3, #0
 800437a:	d11e      	bne.n	80043ba <f_open+0x2ce>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 800437c:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8004380:	330b      	adds	r3, #11
 8004382:	781b      	ldrb	r3, [r3, #0]
 8004384:	f003 0310 	and.w	r3, r3, #16
 8004388:	2b00      	cmp	r3, #0
 800438a:	d005      	beq.n	8004398 <f_open+0x2ac>
					res = FR_NO_FILE;
 800438c:	2304      	movs	r3, #4
 800438e:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
 8004392:	e012      	b.n	80043ba <f_open+0x2ce>
 8004394:	2000022c 	.word	0x2000022c
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8004398:	1dfb      	adds	r3, r7, #7
 800439a:	781b      	ldrb	r3, [r3, #0]
 800439c:	f003 0302 	and.w	r3, r3, #2
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d00a      	beq.n	80043ba <f_open+0x2ce>
 80043a4:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 80043a8:	330b      	adds	r3, #11
 80043aa:	781b      	ldrb	r3, [r3, #0]
 80043ac:	f003 0301 	and.w	r3, r3, #1
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d002      	beq.n	80043ba <f_open+0x2ce>
						res = FR_DENIED;
 80043b4:	2307      	movs	r3, #7
 80043b6:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
				}
			}
		}
		if (res == FR_OK) {
 80043ba:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d13d      	bne.n	800443e <f_open+0x352>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80043c2:	1dfb      	adds	r3, r7, #7
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	f003 0308 	and.w	r3, r3, #8
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d005      	beq.n	80043da <f_open+0x2ee>
				mode |= FA__WRITTEN;
 80043ce:	1dfb      	adds	r3, r7, #7
 80043d0:	1dfa      	adds	r2, r7, #7
 80043d2:	7812      	ldrb	r2, [r2, #0]
 80043d4:	f042 0220 	orr.w	r2, r2, #32
 80043d8:	701a      	strb	r2, [r3, #0]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 80043da:	f107 0320 	add.w	r3, r7, #32
 80043de:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80043e2:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
 80043e6:	f107 030c 	add.w	r3, r7, #12
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
			fp->dir_ptr = dir;
 80043f0:	f107 030c 	add.w	r3, r7, #12
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80043fa:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
#if _FS_LOCK
			fp->lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80043fe:	1dfb      	adds	r3, r7, #7
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	f023 0301 	bic.w	r3, r3, #1
 8004406:	2b00      	cmp	r3, #0
 8004408:	bf14      	ite	ne
 800440a:	2301      	movne	r3, #1
 800440c:	2300      	moveq	r3, #0
 800440e:	b2db      	uxtb	r3, r3
 8004410:	461a      	mov	r2, r3
 8004412:	f107 0320 	add.w	r3, r7, #32
 8004416:	4611      	mov	r1, r2
 8004418:	4618      	mov	r0, r3
 800441a:	f7fd fc85 	bl	8001d28 <inc_lock>
 800441e:	4602      	mov	r2, r0
 8004420:	f107 030c 	add.w	r3, r7, #12
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f8c3 2428 	str.w	r2, [r3, #1064]	; 0x428
			if (!fp->lockid) res = FR_INT_ERR;
 800442a:	f107 030c 	add.w	r3, r7, #12
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8004434:	2b00      	cmp	r3, #0
 8004436:	d102      	bne.n	800443e <f_open+0x352>
 8004438:	2302      	movs	r3, #2
 800443a:	f887 3457 	strb.w	r3, [r7, #1111]	; 0x457
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 800443e:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
 8004442:	2b00      	cmp	r3, #0
 8004444:	d15d      	bne.n	8004502 <f_open+0x416>
			fp->flag = mode;					/* File access mode */
 8004446:	f107 030c 	add.w	r3, r7, #12
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	1dfa      	adds	r2, r7, #7
 800444e:	7812      	ldrb	r2, [r2, #0]
 8004450:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			fp->err = 0;						/* Clear error flag */
 8004454:	f107 030c 	add.w	r3, r7, #12
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8004460:	f107 0320 	add.w	r3, r7, #32
 8004464:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004468:	f8d7 1450 	ldr.w	r1, [r7, #1104]	; 0x450
 800446c:	4618      	mov	r0, r3
 800446e:	f7fe fc38 	bl	8002ce2 <ld_clust>
 8004472:	4602      	mov	r2, r0
 8004474:	f107 030c 	add.w	r3, r7, #12
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 800447e:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 8004482:	331f      	adds	r3, #31
 8004484:	781b      	ldrb	r3, [r3, #0]
 8004486:	061a      	lsls	r2, r3, #24
 8004488:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 800448c:	331e      	adds	r3, #30
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	041b      	lsls	r3, r3, #16
 8004492:	4313      	orrs	r3, r2
 8004494:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 8004498:	321d      	adds	r2, #29
 800449a:	7812      	ldrb	r2, [r2, #0]
 800449c:	0212      	lsls	r2, r2, #8
 800449e:	4313      	orrs	r3, r2
 80044a0:	f8d7 2450 	ldr.w	r2, [r7, #1104]	; 0x450
 80044a4:	321c      	adds	r2, #28
 80044a6:	7812      	ldrb	r2, [r2, #0]
 80044a8:	431a      	orrs	r2, r3
 80044aa:	f107 030c 	add.w	r3, r7, #12
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			fp->fptr = 0;						/* File pointer */
 80044b4:	f107 030c 	add.w	r3, r7, #12
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			fp->dsect = 0;
 80044c0:	f107 030c 	add.w	r3, r7, #12
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	2200      	movs	r2, #0
 80044c8:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
 80044cc:	f107 030c 	add.w	r3, r7, #12
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	2200      	movs	r2, #0
 80044d4:	f8c3 2424 	str.w	r2, [r3, #1060]	; 0x424
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 80044d8:	f107 0320 	add.w	r3, r7, #32
 80044dc:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 80044e0:	f107 030c 	add.w	r3, r7, #12
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
			fp->id = fp->fs->id;
 80044ea:	f107 030c 	add.w	r3, r7, #12
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80044f4:	f8b3 2406 	ldrh.w	r2, [r3, #1030]	; 0x406
 80044f8:	f107 030c 	add.w	r3, r7, #12
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8a3 2404 	strh.w	r2, [r3, #1028]	; 0x404
		}
	}

	LEAVE_FF(dj.fs, res);
 8004502:	f897 3457 	ldrb.w	r3, [r7, #1111]	; 0x457
}
 8004506:	4618      	mov	r0, r3
 8004508:	f507 678b 	add.w	r7, r7, #1112	; 0x458
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b08c      	sub	sp, #48	; 0x30
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	607a      	str	r2, [r7, #4]
 800451c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8004528:	68f8      	ldr	r0, [r7, #12]
 800452a:	f7ff fd63 	bl	8003ff4 <validate>
 800452e:	4603      	mov	r3, r0
 8004530:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004532:	7ffb      	ldrb	r3, [r7, #31]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <f_read+0x2c>
 8004538:	7ffb      	ldrb	r3, [r7, #31]
 800453a:	e18a      	b.n	8004852 <f_read+0x342>
	if (fp->err)								/* Check error */
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004542:	2b00      	cmp	r3, #0
 8004544:	d003      	beq.n	800454e <f_read+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800454c:	e181      	b.n	8004852 <f_read+0x342>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d101      	bne.n	8004560 <f_read+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 800455c:	2307      	movs	r3, #7
 800455e:	e178      	b.n	8004852 <f_read+0x342>
	remain = fp->fsize - fp->fptr;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800456c:	1ad3      	subs	r3, r2, r3
 800456e:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	429a      	cmp	r2, r3
 8004576:	f240 8167 	bls.w	8004848 <f_read+0x338>
 800457a:	69bb      	ldr	r3, [r7, #24]
 800457c:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 800457e:	e163      	b.n	8004848 <f_read+0x338>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004586:	68fa      	ldr	r2, [r7, #12]
 8004588:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 800458c:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8004590:	fbb3 f1f2 	udiv	r1, r3, r2
 8004594:	fb02 f201 	mul.w	r2, r2, r1
 8004598:	1a9b      	subs	r3, r3, r2
 800459a:	2b00      	cmp	r3, #0
 800459c:	f040 810f 	bne.w	80047be <f_read+0x2ae>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80045a6:	68fa      	ldr	r2, [r7, #12]
 80045a8:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80045ac:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80045b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80045b4:	b2da      	uxtb	r2, r3
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80045bc:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80045c0:	3b01      	subs	r3, #1
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	4013      	ands	r3, r2
 80045c6:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 80045c8:	7dfb      	ldrb	r3, [r7, #23]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d139      	bne.n	8004642 <f_read+0x132>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d104      	bne.n	80045e2 <f_read+0xd2>
					clst = fp->sclust;			/* Follow from the origin */
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80045de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80045e0:	e018      	b.n	8004614 <f_read+0x104>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d008      	beq.n	80045fe <f_read+0xee>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80045f2:	4619      	mov	r1, r3
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f7fe f923 	bl	8002840 <clmt_clust>
 80045fa:	62f8      	str	r0, [r7, #44]	; 0x2c
 80045fc:	e00a      	b.n	8004614 <f_read+0x104>
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800460a:	4619      	mov	r1, r3
 800460c:	4610      	mov	r0, r2
 800460e:	f7fd fdf8 	bl	8002202 <get_fat>
 8004612:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8004614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004616:	2b01      	cmp	r3, #1
 8004618:	d805      	bhi.n	8004626 <f_read+0x116>
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	2202      	movs	r2, #2
 800461e:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004622:	2302      	movs	r3, #2
 8004624:	e115      	b.n	8004852 <f_read+0x342>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004628:	f1b3 3fff 	cmp.w	r3, #4294967295
 800462c:	d105      	bne.n	800463a <f_read+0x12a>
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004636:	2301      	movs	r3, #1
 8004638:	e10b      	b.n	8004852 <f_read+0x342>
				fp->clust = clst;				/* Update current cluster */
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800463e:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 800464e:	4619      	mov	r1, r3
 8004650:	4610      	mov	r0, r2
 8004652:	f7fd fdb4 	bl	80021be <clust2sect>
 8004656:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d105      	bne.n	800466a <f_read+0x15a>
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2202      	movs	r2, #2
 8004662:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004666:	2302      	movs	r3, #2
 8004668:	e0f3      	b.n	8004852 <f_read+0x342>
			sect += csect;
 800466a:	7dfb      	ldrb	r3, [r7, #23]
 800466c:	693a      	ldr	r2, [r7, #16]
 800466e:	4413      	add	r3, r2
 8004670:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004678:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800467c:	461a      	mov	r2, r3
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	fbb3 f3f2 	udiv	r3, r3, r2
 8004684:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8004686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004688:	2b00      	cmp	r3, #0
 800468a:	d056      	beq.n	800473a <f_read+0x22a>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 800468c:	7dfa      	ldrb	r2, [r7, #23]
 800468e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004690:	4413      	add	r3, r2
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8004698:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 800469c:	4293      	cmp	r3, r2
 800469e:	d908      	bls.n	80046b2 <f_read+0x1a2>
					cc = fp->fs->csize - csect;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80046a6:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 80046aa:	461a      	mov	r2, r3
 80046ac:	7dfb      	ldrb	r3, [r7, #23]
 80046ae:	1ad3      	subs	r3, r2, r3
 80046b0:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80046b8:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80046bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	6a39      	ldr	r1, [r7, #32]
 80046c2:	f7fd f9c7 	bl	8001a54 <disk_read>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d005      	beq.n	80046d8 <f_read+0x1c8>
					ABORT(fp->fs, FR_DISK_ERR);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80046d4:	2301      	movs	r3, #1
 80046d6:	e0bc      	b.n	8004852 <f_read+0x342>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win.d8, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80046de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d01e      	beq.n	8004724 <f_read+0x214>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	1ad3      	subs	r3, r2, r3
 80046f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046f2:	429a      	cmp	r2, r3
 80046f4:	d916      	bls.n	8004724 <f_read+0x214>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf.d8, SS(fp->fs));
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80046fc:	693b      	ldr	r3, [r7, #16]
 80046fe:	1ad3      	subs	r3, r2, r3
 8004700:	68fa      	ldr	r2, [r7, #12]
 8004702:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8004706:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 800470a:	fb02 f303 	mul.w	r3, r2, r3
 800470e:	6a3a      	ldr	r2, [r7, #32]
 8004710:	18d0      	adds	r0, r2, r3
 8004712:	68f9      	ldr	r1, [r7, #12]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800471a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800471e:	461a      	mov	r2, r3
 8004720:	f7fd f9f6 	bl	8001b10 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800472a:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 800472e:	461a      	mov	r2, r3
 8004730:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004732:	fb02 f303 	mul.w	r3, r2, r3
 8004736:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8004738:	e070      	b.n	800481c <f_read+0x30c>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8004740:	693a      	ldr	r2, [r7, #16]
 8004742:	429a      	cmp	r2, r3
 8004744:	d037      	beq.n	80047b6 <f_read+0x2a6>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800474c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d01d      	beq.n	8004790 <f_read+0x280>
					if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800475a:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800475e:	68f9      	ldr	r1, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004766:	2301      	movs	r3, #1
 8004768:	f7fd f994 	bl	8001a94 <disk_write>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <f_read+0x26e>
						ABORT(fp->fs, FR_DISK_ERR);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2201      	movs	r2, #1
 8004776:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800477a:	2301      	movs	r3, #1
 800477c:	e069      	b.n	8004852 <f_read+0x342>
					fp->flag &= ~FA__DIRTY;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004784:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004788:	b2da      	uxtb	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)	/* Fill sector cache */
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004796:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 800479a:	68f9      	ldr	r1, [r7, #12]
 800479c:	2301      	movs	r3, #1
 800479e:	693a      	ldr	r2, [r7, #16]
 80047a0:	f7fd f958 	bl	8001a54 <disk_read>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <f_read+0x2a6>
					ABORT(fp->fs, FR_DISK_ERR);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80047b2:	2301      	movs	r3, #1
 80047b4:	e04d      	b.n	8004852 <f_read+0x342>
			}
#endif
			fp->dsect = sect;
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80047c4:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80047c8:	4618      	mov	r0, r3
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80047d6:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80047da:	fbb3 f1f2 	udiv	r1, r3, r2
 80047de:	fb02 f201 	mul.w	r2, r2, r1
 80047e2:	1a9b      	subs	r3, r3, r2
 80047e4:	1ac3      	subs	r3, r0, r3
 80047e6:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 80047e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d901      	bls.n	80047f4 <f_read+0x2e4>
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf.d8[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80047fa:	68fa      	ldr	r2, [r7, #12]
 80047fc:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8004800:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8004804:	fbb3 f1f2 	udiv	r1, r3, r2
 8004808:	fb02 f201 	mul.w	r2, r2, r1
 800480c:	1a9b      	subs	r3, r3, r2
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	4413      	add	r3, r2
 8004812:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004814:	4619      	mov	r1, r3
 8004816:	6a38      	ldr	r0, [r7, #32]
 8004818:	f7fd f97a 	bl	8001b10 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 800481c:	6a3a      	ldr	r2, [r7, #32]
 800481e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004820:	4413      	add	r3, r2
 8004822:	623b      	str	r3, [r7, #32]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 800482a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800482c:	441a      	add	r2, r3
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483a:	441a      	add	r2, r3
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	601a      	str	r2, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004844:	1ad3      	subs	r3, r2, r3
 8004846:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2b00      	cmp	r3, #0
 800484c:	f47f ae98 	bne.w	8004580 <f_read+0x70>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8004850:	2300      	movs	r3, #0
}
 8004852:	4618      	mov	r0, r3
 8004854:	3730      	adds	r7, #48	; 0x30
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 800485a:	b580      	push	{r7, lr}
 800485c:	b08a      	sub	sp, #40	; 0x28
 800485e:	af00      	add	r7, sp, #0
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
 8004866:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2200      	movs	r2, #0
 8004870:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8004872:	68f8      	ldr	r0, [r7, #12]
 8004874:	f7ff fbbe 	bl	8003ff4 <validate>
 8004878:	4603      	mov	r3, r0
 800487a:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 800487c:	7dfb      	ldrb	r3, [r7, #23]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d001      	beq.n	8004886 <f_write+0x2c>
 8004882:	7dfb      	ldrb	r3, [r7, #23]
 8004884:	e1cc      	b.n	8004c20 <f_write+0x3c6>
	if (fp->err)							/* Check error */
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 800488c:	2b00      	cmp	r3, #0
 800488e:	d003      	beq.n	8004898 <f_write+0x3e>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004896:	e1c3      	b.n	8004c20 <f_write+0x3c6>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800489e:	f003 0302 	and.w	r3, r3, #2
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d101      	bne.n	80048aa <f_write+0x50>
		LEAVE_FF(fp->fs, FR_DENIED);
 80048a6:	2307      	movs	r3, #7
 80048a8:	e1ba      	b.n	8004c20 <f_write+0x3c6>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	441a      	add	r2, r3
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80048ba:	429a      	cmp	r2, r3
 80048bc:	f080 8192 	bcs.w	8004be4 <f_write+0x38a>
 80048c0:	2300      	movs	r3, #0
 80048c2:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 80048c4:	e18e      	b.n	8004be4 <f_write+0x38a>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80048d2:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80048d6:	fbb3 f1f2 	udiv	r1, r3, r2
 80048da:	fb02 f201 	mul.w	r2, r2, r1
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	f040 8131 	bne.w	8004b48 <f_write+0x2ee>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80048ec:	68fa      	ldr	r2, [r7, #12]
 80048ee:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 80048f2:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 80048f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004902:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8004906:	3b01      	subs	r3, #1
 8004908:	b2db      	uxtb	r3, r3
 800490a:	4013      	ands	r3, r2
 800490c:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 800490e:	7dbb      	ldrb	r3, [r7, #22]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d151      	bne.n	80049b8 <f_write+0x15e>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800491a:	2b00      	cmp	r3, #0
 800491c:	d10f      	bne.n	800493e <f_write+0xe4>
					clst = fp->sclust;		/* Follow from the origin */
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8004924:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8004926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004928:	2b00      	cmp	r3, #0
 800492a:	d121      	bne.n	8004970 <f_write+0x116>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004932:	2100      	movs	r1, #0
 8004934:	4618      	mov	r0, r3
 8004936:	f7fd fee6 	bl	8002706 <create_chain>
 800493a:	6278      	str	r0, [r7, #36]	; 0x24
 800493c:	e018      	b.n	8004970 <f_write+0x116>
				} else {					/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8004944:	2b00      	cmp	r3, #0
 8004946:	d008      	beq.n	800495a <f_write+0x100>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800494e:	4619      	mov	r1, r3
 8004950:	68f8      	ldr	r0, [r7, #12]
 8004952:	f7fd ff75 	bl	8002840 <clmt_clust>
 8004956:	6278      	str	r0, [r7, #36]	; 0x24
 8004958:	e00a      	b.n	8004970 <f_write+0x116>
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004966:	4619      	mov	r1, r3
 8004968:	4610      	mov	r0, r2
 800496a:	f7fd fecc 	bl	8002706 <create_chain>
 800496e:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004972:	2b00      	cmp	r3, #0
 8004974:	f000 813b 	beq.w	8004bee <f_write+0x394>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	2b01      	cmp	r3, #1
 800497c:	d105      	bne.n	800498a <f_write+0x130>
 800497e:	68fb      	ldr	r3, [r7, #12]
 8004980:	2202      	movs	r2, #2
 8004982:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004986:	2302      	movs	r3, #2
 8004988:	e14a      	b.n	8004c20 <f_write+0x3c6>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 800498a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800498c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004990:	d105      	bne.n	800499e <f_write+0x144>
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	2201      	movs	r2, #1
 8004996:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800499a:	2301      	movs	r3, #1
 800499c:	e140      	b.n	8004c20 <f_write+0x3c6>
				fp->clust = clst;			/* Update current cluster */
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049a2:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d103      	bne.n	80049b8 <f_write+0x15e>
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80049b4:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80049be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d01d      	beq.n	8004a02 <f_write+0x1a8>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80049cc:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80049d0:	68f9      	ldr	r1, [r7, #12]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 80049d8:	2301      	movs	r3, #1
 80049da:	f7fd f85b 	bl	8001a94 <disk_write>
 80049de:	4603      	mov	r3, r0
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d005      	beq.n	80049f0 <f_write+0x196>
					ABORT(fp->fs, FR_DISK_ERR);
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80049ec:	2301      	movs	r3, #1
 80049ee:	e117      	b.n	8004c20 <f_write+0x3c6>
				fp->flag &= ~FA__DIRTY;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80049f6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049fa:	b2da      	uxtb	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004a08:	68fb      	ldr	r3, [r7, #12]
 8004a0a:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004a0e:	4619      	mov	r1, r3
 8004a10:	4610      	mov	r0, r2
 8004a12:	f7fd fbd4 	bl	80021be <clust2sect>
 8004a16:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8004a18:	693b      	ldr	r3, [r7, #16]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d105      	bne.n	8004a2a <f_write+0x1d0>
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	2202      	movs	r2, #2
 8004a22:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004a26:	2302      	movs	r3, #2
 8004a28:	e0fa      	b.n	8004c20 <f_write+0x3c6>
			sect += csect;
 8004a2a:	7dbb      	ldrb	r3, [r7, #22]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	4413      	add	r3, r2
 8004a30:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004a38:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8004a3c:	461a      	mov	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004a44:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8004a46:	69fb      	ldr	r3, [r7, #28]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d058      	beq.n	8004afe <f_write+0x2a4>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8004a4c:	7dba      	ldrb	r2, [r7, #22]
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	4413      	add	r3, r2
 8004a52:	68fa      	ldr	r2, [r7, #12]
 8004a54:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8004a58:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d908      	bls.n	8004a72 <f_write+0x218>
					cc = fp->fs->csize - csect;
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004a66:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8004a6a:	461a      	mov	r2, r3
 8004a6c:	7dbb      	ldrb	r3, [r7, #22]
 8004a6e:	1ad3      	subs	r3, r2, r3
 8004a70:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004a78:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8004a7c:	69fb      	ldr	r3, [r7, #28]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	69b9      	ldr	r1, [r7, #24]
 8004a82:	f7fd f807 	bl	8001a94 <disk_write>
 8004a86:	4603      	mov	r3, r0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <f_write+0x23e>
					ABORT(fp->fs, FR_DISK_ERR);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2201      	movs	r2, #1
 8004a90:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004a94:	2301      	movs	r3, #1
 8004a96:	e0c3      	b.n	8004c20 <f_write+0x3c6>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win.d8, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	1ad3      	subs	r3, r2, r3
 8004aa2:	69fa      	ldr	r2, [r7, #28]
 8004aa4:	429a      	cmp	r2, r3
 8004aa6:	d91f      	bls.n	8004ae8 <f_write+0x28e>
					mem_cpy(fp->buf.d8, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8004aa8:	68f8      	ldr	r0, [r7, #12]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	1ad3      	subs	r3, r2, r3
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8004aba:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8004abe:	fb02 f303 	mul.w	r3, r2, r3
 8004ac2:	69ba      	ldr	r2, [r7, #24]
 8004ac4:	18d1      	adds	r1, r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004acc:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8004ad0:	461a      	mov	r2, r3
 8004ad2:	f7fd f81d 	bl	8001b10 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ae0:	b2da      	uxtb	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004aee:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8004af2:	461a      	mov	r2, r3
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	fb02 f303 	mul.w	r3, r2, r3
 8004afa:	623b      	str	r3, [r7, #32]
				continue;
 8004afc:	e05c      	b.n	8004bb8 <f_write+0x35e>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d01a      	beq.n	8004b40 <f_write+0x2e6>
				if (fp->fptr < fp->fsize &&
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d212      	bcs.n	8004b40 <f_write+0x2e6>
					disk_read(fp->fs->drv, fp->buf.d8, sect, 1) != RES_OK)
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004b20:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8004b24:	68f9      	ldr	r1, [r7, #12]
 8004b26:	2301      	movs	r3, #1
 8004b28:	693a      	ldr	r2, [r7, #16]
 8004b2a:	f7fc ff93 	bl	8001a54 <disk_read>
 8004b2e:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d005      	beq.n	8004b40 <f_write+0x2e6>
						ABORT(fp->fs, FR_DISK_ERR);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2201      	movs	r2, #1
 8004b38:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e06f      	b.n	8004c20 <f_write+0x3c6>
			}
#endif
			fp->dsect = sect;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	693a      	ldr	r2, [r7, #16]
 8004b44:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004b4e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8004b52:	4618      	mov	r0, r3
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004b5a:	68fa      	ldr	r2, [r7, #12]
 8004b5c:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8004b60:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8004b64:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b68:	fb02 f201 	mul.w	r2, r2, r1
 8004b6c:	1a9b      	subs	r3, r3, r2
 8004b6e:	1ac3      	subs	r3, r0, r3
 8004b70:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8004b72:	6a3a      	ldr	r2, [r7, #32]
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	d901      	bls.n	8004b7e <f_write+0x324>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf.d8[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004b84:	68fa      	ldr	r2, [r7, #12]
 8004b86:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8004b8a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8004b8e:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b92:	fb02 f201 	mul.w	r2, r2, r1
 8004b96:	1a9b      	subs	r3, r3, r2
 8004b98:	68fa      	ldr	r2, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	6a3a      	ldr	r2, [r7, #32]
 8004b9e:	69b9      	ldr	r1, [r7, #24]
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	f7fc ffb5 	bl	8001b10 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004bac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004bb0:	b2da      	uxtb	r2, r3
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	6a3b      	ldr	r3, [r7, #32]
 8004bbc:	4413      	add	r3, r2
 8004bbe:	61bb      	str	r3, [r7, #24]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004bc6:	6a3b      	ldr	r3, [r7, #32]
 8004bc8:	441a      	add	r2, r3
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681a      	ldr	r2, [r3, #0]
 8004bd4:	6a3b      	ldr	r3, [r7, #32]
 8004bd6:	441a      	add	r2, r3
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	601a      	str	r2, [r3, #0]
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	6a3b      	ldr	r3, [r7, #32]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	f47f ae6d 	bne.w	80048c6 <f_write+0x6c>
 8004bec:	e000      	b.n	8004bf0 <f_write+0x396>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8004bee:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d905      	bls.n	8004c0c <f_write+0x3b2>
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004c12:	f043 0320 	orr.w	r3, r3, #32
 8004c16:	b2da      	uxtb	r2, r3
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406

	LEAVE_FF(fp->fs, FR_OK);
 8004c1e:	2300      	movs	r3, #0
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3728      	adds	r7, #40	; 0x28
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b086      	sub	sp, #24
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 8004c30:	6878      	ldr	r0, [r7, #4]
 8004c32:	f7ff f9df 	bl	8003ff4 <validate>
 8004c36:	4603      	mov	r3, r0
 8004c38:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8004c3a:	7dfb      	ldrb	r3, [r7, #23]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	f040 80a8 	bne.w	8004d92 <f_sync+0x16a>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004c48:	f003 0320 	and.w	r3, r3, #32
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	f000 80a0 	beq.w	8004d92 <f_sync+0x16a>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d019      	beq.n	8004c94 <f_sync+0x6c>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004c66:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8004c6a:	6879      	ldr	r1, [r7, #4]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004c72:	2301      	movs	r3, #1
 8004c74:	f7fc ff0e 	bl	8001a94 <disk_write>
 8004c78:	4603      	mov	r3, r0
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d001      	beq.n	8004c82 <f_sync+0x5a>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e088      	b.n	8004d94 <f_sync+0x16c>
				fp->flag &= ~FA__DIRTY;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004c88:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c8c:	b2da      	uxtb	r2, r3
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
 8004ca0:	4619      	mov	r1, r3
 8004ca2:	4610      	mov	r0, r2
 8004ca4:	f7fd f9af 	bl	8002006 <move_window>
 8004ca8:	4603      	mov	r3, r0
 8004caa:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 8004cac:	7dfb      	ldrb	r3, [r7, #23]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d16f      	bne.n	8004d92 <f_sync+0x16a>
				dir = fp->dir_ptr;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004cb8:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8004cba:	693b      	ldr	r3, [r7, #16]
 8004cbc:	330b      	adds	r3, #11
 8004cbe:	781a      	ldrb	r2, [r3, #0]
 8004cc0:	693b      	ldr	r3, [r7, #16]
 8004cc2:	330b      	adds	r3, #11
 8004cc4:	f042 0220 	orr.w	r2, r2, #32
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	331c      	adds	r3, #28
 8004cd6:	b2d2      	uxtb	r2, r2
 8004cd8:	701a      	strb	r2, [r3, #0]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	0a1b      	lsrs	r3, r3, #8
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	331d      	adds	r3, #29
 8004cea:	b2d2      	uxtb	r2, r2
 8004cec:	701a      	strb	r2, [r3, #0]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004cf4:	0c1a      	lsrs	r2, r3, #16
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	331e      	adds	r3, #30
 8004cfa:	b2d2      	uxtb	r2, r2
 8004cfc:	701a      	strb	r2, [r3, #0]
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004d04:	0e1a      	lsrs	r2, r3, #24
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	331f      	adds	r3, #31
 8004d0a:	b2d2      	uxtb	r2, r2
 8004d0c:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8004d14:	4619      	mov	r1, r3
 8004d16:	6938      	ldr	r0, [r7, #16]
 8004d18:	f7fe f811 	bl	8002d3e <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8004d1c:	f000 fbca 	bl	80054b4 <get_fattime>
 8004d20:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	3316      	adds	r3, #22
 8004d26:	68fa      	ldr	r2, [r7, #12]
 8004d28:	b2d2      	uxtb	r2, r2
 8004d2a:	701a      	strb	r2, [r3, #0]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	0a1b      	lsrs	r3, r3, #8
 8004d32:	b29a      	uxth	r2, r3
 8004d34:	693b      	ldr	r3, [r7, #16]
 8004d36:	3317      	adds	r3, #23
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	701a      	strb	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	0c1a      	lsrs	r2, r3, #16
 8004d40:	693b      	ldr	r3, [r7, #16]
 8004d42:	3318      	adds	r3, #24
 8004d44:	b2d2      	uxtb	r2, r2
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	0e1a      	lsrs	r2, r3, #24
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	3319      	adds	r3, #25
 8004d50:	b2d2      	uxtb	r2, r2
 8004d52:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8004d54:	693b      	ldr	r3, [r7, #16]
 8004d56:	3312      	adds	r3, #18
 8004d58:	2200      	movs	r2, #0
 8004d5a:	701a      	strb	r2, [r3, #0]
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	3313      	adds	r3, #19
 8004d60:	2200      	movs	r2, #0
 8004d62:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004d6a:	f023 0320 	bic.w	r3, r3, #32
 8004d6e:	b2da      	uxtb	r2, r3
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
				fp->fs->wflag = 1;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	f883 2404 	strb.w	r2, [r3, #1028]	; 0x404
				res = sync_fs(fp->fs);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004d88:	4618      	mov	r0, r3
 8004d8a:	f7fd f96a 	bl	8002062 <sync_fs>
 8004d8e:	4603      	mov	r3, r0
 8004d90:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 8004d92:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d94:	4618      	mov	r0, r3
 8004d96:	3718      	adds	r7, #24
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	bd80      	pop	{r7, pc}

08004d9c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b084      	sub	sp, #16
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8004da4:	6878      	ldr	r0, [r7, #4]
 8004da6:	f7ff ff3f 	bl	8004c28 <f_sync>
 8004daa:	4603      	mov	r3, r0
 8004dac:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8004dae:	7bfb      	ldrb	r3, [r7, #15]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d116      	bne.n	8004de2 <f_close+0x46>
#endif
	{
		res = validate(fp);				/* Lock volume */
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f7ff f91d 	bl	8003ff4 <validate>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004dbe:	7bfb      	ldrb	r3, [r7, #15]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d10e      	bne.n	8004de2 <f_close+0x46>
#if _FS_REENTRANT
			FATFS *fs = fp->fs;
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	f8d3 3428 	ldr.w	r3, [r3, #1064]	; 0x428
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd f864 	bl	8001e98 <dec_lock>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8004dd4:	7bfb      	ldrb	r3, [r7, #15]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d103      	bne.n	8004de2 <f_close+0x46>
#endif
				fp->fs = 0;				/* Invalidate file object */
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8004de2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de4:	4618      	mov	r0, r3
 8004de6:	3710      	adds	r7, #16
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bd80      	pop	{r7, pc}

08004dec <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b090      	sub	sp, #64	; 0x40
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7ff f8fc 	bl	8003ff4 <validate>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8004e02:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d002      	beq.n	8004e10 <f_lseek+0x24>
 8004e0a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8004e0e:	e274      	b.n	80052fa <f_lseek+0x50e>
	if (fp->err)						/* Check error */
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <f_lseek+0x36>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	f893 3407 	ldrb.w	r3, [r3, #1031]	; 0x407
 8004e20:	e26b      	b.n	80052fa <f_lseek+0x50e>

#if _USE_FASTSEEK
	if (fp->cltbl) {	/* Fast seek */
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 8100 	beq.w	800502e <f_lseek+0x242>
		if (ofs == CREATE_LINKMAP) {	/* Create CLMT */
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e34:	d164      	bne.n	8004f00 <f_lseek+0x114>
			tbl = fp->cltbl;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8004e3c:	627b      	str	r3, [r7, #36]	; 0x24
			tlen = *tbl++; ulen = 2;	/* Given table size and required table size */
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e40:	1d1a      	adds	r2, r3, #4
 8004e42:	627a      	str	r2, [r7, #36]	; 0x24
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	617b      	str	r3, [r7, #20]
 8004e48:	2302      	movs	r3, #2
 8004e4a:	62bb      	str	r3, [r7, #40]	; 0x28
			cl = fp->sclust;			/* Top of the chain */
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 8004e52:	633b      	str	r3, [r7, #48]	; 0x30
			if (cl) {
 8004e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d041      	beq.n	8004ede <f_lseek+0xf2>
				do {
					/* Get a fragment */
					tcl = cl; ncl = 0; ulen += 2;	/* Top, length and used items */
 8004e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	2300      	movs	r3, #0
 8004e60:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004e62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e64:	3302      	adds	r3, #2
 8004e66:	62bb      	str	r3, [r7, #40]	; 0x28
					do {
						pcl = cl; ncl++;
 8004e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e6a:	60fb      	str	r3, [r7, #12]
 8004e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e6e:	3301      	adds	r3, #1
 8004e70:	62fb      	str	r3, [r7, #44]	; 0x2c
						cl = get_fat(fp->fs, cl);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004e78:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f7fd f9c1 	bl	8002202 <get_fat>
 8004e80:	6338      	str	r0, [r7, #48]	; 0x30
						if (cl <= 1) ABORT(fp->fs, FR_INT_ERR);
 8004e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	d805      	bhi.n	8004e94 <f_lseek+0xa8>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004e90:	2302      	movs	r3, #2
 8004e92:	e232      	b.n	80052fa <f_lseek+0x50e>
						if (cl == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8004e94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e9a:	d105      	bne.n	8004ea8 <f_lseek+0xbc>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e228      	b.n	80052fa <f_lseek+0x50e>
					} while (cl == pcl + 1);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d0da      	beq.n	8004e68 <f_lseek+0x7c>
					if (ulen <= tlen) {		/* Store the length and top of the fragment */
 8004eb2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	d809      	bhi.n	8004ece <f_lseek+0xe2>
						*tbl++ = ncl; *tbl++ = tcl;
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	1d1a      	adds	r2, r3, #4
 8004ebe:	627a      	str	r2, [r7, #36]	; 0x24
 8004ec0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004ec2:	601a      	str	r2, [r3, #0]
 8004ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ec6:	1d1a      	adds	r2, r3, #4
 8004ec8:	627a      	str	r2, [r7, #36]	; 0x24
 8004eca:	693a      	ldr	r2, [r7, #16]
 8004ecc:	601a      	str	r2, [r3, #0]
					}
				} while (cl < fp->fs->n_fatent);	/* Repeat until end of chain */
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004ed4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d3bd      	bcc.n	8004e5a <f_lseek+0x6e>
			}
			*fp->cltbl = ulen;	/* Number of items used */
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	f8d3 3424 	ldr.w	r3, [r3, #1060]	; 0x424
 8004ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004ee6:	601a      	str	r2, [r3, #0]
			if (ulen <= tlen)
 8004ee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	429a      	cmp	r2, r3
 8004eee:	d803      	bhi.n	8004ef8 <f_lseek+0x10c>
				*tbl = 0;		/* Terminate table */
 8004ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef2:	2200      	movs	r2, #0
 8004ef4:	601a      	str	r2, [r3, #0]
 8004ef6:	e1fe      	b.n	80052f6 <f_lseek+0x50a>
			else
				res = FR_NOT_ENOUGH_CORE;	/* Given table size is smaller than required */
 8004ef8:	2311      	movs	r3, #17
 8004efa:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8004efe:	e1fa      	b.n	80052f6 <f_lseek+0x50a>

		} else {						/* Fast seek */
			if (ofs > fp->fsize)		/* Clip offset at the file size */
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004f06:	683a      	ldr	r2, [r7, #0]
 8004f08:	429a      	cmp	r2, r3
 8004f0a:	d903      	bls.n	8004f14 <f_lseek+0x128>
				ofs = fp->fsize;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8004f12:	603b      	str	r3, [r7, #0]
			fp->fptr = ofs;				/* Set file pointer */
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	683a      	ldr	r2, [r7, #0]
 8004f18:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
			if (ofs) {
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	f000 81e9 	beq.w	80052f6 <f_lseek+0x50a>
				fp->clust = clmt_clust(fp, ofs - 1);
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	4619      	mov	r1, r3
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	f7fd fc88 	bl	8002840 <clmt_clust>
 8004f30:	4602      	mov	r2, r0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
				dsc = clust2sect(fp->fs, fp->clust);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004f44:	4619      	mov	r1, r3
 8004f46:	4610      	mov	r0, r2
 8004f48:	f7fd f939 	bl	80021be <clust2sect>
 8004f4c:	61b8      	str	r0, [r7, #24]
				if (!dsc) ABORT(fp->fs, FR_INT_ERR);
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d105      	bne.n	8004f60 <f_lseek+0x174>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004f5c:	2302      	movs	r3, #2
 8004f5e:	e1cc      	b.n	80052fa <f_lseek+0x50e>
				dsc += (ofs - 1) / SS(fp->fs) & (fp->fs->csize - 1);
 8004f60:	683b      	ldr	r3, [r7, #0]
 8004f62:	3b01      	subs	r3, #1
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8004f6a:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8004f6e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004f72:	687a      	ldr	r2, [r7, #4]
 8004f74:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8004f78:	f892 2402 	ldrb.w	r2, [r2, #1026]	; 0x402
 8004f7c:	3a01      	subs	r2, #1
 8004f7e:	4013      	ands	r3, r2
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4413      	add	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
				if (fp->fptr % SS(fp->fs) && dsc != fp->dsect) {	/* Refill sector cache if needed */
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8004f8c:	687a      	ldr	r2, [r7, #4]
 8004f8e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8004f92:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8004f96:	fbb3 f1f2 	udiv	r1, r3, r2
 8004f9a:	fb02 f201 	mul.w	r2, r2, r1
 8004f9e:	1a9b      	subs	r3, r3, r2
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	f000 81a8 	beq.w	80052f6 <f_lseek+0x50a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 8004fac:	69ba      	ldr	r2, [r7, #24]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	f000 81a1 	beq.w	80052f6 <f_lseek+0x50a>
#if !_FS_TINY
#if !_FS_READONLY
					if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004fba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d01d      	beq.n	8004ffe <f_lseek+0x212>
						if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8004fc8:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8004fcc:	6879      	ldr	r1, [r7, #4]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	f7fc fd5d 	bl	8001a94 <disk_write>
 8004fda:	4603      	mov	r3, r0
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d005      	beq.n	8004fec <f_lseek+0x200>
							ABORT(fp->fs, FR_DISK_ERR);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2201      	movs	r2, #1
 8004fe4:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e186      	b.n	80052fa <f_lseek+0x50e>
						fp->flag &= ~FA__DIRTY;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8004ff2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ff6:	b2da      	uxtb	r2, r3
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
					}
#endif
					if (disk_read(fp->fs->drv, fp->buf.d8, dsc, 1) != RES_OK)	/* Load current sector */
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005004:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8005008:	6879      	ldr	r1, [r7, #4]
 800500a:	2301      	movs	r3, #1
 800500c:	69ba      	ldr	r2, [r7, #24]
 800500e:	f7fc fd21 	bl	8001a54 <disk_read>
 8005012:	4603      	mov	r3, r0
 8005014:	2b00      	cmp	r3, #0
 8005016:	d005      	beq.n	8005024 <f_lseek+0x238>
						ABORT(fp->fs, FR_DISK_ERR);
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2201      	movs	r2, #1
 800501c:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8005020:	2301      	movs	r3, #1
 8005022:	e16a      	b.n	80052fa <f_lseek+0x50e>
#endif
					fp->dsect = dsc;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	69ba      	ldr	r2, [r7, #24]
 8005028:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 800502c:	e163      	b.n	80052f6 <f_lseek+0x50a>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d90a      	bls.n	8005050 <f_lseek+0x264>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d103      	bne.n	8005050 <f_lseek+0x264>
#endif
			) ofs = fp->fsize;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800504e:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8005056:	623b      	str	r3, [r7, #32]
		fp->fptr = nsect = 0;
 8005058:	2300      	movs	r3, #0
 800505a:	637b      	str	r3, [r7, #52]	; 0x34
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005060:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
		if (ofs) {
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	2b00      	cmp	r3, #0
 8005068:	f000 80dd 	beq.w	8005226 <f_lseek+0x43a>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005072:	f893 3402 	ldrb.w	r3, [r3, #1026]	; 0x402
 8005076:	461a      	mov	r2, r3
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800507e:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005082:	fb03 f302 	mul.w	r3, r3, r2
 8005086:	61fb      	str	r3, [r7, #28]
			if (ifptr > 0 &&
 8005088:	6a3b      	ldr	r3, [r7, #32]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d01e      	beq.n	80050cc <f_lseek+0x2e0>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 800508e:	683b      	ldr	r3, [r7, #0]
 8005090:	1e5a      	subs	r2, r3, #1
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	fbb2 f2f3 	udiv	r2, r2, r3
 8005098:	6a3b      	ldr	r3, [r7, #32]
 800509a:	1e59      	subs	r1, r3, #1
 800509c:	69fb      	ldr	r3, [r7, #28]
 800509e:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 80050a2:	429a      	cmp	r2, r3
 80050a4:	d312      	bcc.n	80050cc <f_lseek+0x2e0>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 80050a6:	6a3b      	ldr	r3, [r7, #32]
 80050a8:	1e5a      	subs	r2, r3, #1
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	425b      	negs	r3, r3
 80050ae:	401a      	ands	r2, r3
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
				ofs -= fp->fptr;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80050bc:	683a      	ldr	r2, [r7, #0]
 80050be:	1ad3      	subs	r3, r2, r3
 80050c0:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 80050c8:	63bb      	str	r3, [r7, #56]	; 0x38
 80050ca:	e029      	b.n	8005120 <f_lseek+0x334>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f8d3 3410 	ldr.w	r3, [r3, #1040]	; 0x410
 80050d2:	63bb      	str	r3, [r7, #56]	; 0x38
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80050d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d11e      	bne.n	8005118 <f_lseek+0x32c>
					clst = create_chain(fp->fs, 0);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80050e0:	2100      	movs	r1, #0
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7fd fb0f 	bl	8002706 <create_chain>
 80050e8:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80050ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050ec:	2b01      	cmp	r3, #1
 80050ee:	d105      	bne.n	80050fc <f_lseek+0x310>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80050f8:	2302      	movs	r3, #2
 80050fa:	e0fe      	b.n	80052fa <f_lseek+0x50e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80050fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005102:	d105      	bne.n	8005110 <f_lseek+0x324>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800510c:	2301      	movs	r3, #1
 800510e:	e0f4      	b.n	80052fa <f_lseek+0x50e>
					fp->sclust = clst;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005114:	f8c3 2410 	str.w	r2, [r3, #1040]	; 0x410
				}
#endif
				fp->clust = clst;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800511c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
			}
			if (clst != 0) {
 8005120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005122:	2b00      	cmp	r3, #0
 8005124:	d07f      	beq.n	8005226 <f_lseek+0x43a>
				while (ofs > bcs) {						/* Cluster following loop */
 8005126:	e047      	b.n	80051b8 <f_lseek+0x3cc>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d00d      	beq.n	8005152 <f_lseek+0x366>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 800513c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800513e:	4618      	mov	r0, r3
 8005140:	f7fd fae1 	bl	8002706 <create_chain>
 8005144:	63b8      	str	r0, [r7, #56]	; 0x38
						if (clst == 0) {				/* When disk gets full, clip file size */
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10a      	bne.n	8005162 <f_lseek+0x376>
							ofs = bcs; break;
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	603b      	str	r3, [r7, #0]
 8005150:	e036      	b.n	80051c0 <f_lseek+0x3d4>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005158:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800515a:	4618      	mov	r0, r3
 800515c:	f7fd f851 	bl	8002202 <get_fat>
 8005160:	63b8      	str	r0, [r7, #56]	; 0x38
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005164:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005168:	d105      	bne.n	8005176 <f_lseek+0x38a>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8005172:	2301      	movs	r3, #1
 8005174:	e0c1      	b.n	80052fa <f_lseek+0x50e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8005176:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005178:	2b01      	cmp	r3, #1
 800517a:	d907      	bls.n	800518c <f_lseek+0x3a0>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005182:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8005186:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005188:	429a      	cmp	r2, r3
 800518a:	d305      	bcc.n	8005198 <f_lseek+0x3ac>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2202      	movs	r2, #2
 8005190:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8005194:	2302      	movs	r3, #2
 8005196:	e0b0      	b.n	80052fa <f_lseek+0x50e>
					fp->clust = clst;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800519c:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
					fp->fptr += bcs;
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	441a      	add	r2, r3
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
					ofs -= bcs;
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	1ad3      	subs	r3, r2, r3
 80051b6:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 80051b8:	683a      	ldr	r2, [r7, #0]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	429a      	cmp	r2, r3
 80051be:	d8b3      	bhi.n	8005128 <f_lseek+0x33c>
				}
				fp->fptr += ofs;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	441a      	add	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
				if (ofs % SS(fp->fs)) {
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80051d6:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 80051da:	461a      	mov	r2, r3
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	fbb3 f1f2 	udiv	r1, r3, r2
 80051e2:	fb02 f201 	mul.w	r2, r2, r1
 80051e6:	1a9b      	subs	r3, r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d01c      	beq.n	8005226 <f_lseek+0x43a>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80051f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fc ffe2 	bl	80021be <clust2sect>
 80051fa:	6378      	str	r0, [r7, #52]	; 0x34
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80051fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d105      	bne.n	800520e <f_lseek+0x422>
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2202      	movs	r2, #2
 8005206:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 800520a:	2302      	movs	r3, #2
 800520c:	e075      	b.n	80052fa <f_lseek+0x50e>
					nsect += ofs / SS(fp->fs);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005214:	f8b3 340a 	ldrh.w	r3, [r3, #1034]	; 0x40a
 8005218:	461a      	mov	r2, r3
 800521a:	683b      	ldr	r3, [r7, #0]
 800521c:	fbb3 f3f2 	udiv	r3, r3, r2
 8005220:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005222:	4413      	add	r3, r2
 8005224:	637b      	str	r3, [r7, #52]	; 0x34
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800522c:	687a      	ldr	r2, [r7, #4]
 800522e:	f8d2 2400 	ldr.w	r2, [r2, #1024]	; 0x400
 8005232:	f8b2 240a 	ldrh.w	r2, [r2, #1034]	; 0x40a
 8005236:	fbb3 f1f2 	udiv	r1, r3, r2
 800523a:	fb02 f201 	mul.w	r2, r2, r1
 800523e:	1a9b      	subs	r3, r3, r2
 8005240:	2b00      	cmp	r3, #0
 8005242:	d041      	beq.n	80052c8 <f_lseek+0x4dc>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
 800524a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800524c:	429a      	cmp	r2, r3
 800524e:	d03b      	beq.n	80052c8 <f_lseek+0x4dc>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 8005256:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800525a:	2b00      	cmp	r3, #0
 800525c:	d01d      	beq.n	800529a <f_lseek+0x4ae>
				if (disk_write(fp->fs->drv, fp->buf.d8, fp->dsect, 1) != RES_OK)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 8005264:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 8005268:	6879      	ldr	r1, [r7, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
 8005270:	2301      	movs	r3, #1
 8005272:	f7fc fc0f 	bl	8001a94 <disk_write>
 8005276:	4603      	mov	r3, r0
 8005278:	2b00      	cmp	r3, #0
 800527a:	d005      	beq.n	8005288 <f_lseek+0x49c>
					ABORT(fp->fs, FR_DISK_ERR);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	2201      	movs	r2, #1
 8005280:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 8005284:	2301      	movs	r3, #1
 8005286:	e038      	b.n	80052fa <f_lseek+0x50e>
				fp->flag &= ~FA__DIRTY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 800528e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005292:	b2da      	uxtb	r2, r3
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf.d8, nsect, 1) != RES_OK)	/* Fill sector cache */
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
 80052a0:	f893 0401 	ldrb.w	r0, [r3, #1025]	; 0x401
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	2301      	movs	r3, #1
 80052a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052aa:	f7fc fbd3 	bl	8001a54 <disk_read>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d005      	beq.n	80052c0 <f_lseek+0x4d4>
				ABORT(fp->fs, FR_DISK_ERR);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2201      	movs	r2, #1
 80052b8:	f883 2407 	strb.w	r2, [r3, #1031]	; 0x407
 80052bc:	2301      	movs	r3, #1
 80052be:	e01c      	b.n	80052fa <f_lseek+0x50e>
#endif
			fp->dsect = nsect;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80052c4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d90e      	bls.n	80052f6 <f_lseek+0x50a>
			fp->fsize = fp->fptr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
			fp->flag |= FA__WRITTEN;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3406 	ldrb.w	r3, [r3, #1030]	; 0x406
 80052ea:	f043 0320 	orr.w	r3, r3, #32
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	f883 2406 	strb.w	r2, [r3, #1030]	; 0x406
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 80052f6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3740      	adds	r7, #64	; 0x40
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the paramter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8005304:	b480      	push	{r7}
 8005306:	b087      	sub	sp, #28
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	4613      	mov	r3, r2
 8005310:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8005312:	2301      	movs	r3, #1
 8005314:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8005316:	2300      	movs	r3, #0
 8005318:	75bb      	strb	r3, [r7, #22]
  
  if(disk.nbr <= _VOLUMES)
 800531a:	4b1f      	ldr	r3, [pc, #124]	; (8005398 <FATFS_LinkDriverEx+0x94>)
 800531c:	7a5b      	ldrb	r3, [r3, #9]
 800531e:	b2db      	uxtb	r3, r3
 8005320:	2b01      	cmp	r3, #1
 8005322:	d831      	bhi.n	8005388 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8005324:	4b1c      	ldr	r3, [pc, #112]	; (8005398 <FATFS_LinkDriverEx+0x94>)
 8005326:	7a5b      	ldrb	r3, [r3, #9]
 8005328:	b2db      	uxtb	r3, r3
 800532a:	461a      	mov	r2, r3
 800532c:	4b1a      	ldr	r3, [pc, #104]	; (8005398 <FATFS_LinkDriverEx+0x94>)
 800532e:	2100      	movs	r1, #0
 8005330:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;  
 8005332:	4b19      	ldr	r3, [pc, #100]	; (8005398 <FATFS_LinkDriverEx+0x94>)
 8005334:	7a5b      	ldrb	r3, [r3, #9]
 8005336:	b2db      	uxtb	r3, r3
 8005338:	4a17      	ldr	r2, [pc, #92]	; (8005398 <FATFS_LinkDriverEx+0x94>)
 800533a:	009b      	lsls	r3, r3, #2
 800533c:	4413      	add	r3, r2
 800533e:	68fa      	ldr	r2, [r7, #12]
 8005340:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;  
 8005342:	4b15      	ldr	r3, [pc, #84]	; (8005398 <FATFS_LinkDriverEx+0x94>)
 8005344:	7a5b      	ldrb	r3, [r3, #9]
 8005346:	b2db      	uxtb	r3, r3
 8005348:	461a      	mov	r2, r3
 800534a:	4b13      	ldr	r3, [pc, #76]	; (8005398 <FATFS_LinkDriverEx+0x94>)
 800534c:	4413      	add	r3, r2
 800534e:	79fa      	ldrb	r2, [r7, #7]
 8005350:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8005352:	4b11      	ldr	r3, [pc, #68]	; (8005398 <FATFS_LinkDriverEx+0x94>)
 8005354:	7a5b      	ldrb	r3, [r3, #9]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	1c5a      	adds	r2, r3, #1
 800535a:	b2d1      	uxtb	r1, r2
 800535c:	4a0e      	ldr	r2, [pc, #56]	; (8005398 <FATFS_LinkDriverEx+0x94>)
 800535e:	7251      	strb	r1, [r2, #9]
 8005360:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8005362:	7dbb      	ldrb	r3, [r7, #22]
 8005364:	3330      	adds	r3, #48	; 0x30
 8005366:	b2da      	uxtb	r2, r3
 8005368:	68bb      	ldr	r3, [r7, #8]
 800536a:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	3301      	adds	r3, #1
 8005370:	223a      	movs	r2, #58	; 0x3a
 8005372:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	3302      	adds	r3, #2
 8005378:	222f      	movs	r2, #47	; 0x2f
 800537a:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 800537c:	68bb      	ldr	r3, [r7, #8]
 800537e:	3303      	adds	r3, #3
 8005380:	2200      	movs	r2, #0
 8005382:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8005384:	2300      	movs	r3, #0
 8005386:	75fb      	strb	r3, [r7, #23]
  }
  
  return ret;
 8005388:	7dfb      	ldrb	r3, [r7, #23]
}
 800538a:	4618      	mov	r0, r3
 800538c:	371c      	adds	r7, #28
 800538e:	46bd      	mov	sp, r7
 8005390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005394:	4770      	bx	lr
 8005396:	bf00      	nop
 8005398:	2000042c 	.word	0x2000042c

0800539c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path 
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(Diskio_drvTypeDef *drv, char *path)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b082      	sub	sp, #8
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	6078      	str	r0, [r7, #4]
 80053a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80053a6:	2200      	movs	r2, #0
 80053a8:	6839      	ldr	r1, [r7, #0]
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7ff ffaa 	bl	8005304 <FATFS_LinkDriverEx>
 80053b0:	4603      	mov	r3, r0
}
 80053b2:	4618      	mov	r0, r3
 80053b4:	3708      	adds	r7, #8
 80053b6:	46bd      	mov	sp, r7
 80053b8:	bd80      	pop	{r7, pc}
	...

080053bc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEMCP, 1: OEMCP to Unicode */
)
{
 80053bc:	b480      	push	{r7}
 80053be:	b085      	sub	sp, #20
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	4603      	mov	r3, r0
 80053c4:	6039      	str	r1, [r7, #0]
 80053c6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	2b7f      	cmp	r3, #127	; 0x7f
 80053cc:	d802      	bhi.n	80053d4 <ff_convert+0x18>
		c = chr;
 80053ce:	88fb      	ldrh	r3, [r7, #6]
 80053d0:	81fb      	strh	r3, [r7, #14]
 80053d2:	e025      	b.n	8005420 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEMCP to Unicode */
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00b      	beq.n	80053f2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80053da:	88fb      	ldrh	r3, [r7, #6]
 80053dc:	2bff      	cmp	r3, #255	; 0xff
 80053de:	d805      	bhi.n	80053ec <ff_convert+0x30>
 80053e0:	88fb      	ldrh	r3, [r7, #6]
 80053e2:	3b80      	subs	r3, #128	; 0x80
 80053e4:	4a12      	ldr	r2, [pc, #72]	; (8005430 <ff_convert+0x74>)
 80053e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80053ea:	e000      	b.n	80053ee <ff_convert+0x32>
 80053ec:	2300      	movs	r3, #0
 80053ee:	81fb      	strh	r3, [r7, #14]
 80053f0:	e016      	b.n	8005420 <ff_convert+0x64>

		} else {		/* Unicode to OEMCP */
			for (c = 0; c < 0x80; c++) {
 80053f2:	2300      	movs	r3, #0
 80053f4:	81fb      	strh	r3, [r7, #14]
 80053f6:	e009      	b.n	800540c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80053f8:	89fb      	ldrh	r3, [r7, #14]
 80053fa:	4a0d      	ldr	r2, [pc, #52]	; (8005430 <ff_convert+0x74>)
 80053fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005400:	88fa      	ldrh	r2, [r7, #6]
 8005402:	429a      	cmp	r2, r3
 8005404:	d006      	beq.n	8005414 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8005406:	89fb      	ldrh	r3, [r7, #14]
 8005408:	3301      	adds	r3, #1
 800540a:	81fb      	strh	r3, [r7, #14]
 800540c:	89fb      	ldrh	r3, [r7, #14]
 800540e:	2b7f      	cmp	r3, #127	; 0x7f
 8005410:	d9f2      	bls.n	80053f8 <ff_convert+0x3c>
 8005412:	e000      	b.n	8005416 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8005414:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8005416:	89fb      	ldrh	r3, [r7, #14]
 8005418:	3380      	adds	r3, #128	; 0x80
 800541a:	b29b      	uxth	r3, r3
 800541c:	b2db      	uxtb	r3, r3
 800541e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8005420:	89fb      	ldrh	r3, [r7, #14]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3714      	adds	r7, #20
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr
 800542e:	bf00      	nop
 8005430:	0800731c 	.word	0x0800731c

08005434 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Upper converted character */
	WCHAR chr		/* Input character */
)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	4603      	mov	r3, r0
 800543c:	80fb      	strh	r3, [r7, #6]
	static const WCHAR tbl_lower[] = { 0x61, 0x62, 0x63, 0x64, 0x65, 0x66, 0x67, 0x68, 0x69, 0x6A, 0x6B, 0x6C, 0x6D, 0x6E, 0x6F, 0x70, 0x71, 0x72, 0x73, 0x74, 0x75, 0x76, 0x77, 0x78, 0x79, 0x7A, 0xA1, 0x00A2, 0x00A3, 0x00A5, 0x00AC, 0x00AF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xED, 0xEE, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF8, 0xF9, 0xFA, 0xFB, 0xFC, 0xFD, 0xFE, 0x0FF, 0x101, 0x103, 0x105, 0x107, 0x109, 0x10B, 0x10D, 0x10F, 0x111, 0x113, 0x115, 0x117, 0x119, 0x11B, 0x11D, 0x11F, 0x121, 0x123, 0x125, 0x127, 0x129, 0x12B, 0x12D, 0x12F, 0x131, 0x133, 0x135, 0x137, 0x13A, 0x13C, 0x13E, 0x140, 0x142, 0x144, 0x146, 0x148, 0x14B, 0x14D, 0x14F, 0x151, 0x153, 0x155, 0x157, 0x159, 0x15B, 0x15D, 0x15F, 0x161, 0x163, 0x165, 0x167, 0x169, 0x16B, 0x16D, 0x16F, 0x171, 0x173, 0x175, 0x177, 0x17A, 0x17C, 0x17E, 0x192, 0x3B1, 0x3B2, 0x3B3, 0x3B4, 0x3B5, 0x3B6, 0x3B7, 0x3B8, 0x3B9, 0x3BA, 0x3BB, 0x3BC, 0x3BD, 0x3BE, 0x3BF, 0x3C0, 0x3C1, 0x3C3, 0x3C4, 0x3C5, 0x3C6, 0x3C7, 0x3C8, 0x3C9, 0x3CA, 0x430, 0x431, 0x432, 0x433, 0x434, 0x435, 0x436, 0x437, 0x438, 0x439, 0x43A, 0x43B, 0x43C, 0x43D, 0x43E, 0x43F, 0x440, 0x441, 0x442, 0x443, 0x444, 0x445, 0x446, 0x447, 0x448, 0x449, 0x44A, 0x44B, 0x44C, 0x44D, 0x44E, 0x44F, 0x451, 0x452, 0x453, 0x454, 0x455, 0x456, 0x457, 0x458, 0x459, 0x45A, 0x45B, 0x45C, 0x45E, 0x45F, 0x2170, 0x2171, 0x2172, 0x2173, 0x2174, 0x2175, 0x2176, 0x2177, 0x2178, 0x2179, 0x217A, 0x217B, 0x217C, 0x217D, 0x217E, 0x217F, 0xFF41, 0xFF42, 0xFF43, 0xFF44, 0xFF45, 0xFF46, 0xFF47, 0xFF48, 0xFF49, 0xFF4A, 0xFF4B, 0xFF4C, 0xFF4D, 0xFF4E, 0xFF4F, 0xFF50, 0xFF51, 0xFF52, 0xFF53, 0xFF54, 0xFF55, 0xFF56, 0xFF57, 0xFF58, 0xFF59, 0xFF5A, 0 };
	static const WCHAR tbl_upper[] = { 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x21, 0xFFE0, 0xFFE1, 0xFFE5, 0xFFE2, 0xFFE3, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0x178, 0x100, 0x102, 0x104, 0x106, 0x108, 0x10A, 0x10C, 0x10E, 0x110, 0x112, 0x114, 0x116, 0x118, 0x11A, 0x11C, 0x11E, 0x120, 0x122, 0x124, 0x126, 0x128, 0x12A, 0x12C, 0x12E, 0x130, 0x132, 0x134, 0x136, 0x139, 0x13B, 0x13D, 0x13F, 0x141, 0x143, 0x145, 0x147, 0x14A, 0x14C, 0x14E, 0x150, 0x152, 0x154, 0x156, 0x158, 0x15A, 0x15C, 0x15E, 0x160, 0x162, 0x164, 0x166, 0x168, 0x16A, 0x16C, 0x16E, 0x170, 0x172, 0x174, 0x176, 0x179, 0x17B, 0x17D, 0x191, 0x391, 0x392, 0x393, 0x394, 0x395, 0x396, 0x397, 0x398, 0x399, 0x39A, 0x39B, 0x39C, 0x39D, 0x39E, 0x39F, 0x3A0, 0x3A1, 0x3A3, 0x3A4, 0x3A5, 0x3A6, 0x3A7, 0x3A8, 0x3A9, 0x3AA, 0x410, 0x411, 0x412, 0x413, 0x414, 0x415, 0x416, 0x417, 0x418, 0x419, 0x41A, 0x41B, 0x41C, 0x41D, 0x41E, 0x41F, 0x420, 0x421, 0x422, 0x423, 0x424, 0x425, 0x426, 0x427, 0x428, 0x429, 0x42A, 0x42B, 0x42C, 0x42D, 0x42E, 0x42F, 0x401, 0x402, 0x403, 0x404, 0x405, 0x406, 0x407, 0x408, 0x409, 0x40A, 0x40B, 0x40C, 0x40E, 0x40F, 0x2160, 0x2161, 0x2162, 0x2163, 0x2164, 0x2165, 0x2166, 0x2167, 0x2168, 0x2169, 0x216A, 0x216B, 0x216C, 0x216D, 0x216E, 0x216F, 0xFF21, 0xFF22, 0xFF23, 0xFF24, 0xFF25, 0xFF26, 0xFF27, 0xFF28, 0xFF29, 0xFF2A, 0xFF2B, 0xFF2C, 0xFF2D, 0xFF2E, 0xFF2F, 0xFF30, 0xFF31, 0xFF32, 0xFF33, 0xFF34, 0xFF35, 0xFF36, 0xFF37, 0xFF38, 0xFF39, 0xFF3A, 0 };
	int i;


	for (i = 0; tbl_lower[i] && chr != tbl_lower[i]; i++) ;
 800543e:	2300      	movs	r3, #0
 8005440:	60fb      	str	r3, [r7, #12]
 8005442:	e002      	b.n	800544a <ff_wtoupper+0x16>
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	3301      	adds	r3, #1
 8005448:	60fb      	str	r3, [r7, #12]
 800544a:	4a0f      	ldr	r2, [pc, #60]	; (8005488 <ff_wtoupper+0x54>)
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d006      	beq.n	8005464 <ff_wtoupper+0x30>
 8005456:	4a0c      	ldr	r2, [pc, #48]	; (8005488 <ff_wtoupper+0x54>)
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800545e:	88fa      	ldrh	r2, [r7, #6]
 8005460:	429a      	cmp	r2, r3
 8005462:	d1ef      	bne.n	8005444 <ff_wtoupper+0x10>

	return tbl_lower[i] ? tbl_upper[i] : chr;
 8005464:	4a08      	ldr	r2, [pc, #32]	; (8005488 <ff_wtoupper+0x54>)
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d004      	beq.n	800547a <ff_wtoupper+0x46>
 8005470:	4a06      	ldr	r2, [pc, #24]	; (800548c <ff_wtoupper+0x58>)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005478:	e000      	b.n	800547c <ff_wtoupper+0x48>
 800547a:	88fb      	ldrh	r3, [r7, #6]
}
 800547c:	4618      	mov	r0, r3
 800547e:	3714      	adds	r7, #20
 8005480:	46bd      	mov	sp, r7
 8005482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005486:	4770      	bx	lr
 8005488:	0800741c 	.word	0x0800741c
 800548c:	080075fc 	.word	0x080075fc

08005490 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */    

void MX_FATFS_Init(void) 
{
 8005490:	b580      	push	{r7, lr}
 8005492:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8005494:	4904      	ldr	r1, [pc, #16]	; (80054a8 <MX_FATFS_Init+0x18>)
 8005496:	4805      	ldr	r0, [pc, #20]	; (80054ac <MX_FATFS_Init+0x1c>)
 8005498:	f7ff ff80 	bl	800539c <FATFS_LinkDriver>
 800549c:	4603      	mov	r3, r0
 800549e:	461a      	mov	r2, r3
 80054a0:	4b03      	ldr	r3, [pc, #12]	; (80054b0 <MX_FATFS_Init+0x20>)
 80054a2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */     
  /* USER CODE END Init */
}
 80054a4:	bf00      	nop
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	2000044c 	.word	0x2000044c
 80054ac:	2000000c 	.word	0x2000000c
 80054b0:	20000450 	.word	0x20000450

080054b4 <get_fattime>:
  * @brief  Gets Time from RTC 
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 80054b8:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */  
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr

080054c4 <SELECT>:
static uint8_t PowerFlag = 0;                           /* Power condition Flag */


/* SPI Chip Select */
static void SELECT(void)
{
 80054c4:	b580      	push	{r7, lr}
 80054c6:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_RESET);
 80054c8:	2200      	movs	r2, #0
 80054ca:	2101      	movs	r1, #1
 80054cc:	4802      	ldr	r0, [pc, #8]	; (80054d8 <SELECT+0x14>)
 80054ce:	f7fb f93d 	bl	800074c <HAL_GPIO_WritePin>
}
 80054d2:	bf00      	nop
 80054d4:	bd80      	pop	{r7, pc}
 80054d6:	bf00      	nop
 80054d8:	48000400 	.word	0x48000400

080054dc <DESELECT>:

/* SPI Chip Deselect */
static void DESELECT(void)
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	af00      	add	r7, sp, #0
  HAL_GPIO_WritePin(SD_CS_GPIO_Port, SD_CS_Pin, GPIO_PIN_SET);
 80054e0:	2201      	movs	r2, #1
 80054e2:	2101      	movs	r1, #1
 80054e4:	4802      	ldr	r0, [pc, #8]	; (80054f0 <DESELECT+0x14>)
 80054e6:	f7fb f931 	bl	800074c <HAL_GPIO_WritePin>
}
 80054ea:	bf00      	nop
 80054ec:	bd80      	pop	{r7, pc}
 80054ee:	bf00      	nop
 80054f0:	48000400 	.word	0x48000400

080054f4 <SPI_TxByte>:

/* SPI Transmit*/
static void SPI_TxByte(BYTE data)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b082      	sub	sp, #8
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	4603      	mov	r3, r0
 80054fc:	71fb      	strb	r3, [r7, #7]
  while (HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80054fe:	bf00      	nop
 8005500:	4808      	ldr	r0, [pc, #32]	; (8005524 <SPI_TxByte+0x30>)
 8005502:	f7fb fd1b 	bl	8000f3c <HAL_SPI_GetState>
 8005506:	4603      	mov	r3, r0
 8005508:	2b01      	cmp	r3, #1
 800550a:	d1f9      	bne.n	8005500 <SPI_TxByte+0xc>
  HAL_SPI_Transmit(&hspi1, &data, 1, SPI_TIMEOUT);
 800550c:	1df9      	adds	r1, r7, #7
 800550e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005512:	2201      	movs	r2, #1
 8005514:	4803      	ldr	r0, [pc, #12]	; (8005524 <SPI_TxByte+0x30>)
 8005516:	f7fb f9bb 	bl	8000890 <HAL_SPI_Transmit>
}
 800551a:	bf00      	nop
 800551c:	3708      	adds	r7, #8
 800551e:	46bd      	mov	sp, r7
 8005520:	bd80      	pop	{r7, pc}
 8005522:	bf00      	nop
 8005524:	20001700 	.word	0x20001700

08005528 <SPI_RxByte>:

/* SPI Data send / receive return type function */
static uint8_t SPI_RxByte(void)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b084      	sub	sp, #16
 800552c:	af02      	add	r7, sp, #8
  uint8_t dummy, data;
  dummy = 0xFF;
 800552e:	23ff      	movs	r3, #255	; 0xff
 8005530:	71fb      	strb	r3, [r7, #7]
  data = 0;
 8005532:	2300      	movs	r3, #0
 8005534:	71bb      	strb	r3, [r7, #6]
  
  while ((HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY));
 8005536:	bf00      	nop
 8005538:	4809      	ldr	r0, [pc, #36]	; (8005560 <SPI_RxByte+0x38>)
 800553a:	f7fb fcff 	bl	8000f3c <HAL_SPI_GetState>
 800553e:	4603      	mov	r3, r0
 8005540:	2b01      	cmp	r3, #1
 8005542:	d1f9      	bne.n	8005538 <SPI_RxByte+0x10>
  HAL_SPI_TransmitReceive(&hspi1, &dummy, &data, 1, SPI_TIMEOUT);
 8005544:	1dba      	adds	r2, r7, #6
 8005546:	1df9      	adds	r1, r7, #7
 8005548:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	2301      	movs	r3, #1
 8005550:	4803      	ldr	r0, [pc, #12]	; (8005560 <SPI_RxByte+0x38>)
 8005552:	f7fb faf3 	bl	8000b3c <HAL_SPI_TransmitReceive>
  
  return data;
 8005556:	79bb      	ldrb	r3, [r7, #6]
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	20001700 	.word	0x20001700

08005564 <SPI_RxBytePtr>:

/* SPI Data send / receive pointer type function*/
static void SPI_RxBytePtr(uint8_t *buff) 
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b082      	sub	sp, #8
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  *buff = SPI_RxByte();
 800556c:	f7ff ffdc 	bl	8005528 <SPI_RxByte>
 8005570:	4603      	mov	r3, r0
 8005572:	461a      	mov	r2, r3
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	701a      	strb	r2, [r3, #0]
}
 8005578:	bf00      	nop
 800557a:	3708      	adds	r7, #8
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <SD_ReadyWait>:

/* SD CARD Ready wait */
static uint8_t SD_ReadyWait(void) 
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b082      	sub	sp, #8
 8005584:	af00      	add	r7, sp, #0
  uint8_t res;
  
  /* 500ms Counter preparation*/
  Timer2 = 50;
 8005586:	4b0b      	ldr	r3, [pc, #44]	; (80055b4 <SD_ReadyWait+0x34>)
 8005588:	2232      	movs	r2, #50	; 0x32
 800558a:	701a      	strb	r2, [r3, #0]

  SPI_RxByte();
 800558c:	f7ff ffcc 	bl	8005528 <SPI_RxByte>
  
  do
  {
    /* 0xFF SPI communication until a value is received */
    res = SPI_RxByte();
 8005590:	f7ff ffca 	bl	8005528 <SPI_RxByte>
 8005594:	4603      	mov	r3, r0
 8005596:	71fb      	strb	r3, [r7, #7]
  } while ((res != 0xFF) && Timer2);
 8005598:	79fb      	ldrb	r3, [r7, #7]
 800559a:	2bff      	cmp	r3, #255	; 0xff
 800559c:	d004      	beq.n	80055a8 <SD_ReadyWait+0x28>
 800559e:	4b05      	ldr	r3, [pc, #20]	; (80055b4 <SD_ReadyWait+0x34>)
 80055a0:	781b      	ldrb	r3, [r3, #0]
 80055a2:	b2db      	uxtb	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d1f3      	bne.n	8005590 <SD_ReadyWait+0x10>
  
  return res;
 80055a8:	79fb      	ldrb	r3, [r7, #7]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3708      	adds	r7, #8
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20001764 	.word	0x20001764

080055b8 <SD_PowerOn>:

/*Power on*/
static void SD_PowerOn(void) 
{
 80055b8:	b580      	push	{r7, lr}
 80055ba:	b086      	sub	sp, #24
 80055bc:	af00      	add	r7, sp, #0
  uint8_t cmd_arg[6];
  uint32_t Count = 0x1FFF;
 80055be:	f641 73ff 	movw	r3, #8191	; 0x1fff
 80055c2:	617b      	str	r3, [r7, #20]
  

  DESELECT();
 80055c4:	f7ff ff8a 	bl	80054dc <DESELECT>
  
  for(int i = 0; i < 10; i++)
 80055c8:	2300      	movs	r3, #0
 80055ca:	613b      	str	r3, [r7, #16]
 80055cc:	e005      	b.n	80055da <SD_PowerOn+0x22>
  {
    SPI_TxByte(0xFF);
 80055ce:	20ff      	movs	r0, #255	; 0xff
 80055d0:	f7ff ff90 	bl	80054f4 <SPI_TxByte>
  for(int i = 0; i < 10; i++)
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	3301      	adds	r3, #1
 80055d8:	613b      	str	r3, [r7, #16]
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	2b09      	cmp	r3, #9
 80055de:	ddf6      	ble.n	80055ce <SD_PowerOn+0x16>
  }
  
  /* SPI Chips Select */
  SELECT();
 80055e0:	f7ff ff70 	bl	80054c4 <SELECT>
  
  /*  GO_IDLE_STATE State transitions*/
  cmd_arg[0] = (CMD0 | 0x40);
 80055e4:	2340      	movs	r3, #64	; 0x40
 80055e6:	713b      	strb	r3, [r7, #4]
  cmd_arg[1] = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	717b      	strb	r3, [r7, #5]
  cmd_arg[2] = 0;
 80055ec:	2300      	movs	r3, #0
 80055ee:	71bb      	strb	r3, [r7, #6]
  cmd_arg[3] = 0;
 80055f0:	2300      	movs	r3, #0
 80055f2:	71fb      	strb	r3, [r7, #7]
  cmd_arg[4] = 0;
 80055f4:	2300      	movs	r3, #0
 80055f6:	723b      	strb	r3, [r7, #8]
  cmd_arg[5] = 0x95;
 80055f8:	2395      	movs	r3, #149	; 0x95
 80055fa:	727b      	strb	r3, [r7, #9]
  
  /* Command transmission*/
  for (int i = 0; i < 6; i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e009      	b.n	8005616 <SD_PowerOn+0x5e>
  {
    SPI_TxByte(cmd_arg[i]);
 8005602:	1d3a      	adds	r2, r7, #4
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	781b      	ldrb	r3, [r3, #0]
 800560a:	4618      	mov	r0, r3
 800560c:	f7ff ff72 	bl	80054f4 <SPI_TxByte>
  for (int i = 0; i < 6; i++)
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	3301      	adds	r3, #1
 8005614:	60fb      	str	r3, [r7, #12]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2b05      	cmp	r3, #5
 800561a:	ddf2      	ble.n	8005602 <SD_PowerOn+0x4a>
  }
  
  /* Answer waiting*/
  while ((SPI_RxByte() != 0x01) && Count)
 800561c:	e002      	b.n	8005624 <SD_PowerOn+0x6c>
  {
    Count--;
 800561e:	697b      	ldr	r3, [r7, #20]
 8005620:	3b01      	subs	r3, #1
 8005622:	617b      	str	r3, [r7, #20]
  while ((SPI_RxByte() != 0x01) && Count)
 8005624:	f7ff ff80 	bl	8005528 <SPI_RxByte>
 8005628:	4603      	mov	r3, r0
 800562a:	2b01      	cmp	r3, #1
 800562c:	d002      	beq.n	8005634 <SD_PowerOn+0x7c>
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d1f4      	bne.n	800561e <SD_PowerOn+0x66>
  }
  
  DESELECT();
 8005634:	f7ff ff52 	bl	80054dc <DESELECT>
  SPI_TxByte(0XFF);
 8005638:	20ff      	movs	r0, #255	; 0xff
 800563a:	f7ff ff5b 	bl	80054f4 <SPI_TxByte>
  
  PowerFlag = 1;
 800563e:	4b03      	ldr	r3, [pc, #12]	; (800564c <SD_PowerOn+0x94>)
 8005640:	2201      	movs	r2, #1
 8005642:	701a      	strb	r2, [r3, #0]
}
 8005644:	bf00      	nop
 8005646:	3718      	adds	r7, #24
 8005648:	46bd      	mov	sp, r7
 800564a:	bd80      	pop	{r7, pc}
 800564c:	20000439 	.word	0x20000439

08005650 <SD_PowerOff>:

/* 전원 끄기 */
static void SD_PowerOff(void) 
{
 8005650:	b480      	push	{r7}
 8005652:	af00      	add	r7, sp, #0
  PowerFlag = 0;
 8005654:	4b03      	ldr	r3, [pc, #12]	; (8005664 <SD_PowerOff+0x14>)
 8005656:	2200      	movs	r2, #0
 8005658:	701a      	strb	r2, [r3, #0]
}
 800565a:	bf00      	nop
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	20000439 	.word	0x20000439

08005668 <SD_CheckPower>:

/* 전원 상태 확인 */
static uint8_t SD_CheckPower(void) 
{
 8005668:	b480      	push	{r7}
 800566a:	af00      	add	r7, sp, #0
  /*  0=off, 1=on */
  return PowerFlag;
 800566c:	4b03      	ldr	r3, [pc, #12]	; (800567c <SD_CheckPower+0x14>)
 800566e:	781b      	ldrb	r3, [r3, #0]
}
 8005670:	4618      	mov	r0, r3
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr
 800567a:	bf00      	nop
 800567c:	20000439 	.word	0x20000439

08005680 <SD_RxDataBlock>:

/* 데이터 패킷 수신 */
static bool SD_RxDataBlock(BYTE *buff, UINT btr) 
{
 8005680:	b580      	push	{r7, lr}
 8005682:	b084      	sub	sp, #16
 8005684:	af00      	add	r7, sp, #0
 8005686:	6078      	str	r0, [r7, #4]
 8005688:	6039      	str	r1, [r7, #0]
  uint8_t token;
  
  /* 100ms 타이머 */
  Timer1 = 10;
 800568a:	4b17      	ldr	r3, [pc, #92]	; (80056e8 <SD_RxDataBlock+0x68>)
 800568c:	220a      	movs	r2, #10
 800568e:	701a      	strb	r2, [r3, #0]

  /* 응답 대기 */		
  do 
  {    
    token = SPI_RxByte();
 8005690:	f7ff ff4a 	bl	8005528 <SPI_RxByte>
 8005694:	4603      	mov	r3, r0
 8005696:	73fb      	strb	r3, [r7, #15]
  } while((token == 0xFF) && Timer1);
 8005698:	7bfb      	ldrb	r3, [r7, #15]
 800569a:	2bff      	cmp	r3, #255	; 0xff
 800569c:	d104      	bne.n	80056a8 <SD_RxDataBlock+0x28>
 800569e:	4b12      	ldr	r3, [pc, #72]	; (80056e8 <SD_RxDataBlock+0x68>)
 80056a0:	781b      	ldrb	r3, [r3, #0]
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d1f3      	bne.n	8005690 <SD_RxDataBlock+0x10>
  
  /* 0xFE 이외 Token 수신 시 에러 처리 */
  if(token != 0xFE)
 80056a8:	7bfb      	ldrb	r3, [r7, #15]
 80056aa:	2bfe      	cmp	r3, #254	; 0xfe
 80056ac:	d001      	beq.n	80056b2 <SD_RxDataBlock+0x32>
    return FALSE;
 80056ae:	2300      	movs	r3, #0
 80056b0:	e016      	b.n	80056e0 <SD_RxDataBlock+0x60>
  
  /* 버퍼에 데이터 수신 */
  do 
  {     
    SPI_RxBytePtr(buff++);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	1c5a      	adds	r2, r3, #1
 80056b6:	607a      	str	r2, [r7, #4]
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff ff53 	bl	8005564 <SPI_RxBytePtr>
    SPI_RxBytePtr(buff++);
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	607a      	str	r2, [r7, #4]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7ff ff4d 	bl	8005564 <SPI_RxBytePtr>
  } while(btr -= 2);
 80056ca:	683b      	ldr	r3, [r7, #0]
 80056cc:	3b02      	subs	r3, #2
 80056ce:	603b      	str	r3, [r7, #0]
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d1ed      	bne.n	80056b2 <SD_RxDataBlock+0x32>
  
  SPI_RxByte(); /* CRC 무시 */
 80056d6:	f7ff ff27 	bl	8005528 <SPI_RxByte>
  SPI_RxByte();
 80056da:	f7ff ff25 	bl	8005528 <SPI_RxByte>
  
  return TRUE;
 80056de:	2301      	movs	r3, #1
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	20001768 	.word	0x20001768

080056ec <SD_TxDataBlock>:

/* 데이터 전송 패킷 */
#if _READONLY == 0
static bool SD_TxDataBlock(const BYTE *buff, BYTE token)
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
  uint8_t resp, wc;
  uint8_t i = 0;
 80056f8:	2300      	movs	r3, #0
 80056fa:	737b      	strb	r3, [r7, #13]
    
  /* SD카드 준비 대기 */
  if (SD_ReadyWait() != 0xFF)
 80056fc:	f7ff ff40 	bl	8005580 <SD_ReadyWait>
 8005700:	4603      	mov	r3, r0
 8005702:	2bff      	cmp	r3, #255	; 0xff
 8005704:	d001      	beq.n	800570a <SD_TxDataBlock+0x1e>
    return FALSE;
 8005706:	2300      	movs	r3, #0
 8005708:	e040      	b.n	800578c <SD_TxDataBlock+0xa0>
  
  /* 토큰 전송 */
  SPI_TxByte(token);      
 800570a:	78fb      	ldrb	r3, [r7, #3]
 800570c:	4618      	mov	r0, r3
 800570e:	f7ff fef1 	bl	80054f4 <SPI_TxByte>
  
  /* 데이터 토큰인 경우 */
  if (token != 0xFD) 
 8005712:	78fb      	ldrb	r3, [r7, #3]
 8005714:	2bfd      	cmp	r3, #253	; 0xfd
 8005716:	d031      	beq.n	800577c <SD_TxDataBlock+0x90>
  { 
    wc = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	73bb      	strb	r3, [r7, #14]
    
    /* 512 바이트 데이터 전송 */
    do 
    { 
      SPI_TxByte(*buff++);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	1c5a      	adds	r2, r3, #1
 8005720:	607a      	str	r2, [r7, #4]
 8005722:	781b      	ldrb	r3, [r3, #0]
 8005724:	4618      	mov	r0, r3
 8005726:	f7ff fee5 	bl	80054f4 <SPI_TxByte>
      SPI_TxByte(*buff++);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	1c5a      	adds	r2, r3, #1
 800572e:	607a      	str	r2, [r7, #4]
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	4618      	mov	r0, r3
 8005734:	f7ff fede 	bl	80054f4 <SPI_TxByte>
    } while (--wc);
 8005738:	7bbb      	ldrb	r3, [r7, #14]
 800573a:	3b01      	subs	r3, #1
 800573c:	73bb      	strb	r3, [r7, #14]
 800573e:	7bbb      	ldrb	r3, [r7, #14]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d1eb      	bne.n	800571c <SD_TxDataBlock+0x30>
    
    SPI_RxByte();       /* CRC 무시 */
 8005744:	f7ff fef0 	bl	8005528 <SPI_RxByte>
    SPI_RxByte();
 8005748:	f7ff feee 	bl	8005528 <SPI_RxByte>
    
    /* 데이트 응답 수신 */        
    while (i <= 64) 
 800574c:	e00b      	b.n	8005766 <SD_TxDataBlock+0x7a>
    {			
      resp = SPI_RxByte();
 800574e:	f7ff feeb 	bl	8005528 <SPI_RxByte>
 8005752:	4603      	mov	r3, r0
 8005754:	73fb      	strb	r3, [r7, #15]
      
      /* 에러 응답 처리 */
      if ((resp & 0x1F) == 0x05) 
 8005756:	7bfb      	ldrb	r3, [r7, #15]
 8005758:	f003 031f 	and.w	r3, r3, #31
 800575c:	2b05      	cmp	r3, #5
 800575e:	d006      	beq.n	800576e <SD_TxDataBlock+0x82>
        break;
      
      i++;
 8005760:	7b7b      	ldrb	r3, [r7, #13]
 8005762:	3301      	adds	r3, #1
 8005764:	737b      	strb	r3, [r7, #13]
    while (i <= 64) 
 8005766:	7b7b      	ldrb	r3, [r7, #13]
 8005768:	2b40      	cmp	r3, #64	; 0x40
 800576a:	d9f0      	bls.n	800574e <SD_TxDataBlock+0x62>
 800576c:	e000      	b.n	8005770 <SD_TxDataBlock+0x84>
        break;
 800576e:	bf00      	nop
    }
    
    /* SPI 수신 버퍼 Clear */
    while (SPI_RxByte() == 0);
 8005770:	bf00      	nop
 8005772:	f7ff fed9 	bl	8005528 <SPI_RxByte>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d0fa      	beq.n	8005772 <SD_TxDataBlock+0x86>
  }
  
  if ((resp & 0x1F) == 0x05)
 800577c:	7bfb      	ldrb	r3, [r7, #15]
 800577e:	f003 031f 	and.w	r3, r3, #31
 8005782:	2b05      	cmp	r3, #5
 8005784:	d101      	bne.n	800578a <SD_TxDataBlock+0x9e>
    return TRUE;
 8005786:	2301      	movs	r3, #1
 8005788:	e000      	b.n	800578c <SD_TxDataBlock+0xa0>
  else
    return FALSE;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <SD_SendCmd>:
#endif /* _READONLY */

/* CMD 패킷 전송 */
static BYTE SD_SendCmd(BYTE cmd, DWORD arg) 
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	4603      	mov	r3, r0
 800579c:	6039      	str	r1, [r7, #0]
 800579e:	71fb      	strb	r3, [r7, #7]
  uint8_t crc, res;
  
  /* SD카드 대기 */
  if (SD_ReadyWait() != 0xFF)
 80057a0:	f7ff feee 	bl	8005580 <SD_ReadyWait>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2bff      	cmp	r3, #255	; 0xff
 80057a8:	d001      	beq.n	80057ae <SD_SendCmd+0x1a>
    return 0xFF;
 80057aa:	23ff      	movs	r3, #255	; 0xff
 80057ac:	e040      	b.n	8005830 <SD_SendCmd+0x9c>
  
  /* 명령 패킷 전송 */
  SPI_TxByte(cmd); 			/* Command */
 80057ae:	79fb      	ldrb	r3, [r7, #7]
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fe9f 	bl	80054f4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 24)); 	/* Argument[31..24] */
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	0e1b      	lsrs	r3, r3, #24
 80057ba:	b2db      	uxtb	r3, r3
 80057bc:	4618      	mov	r0, r3
 80057be:	f7ff fe99 	bl	80054f4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 16)); 	/* Argument[23..16] */
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	0c1b      	lsrs	r3, r3, #16
 80057c6:	b2db      	uxtb	r3, r3
 80057c8:	4618      	mov	r0, r3
 80057ca:	f7ff fe93 	bl	80054f4 <SPI_TxByte>
  SPI_TxByte((BYTE) (arg >> 8)); 	/* Argument[15..8] */
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	0a1b      	lsrs	r3, r3, #8
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff fe8d 	bl	80054f4 <SPI_TxByte>
  SPI_TxByte((BYTE) arg); 		/* Argument[7..0] */
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	b2db      	uxtb	r3, r3
 80057de:	4618      	mov	r0, r3
 80057e0:	f7ff fe88 	bl	80054f4 <SPI_TxByte>
  
  /* 명령별 CRC 준비 */
  crc = 0;  
 80057e4:	2300      	movs	r3, #0
 80057e6:	73fb      	strb	r3, [r7, #15]
  if (cmd == CMD0)
 80057e8:	79fb      	ldrb	r3, [r7, #7]
 80057ea:	2b40      	cmp	r3, #64	; 0x40
 80057ec:	d101      	bne.n	80057f2 <SD_SendCmd+0x5e>
    crc = 0x95; /* CRC for CMD0(0) */
 80057ee:	2395      	movs	r3, #149	; 0x95
 80057f0:	73fb      	strb	r3, [r7, #15]
  
  if (cmd == CMD8)
 80057f2:	79fb      	ldrb	r3, [r7, #7]
 80057f4:	2b48      	cmp	r3, #72	; 0x48
 80057f6:	d101      	bne.n	80057fc <SD_SendCmd+0x68>
    crc = 0x87; /* CRC for CMD8(0x1AA) */
 80057f8:	2387      	movs	r3, #135	; 0x87
 80057fa:	73fb      	strb	r3, [r7, #15]
  
  /* CRC 전송 */
  SPI_TxByte(crc);
 80057fc:	7bfb      	ldrb	r3, [r7, #15]
 80057fe:	4618      	mov	r0, r3
 8005800:	f7ff fe78 	bl	80054f4 <SPI_TxByte>
  
  /* CMD12 Stop Reading 명령인 경우에는 응답 바이트 하나를 버린다 */
  if (cmd == CMD12)
 8005804:	79fb      	ldrb	r3, [r7, #7]
 8005806:	2b4c      	cmp	r3, #76	; 0x4c
 8005808:	d101      	bne.n	800580e <SD_SendCmd+0x7a>
    SPI_RxByte();
 800580a:	f7ff fe8d 	bl	8005528 <SPI_RxByte>
  
  /* 10회 내에 정상 데이터를 수신한다. */
  uint8_t n = 10; 
 800580e:	230a      	movs	r3, #10
 8005810:	73bb      	strb	r3, [r7, #14]
  do
  {
    res = SPI_RxByte();
 8005812:	f7ff fe89 	bl	8005528 <SPI_RxByte>
 8005816:	4603      	mov	r3, r0
 8005818:	737b      	strb	r3, [r7, #13]
  } while ((res & 0x80) && --n);
 800581a:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800581e:	2b00      	cmp	r3, #0
 8005820:	da05      	bge.n	800582e <SD_SendCmd+0x9a>
 8005822:	7bbb      	ldrb	r3, [r7, #14]
 8005824:	3b01      	subs	r3, #1
 8005826:	73bb      	strb	r3, [r7, #14]
 8005828:	7bbb      	ldrb	r3, [r7, #14]
 800582a:	2b00      	cmp	r3, #0
 800582c:	d1f1      	bne.n	8005812 <SD_SendCmd+0x7e>
  
  return res;
 800582e:	7b7b      	ldrb	r3, [r7, #13]
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <SD_disk_initialize>:
  user_diskio.c 파일에서 사용된다.
-----------------------------------------------------------------------*/

/* SD카드 초기화 */
DSTATUS SD_disk_initialize(BYTE drv) 
{
 8005838:	b590      	push	{r4, r7, lr}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	4603      	mov	r3, r0
 8005840:	71fb      	strb	r3, [r7, #7]
  uint8_t n, type, ocr[4];
  
  /* 한종류의 드라이브만 지원 */
  if(drv)
 8005842:	79fb      	ldrb	r3, [r7, #7]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d001      	beq.n	800584c <SD_disk_initialize+0x14>
    return STA_NOINIT;  
 8005848:	2301      	movs	r3, #1
 800584a:	e0d5      	b.n	80059f8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 미삽입 */
  if(Stat & STA_NODISK)
 800584c:	4b6c      	ldr	r3, [pc, #432]	; (8005a00 <SD_disk_initialize+0x1c8>)
 800584e:	781b      	ldrb	r3, [r3, #0]
 8005850:	b2db      	uxtb	r3, r3
 8005852:	f003 0302 	and.w	r3, r3, #2
 8005856:	2b00      	cmp	r3, #0
 8005858:	d003      	beq.n	8005862 <SD_disk_initialize+0x2a>
    return Stat;        
 800585a:	4b69      	ldr	r3, [pc, #420]	; (8005a00 <SD_disk_initialize+0x1c8>)
 800585c:	781b      	ldrb	r3, [r3, #0]
 800585e:	b2db      	uxtb	r3, r3
 8005860:	e0ca      	b.n	80059f8 <SD_disk_initialize+0x1c0>
  
  /* SD카드 Power On */
  SD_PowerOn();         
 8005862:	f7ff fea9 	bl	80055b8 <SD_PowerOn>
  
  /* SPI 통신을 위해 Chip Select */
  SELECT();             
 8005866:	f7ff fe2d 	bl	80054c4 <SELECT>
  
  /* SD카드 타입변수 초기화 */
  type = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	73bb      	strb	r3, [r7, #14]
  
  /* Idle 상태 진입 */
  if (SD_SendCmd(CMD0, 0) == 1) 
 800586e:	2100      	movs	r1, #0
 8005870:	2040      	movs	r0, #64	; 0x40
 8005872:	f7ff ff8f 	bl	8005794 <SD_SendCmd>
 8005876:	4603      	mov	r3, r0
 8005878:	2b01      	cmp	r3, #1
 800587a:	f040 80a5 	bne.w	80059c8 <SD_disk_initialize+0x190>
  { 
    /* 타이머 1초 설정 */
    Timer1 = 100;
 800587e:	4b61      	ldr	r3, [pc, #388]	; (8005a04 <SD_disk_initialize+0x1cc>)
 8005880:	2264      	movs	r2, #100	; 0x64
 8005882:	701a      	strb	r2, [r3, #0]
    
    /* SD 인터페이스 동작 조건 확인 */
    if (SD_SendCmd(CMD8, 0x1AA) == 1) 
 8005884:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005888:	2048      	movs	r0, #72	; 0x48
 800588a:	f7ff ff83 	bl	8005794 <SD_SendCmd>
 800588e:	4603      	mov	r3, r0
 8005890:	2b01      	cmp	r3, #1
 8005892:	d158      	bne.n	8005946 <SD_disk_initialize+0x10e>
    { 
      /* SDC Ver2+ */
      for (n = 0; n < 4; n++)
 8005894:	2300      	movs	r3, #0
 8005896:	73fb      	strb	r3, [r7, #15]
 8005898:	e00c      	b.n	80058b4 <SD_disk_initialize+0x7c>
      {
        ocr[n] = SPI_RxByte();
 800589a:	7bfc      	ldrb	r4, [r7, #15]
 800589c:	f7ff fe44 	bl	8005528 <SPI_RxByte>
 80058a0:	4603      	mov	r3, r0
 80058a2:	461a      	mov	r2, r3
 80058a4:	f107 0310 	add.w	r3, r7, #16
 80058a8:	4423      	add	r3, r4
 80058aa:	f803 2c08 	strb.w	r2, [r3, #-8]
      for (n = 0; n < 4; n++)
 80058ae:	7bfb      	ldrb	r3, [r7, #15]
 80058b0:	3301      	adds	r3, #1
 80058b2:	73fb      	strb	r3, [r7, #15]
 80058b4:	7bfb      	ldrb	r3, [r7, #15]
 80058b6:	2b03      	cmp	r3, #3
 80058b8:	d9ef      	bls.n	800589a <SD_disk_initialize+0x62>
      }
      
      if (ocr[2] == 0x01 && ocr[3] == 0xAA) 
 80058ba:	7abb      	ldrb	r3, [r7, #10]
 80058bc:	2b01      	cmp	r3, #1
 80058be:	f040 8083 	bne.w	80059c8 <SD_disk_initialize+0x190>
 80058c2:	7afb      	ldrb	r3, [r7, #11]
 80058c4:	2baa      	cmp	r3, #170	; 0xaa
 80058c6:	d17f      	bne.n	80059c8 <SD_disk_initialize+0x190>
      { 
        /* 2.7-3.6V 전압범위 동작 */
        do {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 1UL << 30) == 0)
 80058c8:	2100      	movs	r1, #0
 80058ca:	2077      	movs	r0, #119	; 0x77
 80058cc:	f7ff ff62 	bl	8005794 <SD_SendCmd>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d807      	bhi.n	80058e6 <SD_disk_initialize+0xae>
 80058d6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80058da:	2069      	movs	r0, #105	; 0x69
 80058dc:	f7ff ff5a 	bl	8005794 <SD_SendCmd>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d005      	beq.n	80058f2 <SD_disk_initialize+0xba>
            break; /* ACMD41 with HCS bit */
        } while (Timer1);
 80058e6:	4b47      	ldr	r3, [pc, #284]	; (8005a04 <SD_disk_initialize+0x1cc>)
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d1eb      	bne.n	80058c8 <SD_disk_initialize+0x90>
 80058f0:	e000      	b.n	80058f4 <SD_disk_initialize+0xbc>
            break; /* ACMD41 with HCS bit */
 80058f2:	bf00      	nop
        
        if (Timer1 && SD_SendCmd(CMD58, 0) == 0) 
 80058f4:	4b43      	ldr	r3, [pc, #268]	; (8005a04 <SD_disk_initialize+0x1cc>)
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d064      	beq.n	80059c8 <SD_disk_initialize+0x190>
 80058fe:	2100      	movs	r1, #0
 8005900:	207a      	movs	r0, #122	; 0x7a
 8005902:	f7ff ff47 	bl	8005794 <SD_SendCmd>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d15d      	bne.n	80059c8 <SD_disk_initialize+0x190>
        { 
          /* Check CCS bit */
          for (n = 0; n < 4; n++)
 800590c:	2300      	movs	r3, #0
 800590e:	73fb      	strb	r3, [r7, #15]
 8005910:	e00c      	b.n	800592c <SD_disk_initialize+0xf4>
          {
            ocr[n] = SPI_RxByte();
 8005912:	7bfc      	ldrb	r4, [r7, #15]
 8005914:	f7ff fe08 	bl	8005528 <SPI_RxByte>
 8005918:	4603      	mov	r3, r0
 800591a:	461a      	mov	r2, r3
 800591c:	f107 0310 	add.w	r3, r7, #16
 8005920:	4423      	add	r3, r4
 8005922:	f803 2c08 	strb.w	r2, [r3, #-8]
          for (n = 0; n < 4; n++)
 8005926:	7bfb      	ldrb	r3, [r7, #15]
 8005928:	3301      	adds	r3, #1
 800592a:	73fb      	strb	r3, [r7, #15]
 800592c:	7bfb      	ldrb	r3, [r7, #15]
 800592e:	2b03      	cmp	r3, #3
 8005930:	d9ef      	bls.n	8005912 <SD_disk_initialize+0xda>
          }
          
          type = (ocr[0] & 0x40) ? 6 : 2;
 8005932:	7a3b      	ldrb	r3, [r7, #8]
 8005934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <SD_disk_initialize+0x108>
 800593c:	2306      	movs	r3, #6
 800593e:	e000      	b.n	8005942 <SD_disk_initialize+0x10a>
 8005940:	2302      	movs	r3, #2
 8005942:	73bb      	strb	r3, [r7, #14]
 8005944:	e040      	b.n	80059c8 <SD_disk_initialize+0x190>
      }
    } 
    else 
    { 
      /* SDC Ver1 or MMC */
      type = (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) <= 1) ? 2 : 1; /* SDC : MMC */
 8005946:	2100      	movs	r1, #0
 8005948:	2077      	movs	r0, #119	; 0x77
 800594a:	f7ff ff23 	bl	8005794 <SD_SendCmd>
 800594e:	4603      	mov	r3, r0
 8005950:	2b01      	cmp	r3, #1
 8005952:	d808      	bhi.n	8005966 <SD_disk_initialize+0x12e>
 8005954:	2100      	movs	r1, #0
 8005956:	2069      	movs	r0, #105	; 0x69
 8005958:	f7ff ff1c 	bl	8005794 <SD_SendCmd>
 800595c:	4603      	mov	r3, r0
 800595e:	2b01      	cmp	r3, #1
 8005960:	d801      	bhi.n	8005966 <SD_disk_initialize+0x12e>
 8005962:	2302      	movs	r3, #2
 8005964:	e000      	b.n	8005968 <SD_disk_initialize+0x130>
 8005966:	2301      	movs	r3, #1
 8005968:	73bb      	strb	r3, [r7, #14]
      
      do {
        if (type == 2) 
 800596a:	7bbb      	ldrb	r3, [r7, #14]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d10e      	bne.n	800598e <SD_disk_initialize+0x156>
        {
          if (SD_SendCmd(CMD55, 0) <= 1 && SD_SendCmd(CMD41, 0) == 0)
 8005970:	2100      	movs	r1, #0
 8005972:	2077      	movs	r0, #119	; 0x77
 8005974:	f7ff ff0e 	bl	8005794 <SD_SendCmd>
 8005978:	4603      	mov	r3, r0
 800597a:	2b01      	cmp	r3, #1
 800597c:	d80e      	bhi.n	800599c <SD_disk_initialize+0x164>
 800597e:	2100      	movs	r1, #0
 8005980:	2069      	movs	r0, #105	; 0x69
 8005982:	f7ff ff07 	bl	8005794 <SD_SendCmd>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d107      	bne.n	800599c <SD_disk_initialize+0x164>
            break; /* ACMD41 */
 800598c:	e00d      	b.n	80059aa <SD_disk_initialize+0x172>
        } 
        else 
        {
          if (SD_SendCmd(CMD1, 0) == 0)
 800598e:	2100      	movs	r1, #0
 8005990:	2041      	movs	r0, #65	; 0x41
 8005992:	f7ff feff 	bl	8005794 <SD_SendCmd>
 8005996:	4603      	mov	r3, r0
 8005998:	2b00      	cmp	r3, #0
 800599a:	d005      	beq.n	80059a8 <SD_disk_initialize+0x170>
            break; /* CMD1 */
        }
      } while (Timer1);
 800599c:	4b19      	ldr	r3, [pc, #100]	; (8005a04 <SD_disk_initialize+0x1cc>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	b2db      	uxtb	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d1e1      	bne.n	800596a <SD_disk_initialize+0x132>
 80059a6:	e000      	b.n	80059aa <SD_disk_initialize+0x172>
            break; /* CMD1 */
 80059a8:	bf00      	nop
      
      if (!Timer1 || SD_SendCmd(CMD16, 512) != 0) 
 80059aa:	4b16      	ldr	r3, [pc, #88]	; (8005a04 <SD_disk_initialize+0x1cc>)
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d007      	beq.n	80059c4 <SD_disk_initialize+0x18c>
 80059b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80059b8:	2050      	movs	r0, #80	; 0x50
 80059ba:	f7ff feeb 	bl	8005794 <SD_SendCmd>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d001      	beq.n	80059c8 <SD_disk_initialize+0x190>
      {
        /* 블럭 길이 선택 */
        type = 0;
 80059c4:	2300      	movs	r3, #0
 80059c6:	73bb      	strb	r3, [r7, #14]
      }
    }
  }
  
  CardType = type;
 80059c8:	4a0f      	ldr	r2, [pc, #60]	; (8005a08 <SD_disk_initialize+0x1d0>)
 80059ca:	7bbb      	ldrb	r3, [r7, #14]
 80059cc:	7013      	strb	r3, [r2, #0]
  
  DESELECT();
 80059ce:	f7ff fd85 	bl	80054dc <DESELECT>
  
  SPI_RxByte(); /* Idle 상태 전환 (Release DO) */
 80059d2:	f7ff fda9 	bl	8005528 <SPI_RxByte>
  
  if (type) 
 80059d6:	7bbb      	ldrb	r3, [r7, #14]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d008      	beq.n	80059ee <SD_disk_initialize+0x1b6>
  {
    /* Clear STA_NOINIT */
    Stat &= ~STA_NOINIT; 
 80059dc:	4b08      	ldr	r3, [pc, #32]	; (8005a00 <SD_disk_initialize+0x1c8>)
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	b2db      	uxtb	r3, r3
 80059e2:	f023 0301 	bic.w	r3, r3, #1
 80059e6:	b2da      	uxtb	r2, r3
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <SD_disk_initialize+0x1c8>)
 80059ea:	701a      	strb	r2, [r3, #0]
 80059ec:	e001      	b.n	80059f2 <SD_disk_initialize+0x1ba>
  }
  else
  {
    /* Initialization failed */
    SD_PowerOff();
 80059ee:	f7ff fe2f 	bl	8005650 <SD_PowerOff>
  }
  
  return Stat;
 80059f2:	4b03      	ldr	r3, [pc, #12]	; (8005a00 <SD_disk_initialize+0x1c8>)
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b2db      	uxtb	r3, r3
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3714      	adds	r7, #20
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd90      	pop	{r4, r7, pc}
 8005a00:	20000005 	.word	0x20000005
 8005a04:	20001768 	.word	0x20001768
 8005a08:	20000438 	.word	0x20000438

08005a0c <SD_disk_status>:

/* 디스크 상태 확인 */
DSTATUS SD_disk_status(BYTE drv) 
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b083      	sub	sp, #12
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	4603      	mov	r3, r0
 8005a14:	71fb      	strb	r3, [r7, #7]
  if (drv)
 8005a16:	79fb      	ldrb	r3, [r7, #7]
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d001      	beq.n	8005a20 <SD_disk_status+0x14>
    return STA_NOINIT; 
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e002      	b.n	8005a26 <SD_disk_status+0x1a>
  
  return Stat;
 8005a20:	4b04      	ldr	r3, [pc, #16]	; (8005a34 <SD_disk_status+0x28>)
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	b2db      	uxtb	r3, r3
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	370c      	adds	r7, #12
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a30:	4770      	bx	lr
 8005a32:	bf00      	nop
 8005a34:	20000005 	.word	0x20000005

08005a38 <SD_disk_read>:

/* 섹터 읽기 */
DRESULT SD_disk_read(BYTE pdrv, BYTE* buff, DWORD sector, UINT count) 
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60b9      	str	r1, [r7, #8]
 8005a40:	607a      	str	r2, [r7, #4]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	4603      	mov	r3, r0
 8005a46:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8005a48:	7bfb      	ldrb	r3, [r7, #15]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d102      	bne.n	8005a54 <SD_disk_read+0x1c>
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d101      	bne.n	8005a58 <SD_disk_read+0x20>
    return RES_PARERR;
 8005a54:	2304      	movs	r3, #4
 8005a56:	e051      	b.n	8005afc <SD_disk_read+0xc4>
  
  if (Stat & STA_NOINIT)
 8005a58:	4b2a      	ldr	r3, [pc, #168]	; (8005b04 <SD_disk_read+0xcc>)
 8005a5a:	781b      	ldrb	r3, [r3, #0]
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d001      	beq.n	8005a6a <SD_disk_read+0x32>
    return RES_NOTRDY;
 8005a66:	2303      	movs	r3, #3
 8005a68:	e048      	b.n	8005afc <SD_disk_read+0xc4>
  
  if (!(CardType & 4))
 8005a6a:	4b27      	ldr	r3, [pc, #156]	; (8005b08 <SD_disk_read+0xd0>)
 8005a6c:	781b      	ldrb	r3, [r3, #0]
 8005a6e:	f003 0304 	and.w	r3, r3, #4
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	d102      	bne.n	8005a7c <SD_disk_read+0x44>
    sector *= 512;      /* 지정 sector를 Byte addressing 단위로 변경 */
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	025b      	lsls	r3, r3, #9
 8005a7a:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8005a7c:	f7ff fd22 	bl	80054c4 <SELECT>
  
  if (count == 1) 
 8005a80:	683b      	ldr	r3, [r7, #0]
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d111      	bne.n	8005aaa <SD_disk_read+0x72>
  { 
    /* 싱글 블록 읽기 */
    if ((SD_SendCmd(CMD17, sector) == 0) && SD_RxDataBlock(buff, 512))
 8005a86:	6879      	ldr	r1, [r7, #4]
 8005a88:	2051      	movs	r0, #81	; 0x51
 8005a8a:	f7ff fe83 	bl	8005794 <SD_SendCmd>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d129      	bne.n	8005ae8 <SD_disk_read+0xb0>
 8005a94:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005a98:	68b8      	ldr	r0, [r7, #8]
 8005a9a:	f7ff fdf1 	bl	8005680 <SD_RxDataBlock>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d021      	beq.n	8005ae8 <SD_disk_read+0xb0>
      count = 0;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	603b      	str	r3, [r7, #0]
 8005aa8:	e01e      	b.n	8005ae8 <SD_disk_read+0xb0>
  } 
  else 
  { 
    /* 다중 블록 읽기 */
    if (SD_SendCmd(CMD18, sector) == 0) 
 8005aaa:	6879      	ldr	r1, [r7, #4]
 8005aac:	2052      	movs	r0, #82	; 0x52
 8005aae:	f7ff fe71 	bl	8005794 <SD_SendCmd>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d117      	bne.n	8005ae8 <SD_disk_read+0xb0>
    {       
      do {
        if (!SD_RxDataBlock(buff, 512))
 8005ab8:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005abc:	68b8      	ldr	r0, [r7, #8]
 8005abe:	f7ff fddf 	bl	8005680 <SD_RxDataBlock>
 8005ac2:	4603      	mov	r3, r0
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00a      	beq.n	8005ade <SD_disk_read+0xa6>
          break;
        
        buff += 512;
 8005ac8:	68bb      	ldr	r3, [r7, #8]
 8005aca:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005ace:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	3b01      	subs	r3, #1
 8005ad4:	603b      	str	r3, [r7, #0]
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d1ed      	bne.n	8005ab8 <SD_disk_read+0x80>
 8005adc:	e000      	b.n	8005ae0 <SD_disk_read+0xa8>
          break;
 8005ade:	bf00      	nop
      
      /* STOP_TRANSMISSION, 모든 블럭을 다 읽은 후, 전송 중지 요청 */
      SD_SendCmd(CMD12, 0); 
 8005ae0:	2100      	movs	r1, #0
 8005ae2:	204c      	movs	r0, #76	; 0x4c
 8005ae4:	f7ff fe56 	bl	8005794 <SD_SendCmd>
    }
  }
  
  DESELECT();
 8005ae8:	f7ff fcf8 	bl	80054dc <DESELECT>
  SPI_RxByte(); /* Idle 상태(Release DO) */
 8005aec:	f7ff fd1c 	bl	8005528 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8005af0:	683b      	ldr	r3, [r7, #0]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	bf14      	ite	ne
 8005af6:	2301      	movne	r3, #1
 8005af8:	2300      	moveq	r3, #0
 8005afa:	b2db      	uxtb	r3, r3
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}
 8005b04:	20000005 	.word	0x20000005
 8005b08:	20000438 	.word	0x20000438

08005b0c <SD_disk_write>:

/* 섹터 쓰기 */
#if _READONLY == 0
DRESULT SD_disk_write(BYTE pdrv, const BYTE* buff, DWORD sector, UINT count) 
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	603b      	str	r3, [r7, #0]
 8005b18:	4603      	mov	r3, r0
 8005b1a:	73fb      	strb	r3, [r7, #15]
  if (pdrv || !count)
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <SD_disk_write+0x1c>
 8005b22:	683b      	ldr	r3, [r7, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <SD_disk_write+0x20>
    return RES_PARERR;
 8005b28:	2304      	movs	r3, #4
 8005b2a:	e06b      	b.n	8005c04 <SD_disk_write+0xf8>
  
  if (Stat & STA_NOINIT)
 8005b2c:	4b37      	ldr	r3, [pc, #220]	; (8005c0c <SD_disk_write+0x100>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	f003 0301 	and.w	r3, r3, #1
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d001      	beq.n	8005b3e <SD_disk_write+0x32>
    return RES_NOTRDY;
 8005b3a:	2303      	movs	r3, #3
 8005b3c:	e062      	b.n	8005c04 <SD_disk_write+0xf8>
  
  if (Stat & STA_PROTECT)
 8005b3e:	4b33      	ldr	r3, [pc, #204]	; (8005c0c <SD_disk_write+0x100>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	b2db      	uxtb	r3, r3
 8005b44:	f003 0304 	and.w	r3, r3, #4
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <SD_disk_write+0x44>
    return RES_WRPRT;
 8005b4c:	2302      	movs	r3, #2
 8005b4e:	e059      	b.n	8005c04 <SD_disk_write+0xf8>
  
  if (!(CardType & 4))
 8005b50:	4b2f      	ldr	r3, [pc, #188]	; (8005c10 <SD_disk_write+0x104>)
 8005b52:	781b      	ldrb	r3, [r3, #0]
 8005b54:	f003 0304 	and.w	r3, r3, #4
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d102      	bne.n	8005b62 <SD_disk_write+0x56>
    sector *= 512; /* 지정 sector를 Byte addressing 단위로 변경 */
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	025b      	lsls	r3, r3, #9
 8005b60:	607b      	str	r3, [r7, #4]
  
  SELECT();
 8005b62:	f7ff fcaf 	bl	80054c4 <SELECT>
  
  if (count == 1) 
 8005b66:	683b      	ldr	r3, [r7, #0]
 8005b68:	2b01      	cmp	r3, #1
 8005b6a:	d110      	bne.n	8005b8e <SD_disk_write+0x82>
  { 
    /* 싱글 블록 쓰기 */
    if ((SD_SendCmd(CMD24, sector) == 0) && SD_TxDataBlock(buff, 0xFE))
 8005b6c:	6879      	ldr	r1, [r7, #4]
 8005b6e:	2058      	movs	r0, #88	; 0x58
 8005b70:	f7ff fe10 	bl	8005794 <SD_SendCmd>
 8005b74:	4603      	mov	r3, r0
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	d13a      	bne.n	8005bf0 <SD_disk_write+0xe4>
 8005b7a:	21fe      	movs	r1, #254	; 0xfe
 8005b7c:	68b8      	ldr	r0, [r7, #8]
 8005b7e:	f7ff fdb5 	bl	80056ec <SD_TxDataBlock>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d033      	beq.n	8005bf0 <SD_disk_write+0xe4>
      count = 0;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	603b      	str	r3, [r7, #0]
 8005b8c:	e030      	b.n	8005bf0 <SD_disk_write+0xe4>
  } 
  else 
  { 
    /* 다중 블록 쓰기 */
    if (CardType & 2) 
 8005b8e:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <SD_disk_write+0x104>)
 8005b90:	781b      	ldrb	r3, [r3, #0]
 8005b92:	f003 0302 	and.w	r3, r3, #2
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d007      	beq.n	8005baa <SD_disk_write+0x9e>
    {
      SD_SendCmd(CMD55, 0);
 8005b9a:	2100      	movs	r1, #0
 8005b9c:	2077      	movs	r0, #119	; 0x77
 8005b9e:	f7ff fdf9 	bl	8005794 <SD_SendCmd>
      SD_SendCmd(CMD23, count); /* ACMD23 */
 8005ba2:	6839      	ldr	r1, [r7, #0]
 8005ba4:	2057      	movs	r0, #87	; 0x57
 8005ba6:	f7ff fdf5 	bl	8005794 <SD_SendCmd>
    }
    
    if (SD_SendCmd(CMD25, sector) == 0) 
 8005baa:	6879      	ldr	r1, [r7, #4]
 8005bac:	2059      	movs	r0, #89	; 0x59
 8005bae:	f7ff fdf1 	bl	8005794 <SD_SendCmd>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d11b      	bne.n	8005bf0 <SD_disk_write+0xe4>
    {       
      do {
        if(!SD_TxDataBlock(buff, 0xFC))
 8005bb8:	21fc      	movs	r1, #252	; 0xfc
 8005bba:	68b8      	ldr	r0, [r7, #8]
 8005bbc:	f7ff fd96 	bl	80056ec <SD_TxDataBlock>
 8005bc0:	4603      	mov	r3, r0
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d00a      	beq.n	8005bdc <SD_disk_write+0xd0>
          break;
        
        buff += 512;
 8005bc6:	68bb      	ldr	r3, [r7, #8]
 8005bc8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8005bcc:	60bb      	str	r3, [r7, #8]
      } while (--count);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	603b      	str	r3, [r7, #0]
 8005bd4:	683b      	ldr	r3, [r7, #0]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d1ee      	bne.n	8005bb8 <SD_disk_write+0xac>
 8005bda:	e000      	b.n	8005bde <SD_disk_write+0xd2>
          break;
 8005bdc:	bf00      	nop
      
      if(!SD_TxDataBlock(0, 0xFD))
 8005bde:	21fd      	movs	r1, #253	; 0xfd
 8005be0:	2000      	movs	r0, #0
 8005be2:	f7ff fd83 	bl	80056ec <SD_TxDataBlock>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d101      	bne.n	8005bf0 <SD_disk_write+0xe4>
      {        
        count = 1;
 8005bec:	2301      	movs	r3, #1
 8005bee:	603b      	str	r3, [r7, #0]
      }
    }
  }
  
  DESELECT();
 8005bf0:	f7ff fc74 	bl	80054dc <DESELECT>
  SPI_RxByte();
 8005bf4:	f7ff fc98 	bl	8005528 <SPI_RxByte>
  
  return count ? RES_ERROR : RES_OK;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	bf14      	ite	ne
 8005bfe:	2301      	movne	r3, #1
 8005c00:	2300      	moveq	r3, #0
 8005c02:	b2db      	uxtb	r3, r3
}
 8005c04:	4618      	mov	r0, r3
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	20000005 	.word	0x20000005
 8005c10:	20000438 	.word	0x20000438

08005c14 <SD_disk_ioctl>:
#endif /* _READONLY */

/* 기타 함수 */
DRESULT SD_disk_ioctl(BYTE drv, BYTE ctrl, void *buff) 
{
 8005c14:	b590      	push	{r4, r7, lr}
 8005c16:	b08b      	sub	sp, #44	; 0x2c
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	4603      	mov	r3, r0
 8005c1c:	603a      	str	r2, [r7, #0]
 8005c1e:	71fb      	strb	r3, [r7, #7]
 8005c20:	460b      	mov	r3, r1
 8005c22:	71bb      	strb	r3, [r7, #6]
  DRESULT res;
  BYTE n, csd[16], *ptr = buff;
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	623b      	str	r3, [r7, #32]
  WORD csize;
  
  if (drv)
 8005c28:	79fb      	ldrb	r3, [r7, #7]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d001      	beq.n	8005c32 <SD_disk_ioctl+0x1e>
    return RES_PARERR;
 8005c2e:	2304      	movs	r3, #4
 8005c30:	e117      	b.n	8005e62 <SD_disk_ioctl+0x24e>
  
  res = RES_ERROR;
 8005c32:	2301      	movs	r3, #1
 8005c34:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  
  if (ctrl == CTRL_POWER) 
 8005c38:	79bb      	ldrb	r3, [r7, #6]
 8005c3a:	2b05      	cmp	r3, #5
 8005c3c:	d126      	bne.n	8005c8c <SD_disk_ioctl+0x78>
  {
    switch (*ptr) 
 8005c3e:	6a3b      	ldr	r3, [r7, #32]
 8005c40:	781b      	ldrb	r3, [r3, #0]
 8005c42:	2b01      	cmp	r3, #1
 8005c44:	d00e      	beq.n	8005c64 <SD_disk_ioctl+0x50>
 8005c46:	2b02      	cmp	r3, #2
 8005c48:	d012      	beq.n	8005c70 <SD_disk_ioctl+0x5c>
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d11a      	bne.n	8005c84 <SD_disk_ioctl+0x70>
    {
    case 0:
      if (SD_CheckPower())
 8005c4e:	f7ff fd0b 	bl	8005668 <SD_CheckPower>
 8005c52:	4603      	mov	r3, r0
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d001      	beq.n	8005c5c <SD_disk_ioctl+0x48>
        SD_PowerOff();          /* Power Off */
 8005c58:	f7ff fcfa 	bl	8005650 <SD_PowerOff>
      res = RES_OK;
 8005c5c:	2300      	movs	r3, #0
 8005c5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005c62:	e0fc      	b.n	8005e5e <SD_disk_ioctl+0x24a>
    case 1:
      SD_PowerOn();             /* Power On */
 8005c64:	f7ff fca8 	bl	80055b8 <SD_PowerOn>
      res = RES_OK;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005c6e:	e0f6      	b.n	8005e5e <SD_disk_ioctl+0x24a>
    case 2:
      *(ptr + 1) = (BYTE) SD_CheckPower();
 8005c70:	6a3b      	ldr	r3, [r7, #32]
 8005c72:	1c5c      	adds	r4, r3, #1
 8005c74:	f7ff fcf8 	bl	8005668 <SD_CheckPower>
 8005c78:	4603      	mov	r3, r0
 8005c7a:	7023      	strb	r3, [r4, #0]
      res = RES_OK;             /* Power Check */
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005c82:	e0ec      	b.n	8005e5e <SD_disk_ioctl+0x24a>
    default:
      res = RES_PARERR;
 8005c84:	2304      	movs	r3, #4
 8005c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005c8a:	e0e8      	b.n	8005e5e <SD_disk_ioctl+0x24a>
    }
  } 
  else 
  {
    if (Stat & STA_NOINIT)
 8005c8c:	4b77      	ldr	r3, [pc, #476]	; (8005e6c <SD_disk_ioctl+0x258>)
 8005c8e:	781b      	ldrb	r3, [r3, #0]
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	f003 0301 	and.w	r3, r3, #1
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d001      	beq.n	8005c9e <SD_disk_ioctl+0x8a>
      return RES_NOTRDY;
 8005c9a:	2303      	movs	r3, #3
 8005c9c:	e0e1      	b.n	8005e62 <SD_disk_ioctl+0x24e>
    
    SELECT();
 8005c9e:	f7ff fc11 	bl	80054c4 <SELECT>
    
    switch (ctrl) 
 8005ca2:	79bb      	ldrb	r3, [r7, #6]
 8005ca4:	2b0d      	cmp	r3, #13
 8005ca6:	f200 80cb 	bhi.w	8005e40 <SD_disk_ioctl+0x22c>
 8005caa:	a201      	add	r2, pc, #4	; (adr r2, 8005cb0 <SD_disk_ioctl+0x9c>)
 8005cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cb0:	08005dab 	.word	0x08005dab
 8005cb4:	08005ce9 	.word	0x08005ce9
 8005cb8:	08005d9b 	.word	0x08005d9b
 8005cbc:	08005e41 	.word	0x08005e41
 8005cc0:	08005e41 	.word	0x08005e41
 8005cc4:	08005e41 	.word	0x08005e41
 8005cc8:	08005e41 	.word	0x08005e41
 8005ccc:	08005e41 	.word	0x08005e41
 8005cd0:	08005e41 	.word	0x08005e41
 8005cd4:	08005e41 	.word	0x08005e41
 8005cd8:	08005e41 	.word	0x08005e41
 8005cdc:	08005dbd 	.word	0x08005dbd
 8005ce0:	08005de1 	.word	0x08005de1
 8005ce4:	08005e05 	.word	0x08005e05
    {
    case GET_SECTOR_COUNT: 
      /* SD카드 내 Sector의 개수 (DWORD) */
      if ((SD_SendCmd(CMD9, 0) == 0) && SD_RxDataBlock(csd, 16)) 
 8005ce8:	2100      	movs	r1, #0
 8005cea:	2049      	movs	r0, #73	; 0x49
 8005cec:	f7ff fd52 	bl	8005794 <SD_SendCmd>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	f040 80a8 	bne.w	8005e48 <SD_disk_ioctl+0x234>
 8005cf8:	f107 030c 	add.w	r3, r7, #12
 8005cfc:	2110      	movs	r1, #16
 8005cfe:	4618      	mov	r0, r3
 8005d00:	f7ff fcbe 	bl	8005680 <SD_RxDataBlock>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	f000 809e 	beq.w	8005e48 <SD_disk_ioctl+0x234>
      {
        if ((csd[0] >> 6) == 1) 
 8005d0c:	7b3b      	ldrb	r3, [r7, #12]
 8005d0e:	099b      	lsrs	r3, r3, #6
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b01      	cmp	r3, #1
 8005d14:	d10e      	bne.n	8005d34 <SD_disk_ioctl+0x120>
        { 
          /* SDC ver 2.00 */
          csize = csd[9] + ((WORD) csd[8] << 8) + 1;
 8005d16:	7d7b      	ldrb	r3, [r7, #21]
 8005d18:	b29a      	uxth	r2, r3
 8005d1a:	7d3b      	ldrb	r3, [r7, #20]
 8005d1c:	b29b      	uxth	r3, r3
 8005d1e:	021b      	lsls	r3, r3, #8
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	4413      	add	r3, r2
 8005d24:	b29b      	uxth	r3, r3
 8005d26:	3301      	adds	r3, #1
 8005d28:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << 10;
 8005d2a:	8bfb      	ldrh	r3, [r7, #30]
 8005d2c:	029a      	lsls	r2, r3, #10
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	601a      	str	r2, [r3, #0]
 8005d32:	e02e      	b.n	8005d92 <SD_disk_ioctl+0x17e>
        } 
        else 
        { 
          /* MMC or SDC ver 1.XX */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 8005d34:	7c7b      	ldrb	r3, [r7, #17]
 8005d36:	f003 030f 	and.w	r3, r3, #15
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	7dbb      	ldrb	r3, [r7, #22]
 8005d3e:	09db      	lsrs	r3, r3, #7
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	4413      	add	r3, r2
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	7d7b      	ldrb	r3, [r7, #21]
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	b2db      	uxtb	r3, r3
 8005d4c:	f003 0306 	and.w	r3, r3, #6
 8005d50:	b2db      	uxtb	r3, r3
 8005d52:	4413      	add	r3, r2
 8005d54:	b2db      	uxtb	r3, r3
 8005d56:	3302      	adds	r3, #2
 8005d58:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
          csize = (csd[8] >> 6) + ((WORD) csd[7] << 2) + ((WORD) (csd[6] & 3) << 10) + 1;
 8005d5c:	7d3b      	ldrb	r3, [r7, #20]
 8005d5e:	099b      	lsrs	r3, r3, #6
 8005d60:	b2db      	uxtb	r3, r3
 8005d62:	b29a      	uxth	r2, r3
 8005d64:	7cfb      	ldrb	r3, [r7, #19]
 8005d66:	b29b      	uxth	r3, r3
 8005d68:	009b      	lsls	r3, r3, #2
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	4413      	add	r3, r2
 8005d6e:	b29a      	uxth	r2, r3
 8005d70:	7cbb      	ldrb	r3, [r7, #18]
 8005d72:	029b      	lsls	r3, r3, #10
 8005d74:	b29b      	uxth	r3, r3
 8005d76:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	4413      	add	r3, r2
 8005d7e:	b29b      	uxth	r3, r3
 8005d80:	3301      	adds	r3, #1
 8005d82:	83fb      	strh	r3, [r7, #30]
          *(DWORD*) buff = (DWORD) csize << (n - 9);
 8005d84:	8bfa      	ldrh	r2, [r7, #30]
 8005d86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005d8a:	3b09      	subs	r3, #9
 8005d8c:	409a      	lsls	r2, r3
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	601a      	str	r2, [r3, #0]
        }
        
        res = RES_OK;
 8005d92:	2300      	movs	r3, #0
 8005d94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }
      break;
 8005d98:	e056      	b.n	8005e48 <SD_disk_ioctl+0x234>
      
    case GET_SECTOR_SIZE: 
      /* 섹터의 단위 크기 (WORD) */
      *(WORD*) buff = 512;
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005da0:	801a      	strh	r2, [r3, #0]
      res = RES_OK;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005da8:	e055      	b.n	8005e56 <SD_disk_ioctl+0x242>
      
    case CTRL_SYNC: 
      /* 쓰기 동기화 */
      if (SD_ReadyWait() == 0xFF)
 8005daa:	f7ff fbe9 	bl	8005580 <SD_ReadyWait>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2bff      	cmp	r3, #255	; 0xff
 8005db2:	d14b      	bne.n	8005e4c <SD_disk_ioctl+0x238>
        res = RES_OK;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005dba:	e047      	b.n	8005e4c <SD_disk_ioctl+0x238>
      
    case MMC_GET_CSD: 
      /* CSD 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD9, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8005dbc:	2100      	movs	r1, #0
 8005dbe:	2049      	movs	r0, #73	; 0x49
 8005dc0:	f7ff fce8 	bl	8005794 <SD_SendCmd>
 8005dc4:	4603      	mov	r3, r0
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d142      	bne.n	8005e50 <SD_disk_ioctl+0x23c>
 8005dca:	2110      	movs	r1, #16
 8005dcc:	6a38      	ldr	r0, [r7, #32]
 8005dce:	f7ff fc57 	bl	8005680 <SD_RxDataBlock>
 8005dd2:	4603      	mov	r3, r0
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d03b      	beq.n	8005e50 <SD_disk_ioctl+0x23c>
        res = RES_OK;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005dde:	e037      	b.n	8005e50 <SD_disk_ioctl+0x23c>
      
    case MMC_GET_CID: 
      /* CID 정보 수신 (16 bytes) */
      if (SD_SendCmd(CMD10, 0) == 0 && SD_RxDataBlock(ptr, 16))
 8005de0:	2100      	movs	r1, #0
 8005de2:	204a      	movs	r0, #74	; 0x4a
 8005de4:	f7ff fcd6 	bl	8005794 <SD_SendCmd>
 8005de8:	4603      	mov	r3, r0
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d132      	bne.n	8005e54 <SD_disk_ioctl+0x240>
 8005dee:	2110      	movs	r1, #16
 8005df0:	6a38      	ldr	r0, [r7, #32]
 8005df2:	f7ff fc45 	bl	8005680 <SD_RxDataBlock>
 8005df6:	4603      	mov	r3, r0
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d02b      	beq.n	8005e54 <SD_disk_ioctl+0x240>
        res = RES_OK;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      break;
 8005e02:	e027      	b.n	8005e54 <SD_disk_ioctl+0x240>
      
    case MMC_GET_OCR: 
      /* OCR 정보 수신 (4 bytes) */
      if (SD_SendCmd(CMD58, 0) == 0) 
 8005e04:	2100      	movs	r1, #0
 8005e06:	207a      	movs	r0, #122	; 0x7a
 8005e08:	f7ff fcc4 	bl	8005794 <SD_SendCmd>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d116      	bne.n	8005e40 <SD_disk_ioctl+0x22c>
      {         
        for (n = 0; n < 4; n++)
 8005e12:	2300      	movs	r3, #0
 8005e14:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e18:	e00b      	b.n	8005e32 <SD_disk_ioctl+0x21e>
        {
          *ptr++ = SPI_RxByte();
 8005e1a:	6a3c      	ldr	r4, [r7, #32]
 8005e1c:	1c63      	adds	r3, r4, #1
 8005e1e:	623b      	str	r3, [r7, #32]
 8005e20:	f7ff fb82 	bl	8005528 <SPI_RxByte>
 8005e24:	4603      	mov	r3, r0
 8005e26:	7023      	strb	r3, [r4, #0]
        for (n = 0; n < 4; n++)
 8005e28:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e2c:	3301      	adds	r3, #1
 8005e2e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8005e32:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8005e36:	2b03      	cmp	r3, #3
 8005e38:	d9ef      	bls.n	8005e1a <SD_disk_ioctl+0x206>
        }
        
        res = RES_OK;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      }     
      
    default:
      res = RES_PARERR;
 8005e40:	2304      	movs	r3, #4
 8005e42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8005e46:	e006      	b.n	8005e56 <SD_disk_ioctl+0x242>
      break;
 8005e48:	bf00      	nop
 8005e4a:	e004      	b.n	8005e56 <SD_disk_ioctl+0x242>
      break;
 8005e4c:	bf00      	nop
 8005e4e:	e002      	b.n	8005e56 <SD_disk_ioctl+0x242>
      break;
 8005e50:	bf00      	nop
 8005e52:	e000      	b.n	8005e56 <SD_disk_ioctl+0x242>
      break;
 8005e54:	bf00      	nop
    }
    
    DESELECT();
 8005e56:	f7ff fb41 	bl	80054dc <DESELECT>
    SPI_RxByte();
 8005e5a:	f7ff fb65 	bl	8005528 <SPI_RxByte>
  }
  
  return res;
 8005e5e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	372c      	adds	r7, #44	; 0x2c
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd90      	pop	{r4, r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000005 	.word	0x20000005

08005e70 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 8005e78:	4b08      	ldr	r3, [pc, #32]	; (8005e9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005e7a:	695a      	ldr	r2, [r3, #20]
 8005e7c:	4907      	ldr	r1, [pc, #28]	; (8005e9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8005e84:	4b05      	ldr	r3, [pc, #20]	; (8005e9c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8005e86:	695a      	ldr	r2, [r3, #20]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	4013      	ands	r3, r2
 8005e8c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8005e8e:	68fb      	ldr	r3, [r7, #12]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr
 8005e9c:	40021000 	.word	0x40021000

08005ea0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	683a      	ldr	r2, [r7, #0]
 8005eae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005eb0:	bf00      	nop
 8005eb2:	370c      	adds	r7, #12
 8005eb4:	46bd      	mov	sp, r7
 8005eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eba:	4770      	bx	lr

08005ebc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b086      	sub	sp, #24
 8005ec0:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	601a      	str	r2, [r3, #0]
 8005ec8:	605a      	str	r2, [r3, #4]
 8005eca:	609a      	str	r2, [r3, #8]
 8005ecc:	60da      	str	r2, [r3, #12]
 8005ece:	611a      	str	r2, [r3, #16]
 8005ed0:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOF);
 8005ed2:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8005ed6:	f7ff ffcb 	bl	8005e70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8005eda:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8005ede:	f7ff ffc7 	bl	8005e70 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8005ee2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 8005ee6:	f7ff ffc3 	bl	8005e70 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_0|LD3_Pin);
 8005eea:	2109      	movs	r1, #9
 8005eec:	480a      	ldr	r0, [pc, #40]	; (8005f18 <MX_GPIO_Init+0x5c>)
 8005eee:	f7ff ffd7 	bl	8005ea0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LD3_Pin;
 8005ef2:	2309      	movs	r3, #9
 8005ef4:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8005f02:	2300      	movs	r3, #0
 8005f04:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005f06:	463b      	mov	r3, r7
 8005f08:	4619      	mov	r1, r3
 8005f0a:	4803      	ldr	r0, [pc, #12]	; (8005f18 <MX_GPIO_Init+0x5c>)
 8005f0c:	f7fb fa3d 	bl	800138a <LL_GPIO_Init>

}
 8005f10:	bf00      	nop
 8005f12:	3718      	adds	r7, #24
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	48000400 	.word	0x48000400

08005f1c <LL_RCC_HSI_Enable>:
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8005f20:	4b05      	ldr	r3, [pc, #20]	; (8005f38 <LL_RCC_HSI_Enable+0x1c>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	4a04      	ldr	r2, [pc, #16]	; (8005f38 <LL_RCC_HSI_Enable+0x1c>)
 8005f26:	f043 0301 	orr.w	r3, r3, #1
 8005f2a:	6013      	str	r3, [r2, #0]
}
 8005f2c:	bf00      	nop
 8005f2e:	46bd      	mov	sp, r7
 8005f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f34:	4770      	bx	lr
 8005f36:	bf00      	nop
 8005f38:	40021000 	.word	0x40021000

08005f3c <LL_RCC_HSI_IsReady>:
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 8005f40:	4b06      	ldr	r3, [pc, #24]	; (8005f5c <LL_RCC_HSI_IsReady+0x20>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f003 0302 	and.w	r3, r3, #2
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	bf0c      	ite	eq
 8005f4c:	2301      	moveq	r3, #1
 8005f4e:	2300      	movne	r3, #0
 8005f50:	b2db      	uxtb	r3, r3
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr
 8005f5c:	40021000 	.word	0x40021000

08005f60 <LL_RCC_HSI_SetCalibTrimming>:
{
 8005f60:	b480      	push	{r7}
 8005f62:	b083      	sub	sp, #12
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8005f68:	4b07      	ldr	r3, [pc, #28]	; (8005f88 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	00db      	lsls	r3, r3, #3
 8005f74:	4904      	ldr	r1, [pc, #16]	; (8005f88 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8005f76:	4313      	orrs	r3, r2
 8005f78:	600b      	str	r3, [r1, #0]
}
 8005f7a:	bf00      	nop
 8005f7c:	370c      	adds	r7, #12
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	40021000 	.word	0x40021000

08005f8c <LL_RCC_SetSysClkSource>:
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b083      	sub	sp, #12
 8005f90:	af00      	add	r7, sp, #0
 8005f92:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8005f94:	4b06      	ldr	r3, [pc, #24]	; (8005fb0 <LL_RCC_SetSysClkSource+0x24>)
 8005f96:	685b      	ldr	r3, [r3, #4]
 8005f98:	f023 0203 	bic.w	r2, r3, #3
 8005f9c:	4904      	ldr	r1, [pc, #16]	; (8005fb0 <LL_RCC_SetSysClkSource+0x24>)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	604b      	str	r3, [r1, #4]
}
 8005fa4:	bf00      	nop
 8005fa6:	370c      	adds	r7, #12
 8005fa8:	46bd      	mov	sp, r7
 8005faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fae:	4770      	bx	lr
 8005fb0:	40021000 	.word	0x40021000

08005fb4 <LL_RCC_GetSysClkSource>:
{
 8005fb4:	b480      	push	{r7}
 8005fb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8005fb8:	4b04      	ldr	r3, [pc, #16]	; (8005fcc <LL_RCC_GetSysClkSource+0x18>)
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	f003 030c 	and.w	r3, r3, #12
}
 8005fc0:	4618      	mov	r0, r3
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	40021000 	.word	0x40021000

08005fd0 <LL_RCC_SetAHBPrescaler>:
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8005fd8:	4b06      	ldr	r3, [pc, #24]	; (8005ff4 <LL_RCC_SetAHBPrescaler+0x24>)
 8005fda:	685b      	ldr	r3, [r3, #4]
 8005fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fe0:	4904      	ldr	r1, [pc, #16]	; (8005ff4 <LL_RCC_SetAHBPrescaler+0x24>)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	4313      	orrs	r3, r2
 8005fe6:	604b      	str	r3, [r1, #4]
}
 8005fe8:	bf00      	nop
 8005fea:	370c      	adds	r7, #12
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr
 8005ff4:	40021000 	.word	0x40021000

08005ff8 <LL_RCC_SetAPB1Prescaler>:
{
 8005ff8:	b480      	push	{r7}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8006000:	4b06      	ldr	r3, [pc, #24]	; (800601c <LL_RCC_SetAPB1Prescaler+0x24>)
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006008:	4904      	ldr	r1, [pc, #16]	; (800601c <LL_RCC_SetAPB1Prescaler+0x24>)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4313      	orrs	r3, r2
 800600e:	604b      	str	r3, [r1, #4]
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr
 800601c:	40021000 	.word	0x40021000

08006020 <LL_RCC_SetAPB2Prescaler>:
{
 8006020:	b480      	push	{r7}
 8006022:	b083      	sub	sp, #12
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8006028:	4b06      	ldr	r3, [pc, #24]	; (8006044 <LL_RCC_SetAPB2Prescaler+0x24>)
 800602a:	685b      	ldr	r3, [r3, #4]
 800602c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8006030:	4904      	ldr	r1, [pc, #16]	; (8006044 <LL_RCC_SetAPB2Prescaler+0x24>)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	4313      	orrs	r3, r2
 8006036:	604b      	str	r3, [r1, #4]
}
 8006038:	bf00      	nop
 800603a:	370c      	adds	r7, #12
 800603c:	46bd      	mov	sp, r7
 800603e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006042:	4770      	bx	lr
 8006044:	40021000 	.word	0x40021000

08006048 <LL_RCC_SetUSARTClockSource>:
{
 8006048:	b480      	push	{r7}
 800604a:	b083      	sub	sp, #12
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR3, (RCC_CFGR3_USART1SW << ((USARTxSource  & 0xFF000000U) >> 24U)), (USARTxSource & 0x00FFFFFFU));
 8006050:	4b0a      	ldr	r3, [pc, #40]	; (800607c <LL_RCC_SetUSARTClockSource+0x34>)
 8006052:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	0e1b      	lsrs	r3, r3, #24
 8006058:	2103      	movs	r1, #3
 800605a:	fa01 f303 	lsl.w	r3, r1, r3
 800605e:	43db      	mvns	r3, r3
 8006060:	401a      	ands	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006068:	4904      	ldr	r1, [pc, #16]	; (800607c <LL_RCC_SetUSARTClockSource+0x34>)
 800606a:	4313      	orrs	r3, r2
 800606c:	630b      	str	r3, [r1, #48]	; 0x30
}
 800606e:	bf00      	nop
 8006070:	370c      	adds	r7, #12
 8006072:	46bd      	mov	sp, r7
 8006074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006078:	4770      	bx	lr
 800607a:	bf00      	nop
 800607c:	40021000 	.word	0x40021000

08006080 <LL_RCC_PLL_Enable>:
{
 8006080:	b480      	push	{r7}
 8006082:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8006084:	4b05      	ldr	r3, [pc, #20]	; (800609c <LL_RCC_PLL_Enable+0x1c>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a04      	ldr	r2, [pc, #16]	; (800609c <LL_RCC_PLL_Enable+0x1c>)
 800608a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800608e:	6013      	str	r3, [r2, #0]
}
 8006090:	bf00      	nop
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr
 800609a:	bf00      	nop
 800609c:	40021000 	.word	0x40021000

080060a0 <LL_RCC_PLL_IsReady>:
{
 80060a0:	b480      	push	{r7}
 80060a2:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 80060a4:	4b07      	ldr	r3, [pc, #28]	; (80060c4 <LL_RCC_PLL_IsReady+0x24>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060ac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80060b0:	bf0c      	ite	eq
 80060b2:	2301      	moveq	r3, #1
 80060b4:	2300      	movne	r3, #0
 80060b6:	b2db      	uxtb	r3, r3
}
 80060b8:	4618      	mov	r0, r3
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	40021000 	.word	0x40021000

080060c8 <LL_RCC_PLL_ConfigDomain_SYS>:
{
 80060c8:	b480      	push	{r7}
 80060ca:	b083      	sub	sp, #12
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PLLSRC | RCC_CFGR_PLLMUL, (Source & RCC_CFGR_PLLSRC) | PLLMul);
 80060d2:	4b0e      	ldr	r3, [pc, #56]	; (800610c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	430b      	orrs	r3, r1
 80060e4:	4909      	ldr	r1, [pc, #36]	; (800610c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80060e6:	4313      	orrs	r3, r2
 80060e8:	604b      	str	r3, [r1, #4]
  MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PREDIV, (Source & RCC_CFGR2_PREDIV));
 80060ea:	4b08      	ldr	r3, [pc, #32]	; (800610c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80060ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060ee:	f023 020f 	bic.w	r2, r3, #15
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	f003 030f 	and.w	r3, r3, #15
 80060f8:	4904      	ldr	r1, [pc, #16]	; (800610c <LL_RCC_PLL_ConfigDomain_SYS+0x44>)
 80060fa:	4313      	orrs	r3, r2
 80060fc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80060fe:	bf00      	nop
 8006100:	370c      	adds	r7, #12
 8006102:	46bd      	mov	sp, r7
 8006104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006108:	4770      	bx	lr
 800610a:	bf00      	nop
 800610c:	40021000 	.word	0x40021000

08006110 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8006110:	b480      	push	{r7}
 8006112:	b083      	sub	sp, #12
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8006118:	4b06      	ldr	r3, [pc, #24]	; (8006134 <LL_FLASH_SetLatency+0x24>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f023 0207 	bic.w	r2, r3, #7
 8006120:	4904      	ldr	r1, [pc, #16]	; (8006134 <LL_FLASH_SetLatency+0x24>)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4313      	orrs	r3, r2
 8006126:	600b      	str	r3, [r1, #0]
}
 8006128:	bf00      	nop
 800612a:	370c      	adds	r7, #12
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr
 8006134:	40022000 	.word	0x40022000

08006138 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8006138:	b480      	push	{r7}
 800613a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 800613c:	4b04      	ldr	r3, [pc, #16]	; (8006150 <LL_FLASH_GetLatency+0x18>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f003 0307 	and.w	r3, r3, #7
}
 8006144:	4618      	mov	r0, r3
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	40022000 	.word	0x40022000

08006154 <LL_GPIO_SetOutputPin>:
{
 8006154:	b480      	push	{r7}
 8006156:	b083      	sub	sp, #12
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	683a      	ldr	r2, [r7, #0]
 8006162:	619a      	str	r2, [r3, #24]
}
 8006164:	bf00      	nop
 8006166:	370c      	adds	r7, #12
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr

08006170 <LL_GPIO_ResetOutputPin>:
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
 8006178:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	683a      	ldr	r2, [r7, #0]
 800617e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006180:	bf00      	nop
 8006182:	370c      	adds	r7, #12
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr

0800618c <bufsize>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
/* to find the size of data in the buffer */
int bufsize (char *buf)
{
 800618c:	b480      	push	{r7}
 800618e:	b085      	sub	sp, #20
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
	int i=0;
 8006194:	2300      	movs	r3, #0
 8006196:	60fb      	str	r3, [r7, #12]
	while (*buf++ != '\0') i++;
 8006198:	e002      	b.n	80061a0 <bufsize+0x14>
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	3301      	adds	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	1c5a      	adds	r2, r3, #1
 80061a4:	607a      	str	r2, [r7, #4]
 80061a6:	781b      	ldrb	r3, [r3, #0]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d1f6      	bne.n	800619a <bufsize+0xe>
	return i;
 80061ac:	68fb      	ldr	r3, [r7, #12]
}
 80061ae:	4618      	mov	r0, r3
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b8:	4770      	bx	lr

080061ba <bufclear>:

void bufclear (char* buffer)  // clear buffer
{
 80061ba:	b480      	push	{r7}
 80061bc:	b085      	sub	sp, #20
 80061be:	af00      	add	r7, sp, #0
 80061c0:	6078      	str	r0, [r7, #4]
	for (int i=0; i<bfs; i++)
 80061c2:	2300      	movs	r3, #0
 80061c4:	60fb      	str	r3, [r7, #12]
 80061c6:	e007      	b.n	80061d8 <bufclear+0x1e>
	{
		buffer[i] = '\0';
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	687a      	ldr	r2, [r7, #4]
 80061cc:	4413      	add	r3, r2
 80061ce:	2200      	movs	r2, #0
 80061d0:	701a      	strb	r2, [r3, #0]
	for (int i=0; i<bfs; i++)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	3301      	adds	r3, #1
 80061d6:	60fb      	str	r3, [r7, #12]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b7f      	cmp	r3, #127	; 0x7f
 80061dc:	ddf4      	ble.n	80061c8 <bufclear+0xe>
	}
}
 80061de:	bf00      	nop
 80061e0:	3714      	adds	r7, #20
 80061e2:	46bd      	mov	sp, r7
 80061e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061e8:	4770      	bx	lr

080061ea <parsestr>:

int parsestr(char* buffer,char* pstring, char pchar){
 80061ea:	b580      	push	{r7, lr}
 80061ec:	b086      	sub	sp, #24
 80061ee:	af00      	add	r7, sp, #0
 80061f0:	60f8      	str	r0, [r7, #12]
 80061f2:	60b9      	str	r1, [r7, #8]
 80061f4:	4613      	mov	r3, r2
 80061f6:	71fb      	strb	r3, [r7, #7]

	char *prs1; int i=0;
 80061f8:	2300      	movs	r3, #0
 80061fa:	617b      	str	r3, [r7, #20]
	prs1 = strstr(buffer,pstring);
 80061fc:	68b9      	ldr	r1, [r7, #8]
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f000 ff0d 	bl	800701e <strstr>
 8006204:	6138      	str	r0, [r7, #16]
	prs1 = strchr(prs1,pchar);
 8006206:	79fb      	ldrb	r3, [r7, #7]
 8006208:	4619      	mov	r1, r3
 800620a:	6938      	ldr	r0, [r7, #16]
 800620c:	f000 fefa 	bl	8007004 <strchr>
 8006210:	6138      	str	r0, [r7, #16]
	prs1++;
 8006212:	693b      	ldr	r3, [r7, #16]
 8006214:	3301      	adds	r3, #1
 8006216:	613b      	str	r3, [r7, #16]
    i = atoi(prs1);
 8006218:	6938      	ldr	r0, [r7, #16]
 800621a:	f000 feca 	bl	8006fb2 <atoi>
 800621e:	6178      	str	r0, [r7, #20]
    return i;
 8006220:	697b      	ldr	r3, [r7, #20]
}
 8006222:	4618      	mov	r0, r3
 8006224:	3718      	adds	r7, #24
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}
	...

0800622c <UART_SD_Init>:

void UART_SD_Init(void){
 800622c:	b580      	push	{r7, lr}
 800622e:	af00      	add	r7, sp, #0
	  LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8006230:	2108      	movs	r1, #8
 8006232:	483b      	ldr	r0, [pc, #236]	; (8006320 <UART_SD_Init+0xf4>)
 8006234:	f7ff ff9c 	bl	8006170 <LL_GPIO_ResetOutputPin>
	  LL_mDelay(5000);
 8006238:	f241 3088 	movw	r0, #5000	; 0x1388
 800623c:	f7fb fb96 	bl	800196c <LL_mDelay>

	  fresult = f_mount(&fs,"",0);
 8006240:	2200      	movs	r2, #0
 8006242:	4938      	ldr	r1, [pc, #224]	; (8006324 <UART_SD_Init+0xf8>)
 8006244:	4838      	ldr	r0, [pc, #224]	; (8006328 <UART_SD_Init+0xfc>)
 8006246:	f7fd ff09 	bl	800405c <f_mount>
 800624a:	4603      	mov	r3, r0
 800624c:	461a      	mov	r2, r3
 800624e:	4b37      	ldr	r3, [pc, #220]	; (800632c <UART_SD_Init+0x100>)
 8006250:	701a      	strb	r2, [r3, #0]
	  fresult = f_open(&fil, "uartinit.txt",FA_OPEN_ALWAYS | FA_READ | FA_WRITE );
 8006252:	2213      	movs	r2, #19
 8006254:	4936      	ldr	r1, [pc, #216]	; (8006330 <UART_SD_Init+0x104>)
 8006256:	4837      	ldr	r0, [pc, #220]	; (8006334 <UART_SD_Init+0x108>)
 8006258:	f7fd ff48 	bl	80040ec <f_open>
 800625c:	4603      	mov	r3, r0
 800625e:	461a      	mov	r2, r3
 8006260:	4b32      	ldr	r3, [pc, #200]	; (800632c <UART_SD_Init+0x100>)
 8006262:	701a      	strb	r2, [r3, #0]
	  if(fresult != FR_OK) LL_GPIO_SetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8006264:	4b31      	ldr	r3, [pc, #196]	; (800632c <UART_SD_Init+0x100>)
 8006266:	781b      	ldrb	r3, [r3, #0]
 8006268:	2b00      	cmp	r3, #0
 800626a:	d004      	beq.n	8006276 <UART_SD_Init+0x4a>
 800626c:	2108      	movs	r1, #8
 800626e:	482c      	ldr	r0, [pc, #176]	; (8006320 <UART_SD_Init+0xf4>)
 8006270:	f7ff ff70 	bl	8006154 <LL_GPIO_SetOutputPin>
 8006274:	e003      	b.n	800627e <UART_SD_Init+0x52>
	  	  else LL_GPIO_ResetOutputPin(GPIOB, LL_GPIO_PIN_3);
 8006276:	2108      	movs	r1, #8
 8006278:	4829      	ldr	r0, [pc, #164]	; (8006320 <UART_SD_Init+0xf4>)
 800627a:	f7ff ff79 	bl	8006170 <LL_GPIO_ResetOutputPin>
	  f_read (&fil, initbuf, fil.fsize, &br);
 800627e:	4b2d      	ldr	r3, [pc, #180]	; (8006334 <UART_SD_Init+0x108>)
 8006280:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8006284:	4b2c      	ldr	r3, [pc, #176]	; (8006338 <UART_SD_Init+0x10c>)
 8006286:	492d      	ldr	r1, [pc, #180]	; (800633c <UART_SD_Init+0x110>)
 8006288:	482a      	ldr	r0, [pc, #168]	; (8006334 <UART_SD_Init+0x108>)
 800628a:	f7fe f941 	bl	8004510 <f_read>
	  fresult = f_close(&fil);
 800628e:	4829      	ldr	r0, [pc, #164]	; (8006334 <UART_SD_Init+0x108>)
 8006290:	f7fe fd84 	bl	8004d9c <f_close>
 8006294:	4603      	mov	r3, r0
 8006296:	461a      	mov	r2, r3
 8006298:	4b24      	ldr	r3, [pc, #144]	; (800632c <UART_SD_Init+0x100>)
 800629a:	701a      	strb	r2, [r3, #0]

	  params.baudrate = parsestr(initbuf,"baudrate",'=');
 800629c:	223d      	movs	r2, #61	; 0x3d
 800629e:	4928      	ldr	r1, [pc, #160]	; (8006340 <UART_SD_Init+0x114>)
 80062a0:	4826      	ldr	r0, [pc, #152]	; (800633c <UART_SD_Init+0x110>)
 80062a2:	f7ff ffa2 	bl	80061ea <parsestr>
 80062a6:	4603      	mov	r3, r0
 80062a8:	461a      	mov	r2, r3
 80062aa:	4b26      	ldr	r3, [pc, #152]	; (8006344 <UART_SD_Init+0x118>)
 80062ac:	601a      	str	r2, [r3, #0]
	  params.datawidth = parsestr(initbuf,"datawidth",'=');
 80062ae:	223d      	movs	r2, #61	; 0x3d
 80062b0:	4925      	ldr	r1, [pc, #148]	; (8006348 <UART_SD_Init+0x11c>)
 80062b2:	4822      	ldr	r0, [pc, #136]	; (800633c <UART_SD_Init+0x110>)
 80062b4:	f7ff ff99 	bl	80061ea <parsestr>
 80062b8:	4603      	mov	r3, r0
 80062ba:	461a      	mov	r2, r3
 80062bc:	4b21      	ldr	r3, [pc, #132]	; (8006344 <UART_SD_Init+0x118>)
 80062be:	605a      	str	r2, [r3, #4]
	  params.stopbit = parsestr(initbuf,"stopbit",'=');
 80062c0:	223d      	movs	r2, #61	; 0x3d
 80062c2:	4922      	ldr	r1, [pc, #136]	; (800634c <UART_SD_Init+0x120>)
 80062c4:	481d      	ldr	r0, [pc, #116]	; (800633c <UART_SD_Init+0x110>)
 80062c6:	f7ff ff90 	bl	80061ea <parsestr>
 80062ca:	4603      	mov	r3, r0
 80062cc:	461a      	mov	r2, r3
 80062ce:	4b1d      	ldr	r3, [pc, #116]	; (8006344 <UART_SD_Init+0x118>)
 80062d0:	609a      	str	r2, [r3, #8]

	  if (params.baudrate<1 || params.baudrate>115200 )  params.baudrate=115200;
 80062d2:	4b1c      	ldr	r3, [pc, #112]	; (8006344 <UART_SD_Init+0x118>)
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d004      	beq.n	80062e4 <UART_SD_Init+0xb8>
 80062da:	4b1a      	ldr	r3, [pc, #104]	; (8006344 <UART_SD_Init+0x118>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 80062e2:	d903      	bls.n	80062ec <UART_SD_Init+0xc0>
 80062e4:	4b17      	ldr	r3, [pc, #92]	; (8006344 <UART_SD_Init+0x118>)
 80062e6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80062ea:	601a      	str	r2, [r3, #0]
	  if (params.datawidth==8 )  params.datawidth=LL_USART_DATAWIDTH_8B;  //etc etc etc .....
 80062ec:	4b15      	ldr	r3, [pc, #84]	; (8006344 <UART_SD_Init+0x118>)
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	2b08      	cmp	r3, #8
 80062f2:	d102      	bne.n	80062fa <UART_SD_Init+0xce>
 80062f4:	4b13      	ldr	r3, [pc, #76]	; (8006344 <UART_SD_Init+0x118>)
 80062f6:	2200      	movs	r2, #0
 80062f8:	605a      	str	r2, [r3, #4]
	  if (params.stopbit==1 )  params.stopbit=LL_USART_STOPBITS_1;
 80062fa:	4b12      	ldr	r3, [pc, #72]	; (8006344 <UART_SD_Init+0x118>)
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d102      	bne.n	8006308 <UART_SD_Init+0xdc>
 8006302:	4b10      	ldr	r3, [pc, #64]	; (8006344 <UART_SD_Init+0x118>)
 8006304:	2200      	movs	r2, #0
 8006306:	609a      	str	r2, [r3, #8]

	  MX_USART2_UART_Init(params);
 8006308:	4b0e      	ldr	r3, [pc, #56]	; (8006344 <UART_SD_Init+0x118>)
 800630a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800630e:	f000 fd3b 	bl	8006d88 <MX_USART2_UART_Init>
	  MX_USART1_UART_Init(params);
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <UART_SD_Init+0x118>)
 8006314:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006318:	f000 fcca 	bl	8006cb0 <MX_USART1_UART_Init>
}
 800631c:	bf00      	nop
 800631e:	bd80      	pop	{r7, pc}
 8006320:	48000400 	.word	0x48000400
 8006324:	08007218 	.word	0x08007218
 8006328:	20000cc0 	.word	0x20000cc0
 800632c:	2000124c 	.word	0x2000124c
 8006330:	0800721c 	.word	0x0800721c
 8006334:	200012d4 	.word	0x200012d4
 8006338:	200010f0 	.word	0x200010f0
 800633c:	200011c4 	.word	0x200011c4
 8006340:	0800722c 	.word	0x0800722c
 8006344:	20000cb4 	.word	0x20000cb4
 8006348:	08007238 	.word	0x08007238
 800634c:	08007244 	.word	0x08007244

08006350 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8006350:	b5b0      	push	{r4, r5, r7, lr}
 8006352:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8006354:	f7f9 ff38 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8006358:	f000 f906 	bl	8006568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800635c:	f7ff fdae 	bl	8005ebc <MX_GPIO_Init>
  MX_SPI1_Init();
 8006360:	f000 f9d8 	bl	8006714 <MX_SPI1_Init>
  MX_FATFS_Init();
 8006364:	f7ff f894 	bl	8005490 <MX_FATFS_Init>
  UART_SD_Init();
 8006368:	f7ff ff60 	bl	800622c <UART_SD_Init>



  /* USER CODE BEGIN 2 */

  USART1_RegisterCallback(process_serial_data1);
 800636c:	486f      	ldr	r0, [pc, #444]	; (800652c <main+0x1dc>)
 800636e:	f000 fc7f 	bl	8006c70 <USART1_RegisterCallback>
  USART2_RegisterCallback(process_serial_data2);
 8006372:	486f      	ldr	r0, [pc, #444]	; (8006530 <main+0x1e0>)
 8006374:	f000 fc8c 	bl	8006c90 <USART2_RegisterCallback>



	 /* create file */
	  fresult = f_open(&fil, "sniffer.txt",FA_OPEN_ALWAYS | FA_READ | FA_WRITE );
 8006378:	2213      	movs	r2, #19
 800637a:	496e      	ldr	r1, [pc, #440]	; (8006534 <main+0x1e4>)
 800637c:	486e      	ldr	r0, [pc, #440]	; (8006538 <main+0x1e8>)
 800637e:	f7fd feb5 	bl	80040ec <f_open>
 8006382:	4603      	mov	r3, r0
 8006384:	461a      	mov	r2, r3
 8006386:	4b6d      	ldr	r3, [pc, #436]	; (800653c <main+0x1ec>)
 8006388:	701a      	strb	r2, [r3, #0]

	  strcpy(buffer1,"UART Sniffer by Filipcek Zubek\n");
 800638a:	4a6d      	ldr	r2, [pc, #436]	; (8006540 <main+0x1f0>)
 800638c:	4b6d      	ldr	r3, [pc, #436]	; (8006544 <main+0x1f4>)
 800638e:	4614      	mov	r4, r2
 8006390:	461d      	mov	r5, r3
 8006392:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006394:	6020      	str	r0, [r4, #0]
 8006396:	6061      	str	r1, [r4, #4]
 8006398:	60a2      	str	r2, [r4, #8]
 800639a:	60e3      	str	r3, [r4, #12]
 800639c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800639e:	6120      	str	r0, [r4, #16]
 80063a0:	6161      	str	r1, [r4, #20]
 80063a2:	61a2      	str	r2, [r4, #24]
 80063a4:	61e3      	str	r3, [r4, #28]
	  fresult = f_write(&fil,buffer1, bufsize(buffer1),&bw);
 80063a6:	4866      	ldr	r0, [pc, #408]	; (8006540 <main+0x1f0>)
 80063a8:	f7ff fef0 	bl	800618c <bufsize>
 80063ac:	4603      	mov	r3, r0
 80063ae:	461a      	mov	r2, r3
 80063b0:	4b65      	ldr	r3, [pc, #404]	; (8006548 <main+0x1f8>)
 80063b2:	4963      	ldr	r1, [pc, #396]	; (8006540 <main+0x1f0>)
 80063b4:	4860      	ldr	r0, [pc, #384]	; (8006538 <main+0x1e8>)
 80063b6:	f7fe fa50 	bl	800485a <f_write>
 80063ba:	4603      	mov	r3, r0
 80063bc:	461a      	mov	r2, r3
 80063be:	4b5f      	ldr	r3, [pc, #380]	; (800653c <main+0x1ec>)
 80063c0:	701a      	strb	r2, [r3, #0]

  	  f_close(&fil);
 80063c2:	485d      	ldr	r0, [pc, #372]	; (8006538 <main+0x1e8>)
 80063c4:	f7fe fcea 	bl	8004d9c <f_close>

  	bufclear(buffer1);
 80063c8:	485d      	ldr	r0, [pc, #372]	; (8006540 <main+0x1f0>)
 80063ca:	f7ff fef6 	bl	80061ba <bufclear>
  while (1)
  {

    /* USER CODE END WHILE */

	  if (buffer1_ready){
 80063ce:	4b5f      	ldr	r3, [pc, #380]	; (800654c <main+0x1fc>)
 80063d0:	781b      	ldrb	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d052      	beq.n	800647c <main+0x12c>
		fresult = f_open(&fil, "sniffer.txt",FA_OPEN_ALWAYS | FA_READ | FA_WRITE );
 80063d6:	2213      	movs	r2, #19
 80063d8:	4956      	ldr	r1, [pc, #344]	; (8006534 <main+0x1e4>)
 80063da:	4857      	ldr	r0, [pc, #348]	; (8006538 <main+0x1e8>)
 80063dc:	f7fd fe86 	bl	80040ec <f_open>
 80063e0:	4603      	mov	r3, r0
 80063e2:	461a      	mov	r2, r3
 80063e4:	4b55      	ldr	r3, [pc, #340]	; (800653c <main+0x1ec>)
 80063e6:	701a      	strb	r2, [r3, #0]
		strcpy(buff_sign,"RX1;");
 80063e8:	4b59      	ldr	r3, [pc, #356]	; (8006550 <main+0x200>)
 80063ea:	4a5a      	ldr	r2, [pc, #360]	; (8006554 <main+0x204>)
 80063ec:	6810      	ldr	r0, [r2, #0]
 80063ee:	6018      	str	r0, [r3, #0]
 80063f0:	7912      	ldrb	r2, [r2, #4]
 80063f2:	711a      	strb	r2, [r3, #4]
		fresult = f_lseek(&fil, fil.fsize);
 80063f4:	4b50      	ldr	r3, [pc, #320]	; (8006538 <main+0x1e8>)
 80063f6:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80063fa:	4619      	mov	r1, r3
 80063fc:	484e      	ldr	r0, [pc, #312]	; (8006538 <main+0x1e8>)
 80063fe:	f7fe fcf5 	bl	8004dec <f_lseek>
 8006402:	4603      	mov	r3, r0
 8006404:	461a      	mov	r2, r3
 8006406:	4b4d      	ldr	r3, [pc, #308]	; (800653c <main+0x1ec>)
 8006408:	701a      	strb	r2, [r3, #0]
		fresult = f_write(&fil,buff_sign, bufsize(buff_sign),&bw);
 800640a:	4851      	ldr	r0, [pc, #324]	; (8006550 <main+0x200>)
 800640c:	f7ff febe 	bl	800618c <bufsize>
 8006410:	4603      	mov	r3, r0
 8006412:	461a      	mov	r2, r3
 8006414:	4b4c      	ldr	r3, [pc, #304]	; (8006548 <main+0x1f8>)
 8006416:	494e      	ldr	r1, [pc, #312]	; (8006550 <main+0x200>)
 8006418:	4847      	ldr	r0, [pc, #284]	; (8006538 <main+0x1e8>)
 800641a:	f7fe fa1e 	bl	800485a <f_write>
 800641e:	4603      	mov	r3, r0
 8006420:	461a      	mov	r2, r3
 8006422:	4b46      	ldr	r3, [pc, #280]	; (800653c <main+0x1ec>)
 8006424:	701a      	strb	r2, [r3, #0]
		fresult = f_write(&fil,buffer1, bufsize(buffer1),&bw);
 8006426:	4846      	ldr	r0, [pc, #280]	; (8006540 <main+0x1f0>)
 8006428:	f7ff feb0 	bl	800618c <bufsize>
 800642c:	4603      	mov	r3, r0
 800642e:	461a      	mov	r2, r3
 8006430:	4b45      	ldr	r3, [pc, #276]	; (8006548 <main+0x1f8>)
 8006432:	4943      	ldr	r1, [pc, #268]	; (8006540 <main+0x1f0>)
 8006434:	4840      	ldr	r0, [pc, #256]	; (8006538 <main+0x1e8>)
 8006436:	f7fe fa10 	bl	800485a <f_write>
 800643a:	4603      	mov	r3, r0
 800643c:	461a      	mov	r2, r3
 800643e:	4b3f      	ldr	r3, [pc, #252]	; (800653c <main+0x1ec>)
 8006440:	701a      	strb	r2, [r3, #0]
		strcpy(buff_sign,";\n");
 8006442:	4b43      	ldr	r3, [pc, #268]	; (8006550 <main+0x200>)
 8006444:	4a44      	ldr	r2, [pc, #272]	; (8006558 <main+0x208>)
 8006446:	8811      	ldrh	r1, [r2, #0]
 8006448:	7892      	ldrb	r2, [r2, #2]
 800644a:	8019      	strh	r1, [r3, #0]
 800644c:	709a      	strb	r2, [r3, #2]
		fresult = f_write(&fil,buff_sign, bufsize(buff_sign),&bw);
 800644e:	4840      	ldr	r0, [pc, #256]	; (8006550 <main+0x200>)
 8006450:	f7ff fe9c 	bl	800618c <bufsize>
 8006454:	4603      	mov	r3, r0
 8006456:	461a      	mov	r2, r3
 8006458:	4b3b      	ldr	r3, [pc, #236]	; (8006548 <main+0x1f8>)
 800645a:	493d      	ldr	r1, [pc, #244]	; (8006550 <main+0x200>)
 800645c:	4836      	ldr	r0, [pc, #216]	; (8006538 <main+0x1e8>)
 800645e:	f7fe f9fc 	bl	800485a <f_write>
 8006462:	4603      	mov	r3, r0
 8006464:	461a      	mov	r2, r3
 8006466:	4b35      	ldr	r3, [pc, #212]	; (800653c <main+0x1ec>)
 8006468:	701a      	strb	r2, [r3, #0]
	    f_close(&fil);
 800646a:	4833      	ldr	r0, [pc, #204]	; (8006538 <main+0x1e8>)
 800646c:	f7fe fc96 	bl	8004d9c <f_close>
	    bufclear(buffer1);
 8006470:	4833      	ldr	r0, [pc, #204]	; (8006540 <main+0x1f0>)
 8006472:	f7ff fea2 	bl	80061ba <bufclear>
	    buffer1_ready=0;
 8006476:	4b35      	ldr	r3, [pc, #212]	; (800654c <main+0x1fc>)
 8006478:	2200      	movs	r2, #0
 800647a:	701a      	strb	r2, [r3, #0]
	  }

	  if (buffer2_ready){
 800647c:	4b37      	ldr	r3, [pc, #220]	; (800655c <main+0x20c>)
 800647e:	781b      	ldrb	r3, [r3, #0]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0a4      	beq.n	80063ce <main+0x7e>
		fresult = f_open(&fil, "sniffer.txt",FA_OPEN_ALWAYS | FA_READ | FA_WRITE );
 8006484:	2213      	movs	r2, #19
 8006486:	492b      	ldr	r1, [pc, #172]	; (8006534 <main+0x1e4>)
 8006488:	482b      	ldr	r0, [pc, #172]	; (8006538 <main+0x1e8>)
 800648a:	f7fd fe2f 	bl	80040ec <f_open>
 800648e:	4603      	mov	r3, r0
 8006490:	461a      	mov	r2, r3
 8006492:	4b2a      	ldr	r3, [pc, #168]	; (800653c <main+0x1ec>)
 8006494:	701a      	strb	r2, [r3, #0]
		strcpy(buff_sign,"RX2;");
 8006496:	4b2e      	ldr	r3, [pc, #184]	; (8006550 <main+0x200>)
 8006498:	4a31      	ldr	r2, [pc, #196]	; (8006560 <main+0x210>)
 800649a:	6810      	ldr	r0, [r2, #0]
 800649c:	6018      	str	r0, [r3, #0]
 800649e:	7912      	ldrb	r2, [r2, #4]
 80064a0:	711a      	strb	r2, [r3, #4]
		fresult = f_lseek(&fil, fil.fsize);
 80064a2:	4b25      	ldr	r3, [pc, #148]	; (8006538 <main+0x1e8>)
 80064a4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80064a8:	4619      	mov	r1, r3
 80064aa:	4823      	ldr	r0, [pc, #140]	; (8006538 <main+0x1e8>)
 80064ac:	f7fe fc9e 	bl	8004dec <f_lseek>
 80064b0:	4603      	mov	r3, r0
 80064b2:	461a      	mov	r2, r3
 80064b4:	4b21      	ldr	r3, [pc, #132]	; (800653c <main+0x1ec>)
 80064b6:	701a      	strb	r2, [r3, #0]
		fresult = f_write(&fil,buff_sign, bufsize(buff_sign),&bw);
 80064b8:	4825      	ldr	r0, [pc, #148]	; (8006550 <main+0x200>)
 80064ba:	f7ff fe67 	bl	800618c <bufsize>
 80064be:	4603      	mov	r3, r0
 80064c0:	461a      	mov	r2, r3
 80064c2:	4b21      	ldr	r3, [pc, #132]	; (8006548 <main+0x1f8>)
 80064c4:	4922      	ldr	r1, [pc, #136]	; (8006550 <main+0x200>)
 80064c6:	481c      	ldr	r0, [pc, #112]	; (8006538 <main+0x1e8>)
 80064c8:	f7fe f9c7 	bl	800485a <f_write>
 80064cc:	4603      	mov	r3, r0
 80064ce:	461a      	mov	r2, r3
 80064d0:	4b1a      	ldr	r3, [pc, #104]	; (800653c <main+0x1ec>)
 80064d2:	701a      	strb	r2, [r3, #0]
		fresult = f_write(&fil,buffer2, bufsize(buffer2),&bw);
 80064d4:	4823      	ldr	r0, [pc, #140]	; (8006564 <main+0x214>)
 80064d6:	f7ff fe59 	bl	800618c <bufsize>
 80064da:	4603      	mov	r3, r0
 80064dc:	461a      	mov	r2, r3
 80064de:	4b1a      	ldr	r3, [pc, #104]	; (8006548 <main+0x1f8>)
 80064e0:	4920      	ldr	r1, [pc, #128]	; (8006564 <main+0x214>)
 80064e2:	4815      	ldr	r0, [pc, #84]	; (8006538 <main+0x1e8>)
 80064e4:	f7fe f9b9 	bl	800485a <f_write>
 80064e8:	4603      	mov	r3, r0
 80064ea:	461a      	mov	r2, r3
 80064ec:	4b13      	ldr	r3, [pc, #76]	; (800653c <main+0x1ec>)
 80064ee:	701a      	strb	r2, [r3, #0]
		strcpy(buff_sign,";\n");
 80064f0:	4b17      	ldr	r3, [pc, #92]	; (8006550 <main+0x200>)
 80064f2:	4a19      	ldr	r2, [pc, #100]	; (8006558 <main+0x208>)
 80064f4:	8811      	ldrh	r1, [r2, #0]
 80064f6:	7892      	ldrb	r2, [r2, #2]
 80064f8:	8019      	strh	r1, [r3, #0]
 80064fa:	709a      	strb	r2, [r3, #2]
		fresult = f_write(&fil,buff_sign, bufsize(buff_sign),&bw);
 80064fc:	4814      	ldr	r0, [pc, #80]	; (8006550 <main+0x200>)
 80064fe:	f7ff fe45 	bl	800618c <bufsize>
 8006502:	4603      	mov	r3, r0
 8006504:	461a      	mov	r2, r3
 8006506:	4b10      	ldr	r3, [pc, #64]	; (8006548 <main+0x1f8>)
 8006508:	4911      	ldr	r1, [pc, #68]	; (8006550 <main+0x200>)
 800650a:	480b      	ldr	r0, [pc, #44]	; (8006538 <main+0x1e8>)
 800650c:	f7fe f9a5 	bl	800485a <f_write>
 8006510:	4603      	mov	r3, r0
 8006512:	461a      	mov	r2, r3
 8006514:	4b09      	ldr	r3, [pc, #36]	; (800653c <main+0x1ec>)
 8006516:	701a      	strb	r2, [r3, #0]
	    f_close(&fil);
 8006518:	4807      	ldr	r0, [pc, #28]	; (8006538 <main+0x1e8>)
 800651a:	f7fe fc3f 	bl	8004d9c <f_close>
	    bufclear(buffer2);
 800651e:	4811      	ldr	r0, [pc, #68]	; (8006564 <main+0x214>)
 8006520:	f7ff fe4b 	bl	80061ba <bufclear>
	    buffer2_ready=0;
 8006524:	4b0d      	ldr	r3, [pc, #52]	; (800655c <main+0x20c>)
 8006526:	2200      	movs	r2, #0
 8006528:	701a      	strb	r2, [r3, #0]
	  if (buffer1_ready){
 800652a:	e750      	b.n	80063ce <main+0x7e>
 800652c:	080065ed 	.word	0x080065ed
 8006530:	08006679 	.word	0x08006679
 8006534:	0800724c 	.word	0x0800724c
 8006538:	200012d4 	.word	0x200012d4
 800653c:	2000124c 	.word	0x2000124c
 8006540:	20001254 	.word	0x20001254
 8006544:	08007258 	.word	0x08007258
 8006548:	20001244 	.word	0x20001244
 800654c:	2000043a 	.word	0x2000043a
 8006550:	20001184 	.word	0x20001184
 8006554:	08007278 	.word	0x08007278
 8006558:	08007280 	.word	0x08007280
 800655c:	2000043b 	.word	0x2000043b
 8006560:	08007284 	.word	0x08007284
 8006564:	20001100 	.word	0x20001100

08006568 <SystemClock_Config>:
  * @brief System Clock Configuration
  * @retval None
  */

void SystemClock_Config(void)
{
 8006568:	b580      	push	{r7, lr}
 800656a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_2);
 800656c:	2002      	movs	r0, #2
 800656e:	f7ff fdcf 	bl	8006110 <LL_FLASH_SetLatency>

   if(LL_FLASH_GetLatency() != LL_FLASH_LATENCY_2)
 8006572:	f7ff fde1 	bl	8006138 <LL_FLASH_GetLatency>
 8006576:	4603      	mov	r3, r0
 8006578:	2b02      	cmp	r3, #2
 800657a:	d001      	beq.n	8006580 <SystemClock_Config+0x18>
  {
  Error_Handler();  
 800657c:	f000 f8c2 	bl	8006704 <Error_Handler>
  }
  LL_RCC_HSI_Enable();
 8006580:	f7ff fccc 	bl	8005f1c <LL_RCC_HSI_Enable>

  //  Wait till HSI is ready
  while(LL_RCC_HSI_IsReady() != 1)
 8006584:	bf00      	nop
 8006586:	f7ff fcd9 	bl	8005f3c <LL_RCC_HSI_IsReady>
 800658a:	4603      	mov	r3, r0
 800658c:	2b01      	cmp	r3, #1
 800658e:	d1fa      	bne.n	8006586 <SystemClock_Config+0x1e>
  {
    
  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8006590:	2010      	movs	r0, #16
 8006592:	f7ff fce5 	bl	8005f60 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI_DIV_2, LL_RCC_PLL_MUL_16);
 8006596:	f44f 1160 	mov.w	r1, #3670016	; 0x380000
 800659a:	2000      	movs	r0, #0
 800659c:	f7ff fd94 	bl	80060c8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 80065a0:	f7ff fd6e 	bl	8006080 <LL_RCC_PLL_Enable>

  //  Wait till PLL is ready
  while(LL_RCC_PLL_IsReady() != 1)
 80065a4:	bf00      	nop
 80065a6:	f7ff fd7b 	bl	80060a0 <LL_RCC_PLL_IsReady>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b01      	cmp	r3, #1
 80065ae:	d1fa      	bne.n	80065a6 <SystemClock_Config+0x3e>
  {
    
  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80065b0:	2000      	movs	r0, #0
 80065b2:	f7ff fd0d 	bl	8005fd0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80065b6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80065ba:	f7ff fd1d 	bl	8005ff8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80065be:	2000      	movs	r0, #0
 80065c0:	f7ff fd2e 	bl	8006020 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80065c4:	2002      	movs	r0, #2
 80065c6:	f7ff fce1 	bl	8005f8c <LL_RCC_SetSysClkSource>

   // Wait till System clock is ready
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80065ca:	bf00      	nop
 80065cc:	f7ff fcf2 	bl	8005fb4 <LL_RCC_GetSysClkSource>
 80065d0:	4603      	mov	r3, r0
 80065d2:	2b08      	cmp	r3, #8
 80065d4:	d1fa      	bne.n	80065cc <SystemClock_Config+0x64>
  {
  
  }
  LL_SetSystemCoreClock(64000000);
 80065d6:	4804      	ldr	r0, [pc, #16]	; (80065e8 <SystemClock_Config+0x80>)
 80065d8:	f7fb f9ec 	bl	80019b4 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART1_CLKSOURCE_PCLK1);
 80065dc:	2000      	movs	r0, #0
 80065de:	f7ff fd33 	bl	8006048 <LL_RCC_SetUSARTClockSource>
}
 80065e2:	bf00      	nop
 80065e4:	bd80      	pop	{r7, pc}
 80065e6:	bf00      	nop
 80065e8:	03d09000 	.word	0x03d09000

080065ec <process_serial_data1>:

/* USER CODE BEGIN 4 */
void process_serial_data1(uint8_t ch)
{
 80065ec:	b480      	push	{r7}
 80065ee:	b083      	sub	sp, #12
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	4603      	mov	r3, r0
 80065f4:	71fb      	strb	r3, [r7, #7]
	buffer1[count1]=ch;
 80065f6:	4b1d      	ldr	r3, [pc, #116]	; (800666c <process_serial_data1+0x80>)
 80065f8:	781b      	ldrb	r3, [r3, #0]
 80065fa:	4619      	mov	r1, r3
 80065fc:	4a1c      	ldr	r2, [pc, #112]	; (8006670 <process_serial_data1+0x84>)
 80065fe:	79fb      	ldrb	r3, [r7, #7]
 8006600:	5453      	strb	r3, [r2, r1]

	if (buffer1[count1]=='\n' || buffer1[count1]=='\r' || (buffer1[count1-1]=='\r' && buffer1[count1]=='\n') ){
 8006602:	4b1a      	ldr	r3, [pc, #104]	; (800666c <process_serial_data1+0x80>)
 8006604:	781b      	ldrb	r3, [r3, #0]
 8006606:	461a      	mov	r2, r3
 8006608:	4b19      	ldr	r3, [pc, #100]	; (8006670 <process_serial_data1+0x84>)
 800660a:	5c9b      	ldrb	r3, [r3, r2]
 800660c:	2b0a      	cmp	r3, #10
 800660e:	d014      	beq.n	800663a <process_serial_data1+0x4e>
 8006610:	4b16      	ldr	r3, [pc, #88]	; (800666c <process_serial_data1+0x80>)
 8006612:	781b      	ldrb	r3, [r3, #0]
 8006614:	461a      	mov	r2, r3
 8006616:	4b16      	ldr	r3, [pc, #88]	; (8006670 <process_serial_data1+0x84>)
 8006618:	5c9b      	ldrb	r3, [r3, r2]
 800661a:	2b0d      	cmp	r3, #13
 800661c:	d00d      	beq.n	800663a <process_serial_data1+0x4e>
 800661e:	4b13      	ldr	r3, [pc, #76]	; (800666c <process_serial_data1+0x80>)
 8006620:	781b      	ldrb	r3, [r3, #0]
 8006622:	3b01      	subs	r3, #1
 8006624:	4a12      	ldr	r2, [pc, #72]	; (8006670 <process_serial_data1+0x84>)
 8006626:	5cd3      	ldrb	r3, [r2, r3]
 8006628:	2b0d      	cmp	r3, #13
 800662a:	d113      	bne.n	8006654 <process_serial_data1+0x68>
 800662c:	4b0f      	ldr	r3, [pc, #60]	; (800666c <process_serial_data1+0x80>)
 800662e:	781b      	ldrb	r3, [r3, #0]
 8006630:	461a      	mov	r2, r3
 8006632:	4b0f      	ldr	r3, [pc, #60]	; (8006670 <process_serial_data1+0x84>)
 8006634:	5c9b      	ldrb	r3, [r3, r2]
 8006636:	2b0a      	cmp	r3, #10
 8006638:	d10c      	bne.n	8006654 <process_serial_data1+0x68>
		buffer1[count1]=0;
 800663a:	4b0c      	ldr	r3, [pc, #48]	; (800666c <process_serial_data1+0x80>)
 800663c:	781b      	ldrb	r3, [r3, #0]
 800663e:	461a      	mov	r2, r3
 8006640:	4b0b      	ldr	r3, [pc, #44]	; (8006670 <process_serial_data1+0x84>)
 8006642:	2100      	movs	r1, #0
 8006644:	5499      	strb	r1, [r3, r2]
		buffer1_ready=1;
 8006646:	4b0b      	ldr	r3, [pc, #44]	; (8006674 <process_serial_data1+0x88>)
 8006648:	2201      	movs	r2, #1
 800664a:	701a      	strb	r2, [r3, #0]
		count1=0;
 800664c:	4b07      	ldr	r3, [pc, #28]	; (800666c <process_serial_data1+0x80>)
 800664e:	2200      	movs	r2, #0
 8006650:	701a      	strb	r2, [r3, #0]
		return;
 8006652:	e005      	b.n	8006660 <process_serial_data1+0x74>
	}
	count1++;
 8006654:	4b05      	ldr	r3, [pc, #20]	; (800666c <process_serial_data1+0x80>)
 8006656:	781b      	ldrb	r3, [r3, #0]
 8006658:	3301      	adds	r3, #1
 800665a:	b2da      	uxtb	r2, r3
 800665c:	4b03      	ldr	r3, [pc, #12]	; (800666c <process_serial_data1+0x80>)
 800665e:	701a      	strb	r2, [r3, #0]
}
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
 800666a:	bf00      	nop
 800666c:	2000043c 	.word	0x2000043c
 8006670:	20001254 	.word	0x20001254
 8006674:	2000043a 	.word	0x2000043a

08006678 <process_serial_data2>:

void process_serial_data2(uint8_t ch)
{
 8006678:	b480      	push	{r7}
 800667a:	b083      	sub	sp, #12
 800667c:	af00      	add	r7, sp, #0
 800667e:	4603      	mov	r3, r0
 8006680:	71fb      	strb	r3, [r7, #7]
	buffer2[count2]=ch;
 8006682:	4b1d      	ldr	r3, [pc, #116]	; (80066f8 <process_serial_data2+0x80>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	4619      	mov	r1, r3
 8006688:	4a1c      	ldr	r2, [pc, #112]	; (80066fc <process_serial_data2+0x84>)
 800668a:	79fb      	ldrb	r3, [r7, #7]
 800668c:	5453      	strb	r3, [r2, r1]

	if (buffer2[count2]=='\n' || buffer2[count2]=='\r' || (buffer2[count2-1]=='\r' && buffer2[count2]=='\n')){
 800668e:	4b1a      	ldr	r3, [pc, #104]	; (80066f8 <process_serial_data2+0x80>)
 8006690:	781b      	ldrb	r3, [r3, #0]
 8006692:	461a      	mov	r2, r3
 8006694:	4b19      	ldr	r3, [pc, #100]	; (80066fc <process_serial_data2+0x84>)
 8006696:	5c9b      	ldrb	r3, [r3, r2]
 8006698:	2b0a      	cmp	r3, #10
 800669a:	d014      	beq.n	80066c6 <process_serial_data2+0x4e>
 800669c:	4b16      	ldr	r3, [pc, #88]	; (80066f8 <process_serial_data2+0x80>)
 800669e:	781b      	ldrb	r3, [r3, #0]
 80066a0:	461a      	mov	r2, r3
 80066a2:	4b16      	ldr	r3, [pc, #88]	; (80066fc <process_serial_data2+0x84>)
 80066a4:	5c9b      	ldrb	r3, [r3, r2]
 80066a6:	2b0d      	cmp	r3, #13
 80066a8:	d00d      	beq.n	80066c6 <process_serial_data2+0x4e>
 80066aa:	4b13      	ldr	r3, [pc, #76]	; (80066f8 <process_serial_data2+0x80>)
 80066ac:	781b      	ldrb	r3, [r3, #0]
 80066ae:	3b01      	subs	r3, #1
 80066b0:	4a12      	ldr	r2, [pc, #72]	; (80066fc <process_serial_data2+0x84>)
 80066b2:	5cd3      	ldrb	r3, [r2, r3]
 80066b4:	2b0d      	cmp	r3, #13
 80066b6:	d113      	bne.n	80066e0 <process_serial_data2+0x68>
 80066b8:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <process_serial_data2+0x80>)
 80066ba:	781b      	ldrb	r3, [r3, #0]
 80066bc:	461a      	mov	r2, r3
 80066be:	4b0f      	ldr	r3, [pc, #60]	; (80066fc <process_serial_data2+0x84>)
 80066c0:	5c9b      	ldrb	r3, [r3, r2]
 80066c2:	2b0a      	cmp	r3, #10
 80066c4:	d10c      	bne.n	80066e0 <process_serial_data2+0x68>
		buffer2[count2]=0;
 80066c6:	4b0c      	ldr	r3, [pc, #48]	; (80066f8 <process_serial_data2+0x80>)
 80066c8:	781b      	ldrb	r3, [r3, #0]
 80066ca:	461a      	mov	r2, r3
 80066cc:	4b0b      	ldr	r3, [pc, #44]	; (80066fc <process_serial_data2+0x84>)
 80066ce:	2100      	movs	r1, #0
 80066d0:	5499      	strb	r1, [r3, r2]
		buffer2_ready=1;
 80066d2:	4b0b      	ldr	r3, [pc, #44]	; (8006700 <process_serial_data2+0x88>)
 80066d4:	2201      	movs	r2, #1
 80066d6:	701a      	strb	r2, [r3, #0]
		count2=0;
 80066d8:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <process_serial_data2+0x80>)
 80066da:	2200      	movs	r2, #0
 80066dc:	701a      	strb	r2, [r3, #0]
		return;
 80066de:	e005      	b.n	80066ec <process_serial_data2+0x74>
	}

	count2++;
 80066e0:	4b05      	ldr	r3, [pc, #20]	; (80066f8 <process_serial_data2+0x80>)
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	3301      	adds	r3, #1
 80066e6:	b2da      	uxtb	r2, r3
 80066e8:	4b03      	ldr	r3, [pc, #12]	; (80066f8 <process_serial_data2+0x80>)
 80066ea:	701a      	strb	r2, [r3, #0]
}
 80066ec:	370c      	adds	r7, #12
 80066ee:	46bd      	mov	sp, r7
 80066f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	2000043d 	.word	0x2000043d
 80066fc:	20001100 	.word	0x20001100
 8006700:	2000043b 	.word	0x2000043b

08006704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8006708:	bf00      	nop
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr
	...

08006714 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	af00      	add	r7, sp, #0

  hspi1.Instance = SPI1;
 8006718:	4b1b      	ldr	r3, [pc, #108]	; (8006788 <MX_SPI1_Init+0x74>)
 800671a:	4a1c      	ldr	r2, [pc, #112]	; (800678c <MX_SPI1_Init+0x78>)
 800671c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800671e:	4b1a      	ldr	r3, [pc, #104]	; (8006788 <MX_SPI1_Init+0x74>)
 8006720:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006724:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8006726:	4b18      	ldr	r3, [pc, #96]	; (8006788 <MX_SPI1_Init+0x74>)
 8006728:	2200      	movs	r2, #0
 800672a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800672c:	4b16      	ldr	r3, [pc, #88]	; (8006788 <MX_SPI1_Init+0x74>)
 800672e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8006732:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8006734:	4b14      	ldr	r3, [pc, #80]	; (8006788 <MX_SPI1_Init+0x74>)
 8006736:	2200      	movs	r2, #0
 8006738:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800673a:	4b13      	ldr	r3, [pc, #76]	; (8006788 <MX_SPI1_Init+0x74>)
 800673c:	2200      	movs	r2, #0
 800673e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8006740:	4b11      	ldr	r3, [pc, #68]	; (8006788 <MX_SPI1_Init+0x74>)
 8006742:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006746:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006748:	4b0f      	ldr	r3, [pc, #60]	; (8006788 <MX_SPI1_Init+0x74>)
 800674a:	2200      	movs	r2, #0
 800674c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800674e:	4b0e      	ldr	r3, [pc, #56]	; (8006788 <MX_SPI1_Init+0x74>)
 8006750:	2200      	movs	r2, #0
 8006752:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8006754:	4b0c      	ldr	r3, [pc, #48]	; (8006788 <MX_SPI1_Init+0x74>)
 8006756:	2200      	movs	r2, #0
 8006758:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800675a:	4b0b      	ldr	r3, [pc, #44]	; (8006788 <MX_SPI1_Init+0x74>)
 800675c:	2200      	movs	r2, #0
 800675e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8006760:	4b09      	ldr	r3, [pc, #36]	; (8006788 <MX_SPI1_Init+0x74>)
 8006762:	2207      	movs	r2, #7
 8006764:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8006766:	4b08      	ldr	r3, [pc, #32]	; (8006788 <MX_SPI1_Init+0x74>)
 8006768:	2200      	movs	r2, #0
 800676a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800676c:	4b06      	ldr	r3, [pc, #24]	; (8006788 <MX_SPI1_Init+0x74>)
 800676e:	2208      	movs	r2, #8
 8006770:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8006772:	4805      	ldr	r0, [pc, #20]	; (8006788 <MX_SPI1_Init+0x74>)
 8006774:	f7fa f802 	bl	800077c <HAL_SPI_Init>
 8006778:	4603      	mov	r3, r0
 800677a:	2b00      	cmp	r3, #0
 800677c:	d001      	beq.n	8006782 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800677e:	f7ff ffc1 	bl	8006704 <Error_Handler>
  }

}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	20001700 	.word	0x20001700
 800678c:	40013000 	.word	0x40013000

08006790 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	; 0x28
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006798:	f107 0314 	add.w	r3, r7, #20
 800679c:	2200      	movs	r2, #0
 800679e:	601a      	str	r2, [r3, #0]
 80067a0:	605a      	str	r2, [r3, #4]
 80067a2:	609a      	str	r2, [r3, #8]
 80067a4:	60da      	str	r2, [r3, #12]
 80067a6:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	4a17      	ldr	r2, [pc, #92]	; (800680c <HAL_SPI_MspInit+0x7c>)
 80067ae:	4293      	cmp	r3, r2
 80067b0:	d128      	bne.n	8006804 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80067b2:	4b17      	ldr	r3, [pc, #92]	; (8006810 <HAL_SPI_MspInit+0x80>)
 80067b4:	699b      	ldr	r3, [r3, #24]
 80067b6:	4a16      	ldr	r2, [pc, #88]	; (8006810 <HAL_SPI_MspInit+0x80>)
 80067b8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80067bc:	6193      	str	r3, [r2, #24]
 80067be:	4b14      	ldr	r3, [pc, #80]	; (8006810 <HAL_SPI_MspInit+0x80>)
 80067c0:	699b      	ldr	r3, [r3, #24]
 80067c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067c6:	613b      	str	r3, [r7, #16]
 80067c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80067ca:	4b11      	ldr	r3, [pc, #68]	; (8006810 <HAL_SPI_MspInit+0x80>)
 80067cc:	695b      	ldr	r3, [r3, #20]
 80067ce:	4a10      	ldr	r2, [pc, #64]	; (8006810 <HAL_SPI_MspInit+0x80>)
 80067d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80067d4:	6153      	str	r3, [r2, #20]
 80067d6:	4b0e      	ldr	r3, [pc, #56]	; (8006810 <HAL_SPI_MspInit+0x80>)
 80067d8:	695b      	ldr	r3, [r3, #20]
 80067da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067de:	60fb      	str	r3, [r7, #12]
 80067e0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80067e2:	23e0      	movs	r3, #224	; 0xe0
 80067e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80067e6:	2302      	movs	r3, #2
 80067e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80067ea:	2300      	movs	r3, #0
 80067ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80067ee:	2303      	movs	r3, #3
 80067f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80067f2:	2305      	movs	r3, #5
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80067f6:	f107 0314 	add.w	r3, r7, #20
 80067fa:	4619      	mov	r1, r3
 80067fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006800:	f7f9 fe2e 	bl	8000460 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8006804:	bf00      	nop
 8006806:	3728      	adds	r7, #40	; 0x28
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40013000 	.word	0x40013000
 8006810:	40021000 	.word	0x40021000

08006814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800681a:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <HAL_MspInit+0x44>)
 800681c:	699b      	ldr	r3, [r3, #24]
 800681e:	4a0e      	ldr	r2, [pc, #56]	; (8006858 <HAL_MspInit+0x44>)
 8006820:	f043 0301 	orr.w	r3, r3, #1
 8006824:	6193      	str	r3, [r2, #24]
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <HAL_MspInit+0x44>)
 8006828:	699b      	ldr	r3, [r3, #24]
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	607b      	str	r3, [r7, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <HAL_MspInit+0x44>)
 8006834:	69db      	ldr	r3, [r3, #28]
 8006836:	4a08      	ldr	r2, [pc, #32]	; (8006858 <HAL_MspInit+0x44>)
 8006838:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800683c:	61d3      	str	r3, [r2, #28]
 800683e:	4b06      	ldr	r3, [pc, #24]	; (8006858 <HAL_MspInit+0x44>)
 8006840:	69db      	ldr	r3, [r3, #28]
 8006842:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006846:	603b      	str	r3, [r7, #0]
 8006848:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40021000 	.word	0x40021000

0800685c <LL_USART_IsActiveFlag_RXNE>:
  * @rmtoll ISR          RXNE          LL_USART_IsActiveFlag_RXNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE(USART_TypeDef *USARTx)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE));
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	69db      	ldr	r3, [r3, #28]
 8006868:	f003 0320 	and.w	r3, r3, #32
 800686c:	2b20      	cmp	r3, #32
 800686e:	bf0c      	ite	eq
 8006870:	2301      	moveq	r3, #1
 8006872:	2300      	movne	r3, #0
 8006874:	b2db      	uxtb	r3, r3
}
 8006876:	4618      	mov	r0, r3
 8006878:	370c      	adds	r7, #12
 800687a:	46bd      	mov	sp, r7
 800687c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006880:	4770      	bx	lr

08006882 <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
 8006882:	b480      	push	{r7}
 8006884:	b083      	sub	sp, #12
 8006886:	af00      	add	r7, sp, #0
 8006888:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR));
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800688e:	b29b      	uxth	r3, r3
 8006890:	b2db      	uxtb	r3, r3
}
 8006892:	4618      	mov	r0, r3
 8006894:	370c      	adds	r7, #12
 8006896:	46bd      	mov	sp, r7
 8006898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689c:	4770      	bx	lr
	...

080068a0 <SDTimer_Handler>:

/* Private function prototypes -----------------------------------------------*/
/* USER CODE BEGIN PFP */

void SDTimer_Handler(void)
{
 80068a0:	b480      	push	{r7}
 80068a2:	af00      	add	r7, sp, #0
  if(Timer1 > 0)
 80068a4:	4b0c      	ldr	r3, [pc, #48]	; (80068d8 <SDTimer_Handler+0x38>)
 80068a6:	781b      	ldrb	r3, [r3, #0]
 80068a8:	b2db      	uxtb	r3, r3
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d006      	beq.n	80068bc <SDTimer_Handler+0x1c>
    Timer1--;
 80068ae:	4b0a      	ldr	r3, [pc, #40]	; (80068d8 <SDTimer_Handler+0x38>)
 80068b0:	781b      	ldrb	r3, [r3, #0]
 80068b2:	b2db      	uxtb	r3, r3
 80068b4:	3b01      	subs	r3, #1
 80068b6:	b2da      	uxtb	r2, r3
 80068b8:	4b07      	ldr	r3, [pc, #28]	; (80068d8 <SDTimer_Handler+0x38>)
 80068ba:	701a      	strb	r2, [r3, #0]

  if(Timer2 > 0)
 80068bc:	4b07      	ldr	r3, [pc, #28]	; (80068dc <SDTimer_Handler+0x3c>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	dd04      	ble.n	80068ce <SDTimer_Handler+0x2e>
    Timer2--;
 80068c4:	4b05      	ldr	r3, [pc, #20]	; (80068dc <SDTimer_Handler+0x3c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3b01      	subs	r3, #1
 80068ca:	4a04      	ldr	r2, [pc, #16]	; (80068dc <SDTimer_Handler+0x3c>)
 80068cc:	6013      	str	r3, [r2, #0]
}
 80068ce:	bf00      	nop
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr
 80068d8:	20001768 	.word	0x20001768
 80068dc:	20001764 	.word	0x20001764

080068e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80068e0:	b480      	push	{r7}
 80068e2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80068e4:	bf00      	nop
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr

080068ee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80068ee:	b480      	push	{r7}
 80068f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80068f2:	e7fe      	b.n	80068f2 <HardFault_Handler+0x4>

080068f4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80068f4:	b480      	push	{r7}
 80068f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80068f8:	e7fe      	b.n	80068f8 <MemManage_Handler+0x4>

080068fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80068fa:	b480      	push	{r7}
 80068fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80068fe:	e7fe      	b.n	80068fe <BusFault_Handler+0x4>

08006900 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006900:	b480      	push	{r7}
 8006902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006904:	e7fe      	b.n	8006904 <UsageFault_Handler+0x4>

08006906 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006906:	b480      	push	{r7}
 8006908:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800690a:	bf00      	nop
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr

08006914 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006914:	b480      	push	{r7}
 8006916:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006918:	bf00      	nop
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr

08006922 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006922:	b480      	push	{r7}
 8006924:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006926:	bf00      	nop
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr

08006930 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006930:	b580      	push	{r7, lr}
 8006932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

	  FatFsCnt++;
 8006934:	4b0a      	ldr	r3, [pc, #40]	; (8006960 <SysTick_Handler+0x30>)
 8006936:	781b      	ldrb	r3, [r3, #0]
 8006938:	b2db      	uxtb	r3, r3
 800693a:	3301      	adds	r3, #1
 800693c:	b2da      	uxtb	r2, r3
 800693e:	4b08      	ldr	r3, [pc, #32]	; (8006960 <SysTick_Handler+0x30>)
 8006940:	701a      	strb	r2, [r3, #0]
	  if(FatFsCnt >= 10)
 8006942:	4b07      	ldr	r3, [pc, #28]	; (8006960 <SysTick_Handler+0x30>)
 8006944:	781b      	ldrb	r3, [r3, #0]
 8006946:	b2db      	uxtb	r3, r3
 8006948:	2b09      	cmp	r3, #9
 800694a:	d904      	bls.n	8006956 <SysTick_Handler+0x26>
	  {
	    FatFsCnt = 0;
 800694c:	4b04      	ldr	r3, [pc, #16]	; (8006960 <SysTick_Handler+0x30>)
 800694e:	2200      	movs	r2, #0
 8006950:	701a      	strb	r2, [r3, #0]
	    SDTimer_Handler();
 8006952:	f7ff ffa5 	bl	80068a0 <SDTimer_Handler>
	  }
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006956:	f7f9 fc7d 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800695a:	bf00      	nop
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	2000043e 	.word	0x2000043e

08006964 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 8006964:	b580      	push	{r7, lr}
 8006966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART1))
 8006968:	4807      	ldr	r0, [pc, #28]	; (8006988 <USART1_IRQHandler+0x24>)
 800696a:	f7ff ff77 	bl	800685c <LL_USART_IsActiveFlag_RXNE>
 800696e:	4603      	mov	r3, r0
 8006970:	2b00      	cmp	r3, #0
 8006972:	d006      	beq.n	8006982 <USART1_IRQHandler+0x1e>
			{
				rx_usart1(LL_USART_ReceiveData8(USART1));
 8006974:	4804      	ldr	r0, [pc, #16]	; (8006988 <USART1_IRQHandler+0x24>)
 8006976:	f7ff ff84 	bl	8006882 <LL_USART_ReceiveData8>
 800697a:	4603      	mov	r3, r0
 800697c:	4618      	mov	r0, r3
 800697e:	f000 fa6d 	bl	8006e5c <rx_usart1>
			}
  /* USER CODE END USART1_IRQn 0 */
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8006982:	bf00      	nop
 8006984:	bd80      	pop	{r7, pc}
 8006986:	bf00      	nop
 8006988:	40013800 	.word	0x40013800

0800698c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	if(LL_USART_IsActiveFlag_RXNE(USART2))
 8006990:	4807      	ldr	r0, [pc, #28]	; (80069b0 <USART2_IRQHandler+0x24>)
 8006992:	f7ff ff63 	bl	800685c <LL_USART_IsActiveFlag_RXNE>
 8006996:	4603      	mov	r3, r0
 8006998:	2b00      	cmp	r3, #0
 800699a:	d006      	beq.n	80069aa <USART2_IRQHandler+0x1e>
		{
			rx_usart2(LL_USART_ReceiveData8(USART2));
 800699c:	4804      	ldr	r0, [pc, #16]	; (80069b0 <USART2_IRQHandler+0x24>)
 800699e:	f7ff ff70 	bl	8006882 <LL_USART_ReceiveData8>
 80069a2:	4603      	mov	r3, r0
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 fa6d 	bl	8006e84 <rx_usart2>
		}
  /* USER CODE END USART2_IRQn 0 */
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80069aa:	bf00      	nop
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40004400 	.word	0x40004400

080069b4 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069b4:	b480      	push	{r7}
 80069b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069b8:	4b1f      	ldr	r3, [pc, #124]	; (8006a38 <SystemInit+0x84>)
 80069ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069be:	4a1e      	ldr	r2, [pc, #120]	; (8006a38 <SystemInit+0x84>)
 80069c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80069c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80069c8:	4b1c      	ldr	r3, [pc, #112]	; (8006a3c <SystemInit+0x88>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a1b      	ldr	r2, [pc, #108]	; (8006a3c <SystemInit+0x88>)
 80069ce:	f043 0301 	orr.w	r3, r3, #1
 80069d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80069d4:	4b19      	ldr	r3, [pc, #100]	; (8006a3c <SystemInit+0x88>)
 80069d6:	685a      	ldr	r2, [r3, #4]
 80069d8:	4918      	ldr	r1, [pc, #96]	; (8006a3c <SystemInit+0x88>)
 80069da:	4b19      	ldr	r3, [pc, #100]	; (8006a40 <SystemInit+0x8c>)
 80069dc:	4013      	ands	r3, r2
 80069de:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80069e0:	4b16      	ldr	r3, [pc, #88]	; (8006a3c <SystemInit+0x88>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a15      	ldr	r2, [pc, #84]	; (8006a3c <SystemInit+0x88>)
 80069e6:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80069ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069ee:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80069f0:	4b12      	ldr	r3, [pc, #72]	; (8006a3c <SystemInit+0x88>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a11      	ldr	r2, [pc, #68]	; (8006a3c <SystemInit+0x88>)
 80069f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80069fa:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80069fc:	4b0f      	ldr	r3, [pc, #60]	; (8006a3c <SystemInit+0x88>)
 80069fe:	685b      	ldr	r3, [r3, #4]
 8006a00:	4a0e      	ldr	r2, [pc, #56]	; (8006a3c <SystemInit+0x88>)
 8006a02:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8006a06:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8006a08:	4b0c      	ldr	r3, [pc, #48]	; (8006a3c <SystemInit+0x88>)
 8006a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a0c:	4a0b      	ldr	r2, [pc, #44]	; (8006a3c <SystemInit+0x88>)
 8006a0e:	f023 030f 	bic.w	r3, r3, #15
 8006a12:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8006a14:	4b09      	ldr	r3, [pc, #36]	; (8006a3c <SystemInit+0x88>)
 8006a16:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006a18:	4908      	ldr	r1, [pc, #32]	; (8006a3c <SystemInit+0x88>)
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <SystemInit+0x90>)
 8006a1c:	4013      	ands	r3, r2
 8006a1e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <SystemInit+0x88>)
 8006a22:	2200      	movs	r2, #0
 8006a24:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8006a26:	4b04      	ldr	r3, [pc, #16]	; (8006a38 <SystemInit+0x84>)
 8006a28:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8006a2c:	609a      	str	r2, [r3, #8]
#endif
}
 8006a2e:	bf00      	nop
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	e000ed00 	.word	0xe000ed00
 8006a3c:	40021000 	.word	0x40021000
 8006a40:	f87fc00c 	.word	0xf87fc00c
 8006a44:	ff00fccc 	.word	0xff00fccc

08006a48 <NVIC_GetPriorityGrouping>:
{
 8006a48:	b480      	push	{r7}
 8006a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a4c:	4b04      	ldr	r3, [pc, #16]	; (8006a60 <NVIC_GetPriorityGrouping+0x18>)
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	0a1b      	lsrs	r3, r3, #8
 8006a52:	f003 0307 	and.w	r3, r3, #7
}
 8006a56:	4618      	mov	r0, r3
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5e:	4770      	bx	lr
 8006a60:	e000ed00 	.word	0xe000ed00

08006a64 <NVIC_EnableIRQ>:
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	4603      	mov	r3, r0
 8006a6c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8006a6e:	79fb      	ldrb	r3, [r7, #7]
 8006a70:	f003 021f 	and.w	r2, r3, #31
 8006a74:	4907      	ldr	r1, [pc, #28]	; (8006a94 <NVIC_EnableIRQ+0x30>)
 8006a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006a7a:	095b      	lsrs	r3, r3, #5
 8006a7c:	2001      	movs	r0, #1
 8006a7e:	fa00 f202 	lsl.w	r2, r0, r2
 8006a82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8006a86:	bf00      	nop
 8006a88:	370c      	adds	r7, #12
 8006a8a:	46bd      	mov	sp, r7
 8006a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a90:	4770      	bx	lr
 8006a92:	bf00      	nop
 8006a94:	e000e100 	.word	0xe000e100

08006a98 <NVIC_SetPriority>:
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	6039      	str	r1, [r7, #0]
 8006aa2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8006aa4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	da0b      	bge.n	8006ac4 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	490c      	ldr	r1, [pc, #48]	; (8006ae4 <NVIC_SetPriority+0x4c>)
 8006ab2:	79fb      	ldrb	r3, [r7, #7]
 8006ab4:	f003 030f 	and.w	r3, r3, #15
 8006ab8:	3b04      	subs	r3, #4
 8006aba:	0112      	lsls	r2, r2, #4
 8006abc:	b2d2      	uxtb	r2, r2
 8006abe:	440b      	add	r3, r1
 8006ac0:	761a      	strb	r2, [r3, #24]
}
 8006ac2:	e009      	b.n	8006ad8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	b2da      	uxtb	r2, r3
 8006ac8:	4907      	ldr	r1, [pc, #28]	; (8006ae8 <NVIC_SetPriority+0x50>)
 8006aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ace:	0112      	lsls	r2, r2, #4
 8006ad0:	b2d2      	uxtb	r2, r2
 8006ad2:	440b      	add	r3, r1
 8006ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8006ad8:	bf00      	nop
 8006ada:	370c      	adds	r7, #12
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	e000ed00 	.word	0xe000ed00
 8006ae8:	e000e100 	.word	0xe000e100

08006aec <NVIC_EncodePriority>:
{
 8006aec:	b480      	push	{r7}
 8006aee:	b089      	sub	sp, #36	; 0x24
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	60f8      	str	r0, [r7, #12]
 8006af4:	60b9      	str	r1, [r7, #8]
 8006af6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	f003 0307 	and.w	r3, r3, #7
 8006afe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b00:	69fb      	ldr	r3, [r7, #28]
 8006b02:	f1c3 0307 	rsb	r3, r3, #7
 8006b06:	2b04      	cmp	r3, #4
 8006b08:	bf28      	it	cs
 8006b0a:	2304      	movcs	r3, #4
 8006b0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b0e:	69fb      	ldr	r3, [r7, #28]
 8006b10:	3304      	adds	r3, #4
 8006b12:	2b06      	cmp	r3, #6
 8006b14:	d902      	bls.n	8006b1c <NVIC_EncodePriority+0x30>
 8006b16:	69fb      	ldr	r3, [r7, #28]
 8006b18:	3b03      	subs	r3, #3
 8006b1a:	e000      	b.n	8006b1e <NVIC_EncodePriority+0x32>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	69bb      	ldr	r3, [r7, #24]
 8006b26:	fa02 f303 	lsl.w	r3, r2, r3
 8006b2a:	43da      	mvns	r2, r3
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	401a      	ands	r2, r3
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b34:	f04f 31ff 	mov.w	r1, #4294967295
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8006b3e:	43d9      	mvns	r1, r3
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b44:	4313      	orrs	r3, r2
}
 8006b46:	4618      	mov	r0, r3
 8006b48:	3724      	adds	r7, #36	; 0x24
 8006b4a:	46bd      	mov	sp, r7
 8006b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b50:	4770      	bx	lr
	...

08006b54 <LL_AHB1_GRP1_EnableClock>:
{
 8006b54:	b480      	push	{r7}
 8006b56:	b085      	sub	sp, #20
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHBENR, Periphs);
 8006b5c:	4b08      	ldr	r3, [pc, #32]	; (8006b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006b5e:	695a      	ldr	r2, [r3, #20]
 8006b60:	4907      	ldr	r1, [pc, #28]	; (8006b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	614b      	str	r3, [r1, #20]
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8006b68:	4b05      	ldr	r3, [pc, #20]	; (8006b80 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8006b6a:	695a      	ldr	r2, [r3, #20]
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4013      	ands	r3, r2
 8006b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006b72:	68fb      	ldr	r3, [r7, #12]
}
 8006b74:	bf00      	nop
 8006b76:	3714      	adds	r7, #20
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr
 8006b80:	40021000 	.word	0x40021000

08006b84 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 8006b8c:	4b08      	ldr	r3, [pc, #32]	; (8006bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006b8e:	69da      	ldr	r2, [r3, #28]
 8006b90:	4907      	ldr	r1, [pc, #28]	; (8006bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006b98:	4b05      	ldr	r3, [pc, #20]	; (8006bb0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8006b9a:	69da      	ldr	r2, [r3, #28]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
}
 8006ba4:	bf00      	nop
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr
 8006bb0:	40021000 	.word	0x40021000

08006bb4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8006bb4:	b480      	push	{r7}
 8006bb6:	b085      	sub	sp, #20
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8006bbc:	4b08      	ldr	r3, [pc, #32]	; (8006be0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006bbe:	699a      	ldr	r2, [r3, #24]
 8006bc0:	4907      	ldr	r1, [pc, #28]	; (8006be0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4313      	orrs	r3, r2
 8006bc6:	618b      	str	r3, [r1, #24]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	4013      	ands	r3, r2
 8006bd0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8006bd2:	68fb      	ldr	r3, [r7, #12]
}
 8006bd4:	bf00      	nop
 8006bd6:	3714      	adds	r7, #20
 8006bd8:	46bd      	mov	sp, r7
 8006bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bde:	4770      	bx	lr
 8006be0:	40021000 	.word	0x40021000

08006be4 <LL_USART_Enable>:
{
 8006be4:	b480      	push	{r7}
 8006be6:	b083      	sub	sp, #12
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f043 0201 	orr.w	r2, r3, #1
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	601a      	str	r2, [r3, #0]
}
 8006bf8:	bf00      	nop
 8006bfa:	370c      	adds	r7, #12
 8006bfc:	46bd      	mov	sp, r7
 8006bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c02:	4770      	bx	lr

08006c04 <LL_USART_ConfigAsyncMode>:
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	609a      	str	r2, [r3, #8]
}
 8006c24:	bf00      	nop
 8006c26:	370c      	adds	r7, #12
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr

08006c30 <LL_USART_EnableIT_RXNE>:
{
 8006c30:	b480      	push	{r7}
 8006c32:	b083      	sub	sp, #12
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f043 0220 	orr.w	r2, r3, #32
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	601a      	str	r2, [r3, #0]
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <LL_USART_DisableIT_CTS>:
{
 8006c50:	b480      	push	{r7}
 8006c52:	b083      	sub	sp, #12
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR3, USART_CR3_CTSIE);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	609a      	str	r2, [r3, #8]
}
 8006c64:	bf00      	nop
 8006c66:	370c      	adds	r7, #12
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c6e:	4770      	bx	lr

08006c70 <USART1_RegisterCallback>:
static void (* usart1_callback)(uint8_t) = 0;
static void (* usart2_callback)(uint8_t) = 0;


void USART1_RegisterCallback(void *callback)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
	usart1_callback = callback;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4a04      	ldr	r2, [pc, #16]	; (8006c8c <USART1_RegisterCallback+0x1c>)
 8006c7c:	6013      	str	r3, [r2, #0]
}
 8006c7e:	bf00      	nop
 8006c80:	370c      	adds	r7, #12
 8006c82:	46bd      	mov	sp, r7
 8006c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c88:	4770      	bx	lr
 8006c8a:	bf00      	nop
 8006c8c:	20000440 	.word	0x20000440

08006c90 <USART2_RegisterCallback>:
void USART2_RegisterCallback(void *callback)
{
 8006c90:	b480      	push	{r7}
 8006c92:	b083      	sub	sp, #12
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
	usart2_callback = callback;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a04      	ldr	r2, [pc, #16]	; (8006cac <USART2_RegisterCallback+0x1c>)
 8006c9c:	6013      	str	r3, [r2, #0]
}
 8006c9e:	bf00      	nop
 8006ca0:	370c      	adds	r7, #12
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca8:	4770      	bx	lr
 8006caa:	bf00      	nop
 8006cac:	20000444 	.word	0x20000444

08006cb0 <MX_USART1_UART_Init>:
/* USER CODE END 0 */

/* USART1 init function */

void MX_USART1_UART_Init(struct uartset parameters)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b092      	sub	sp, #72	; 0x48
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	1d3b      	adds	r3, r7, #4
 8006cb8:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006cbc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006cc0:	2200      	movs	r2, #0
 8006cc2:	601a      	str	r2, [r3, #0]
 8006cc4:	605a      	str	r2, [r3, #4]
 8006cc6:	609a      	str	r2, [r3, #8]
 8006cc8:	60da      	str	r2, [r3, #12]
 8006cca:	611a      	str	r2, [r3, #16]
 8006ccc:	615a      	str	r2, [r3, #20]
 8006cce:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cd0:	f107 0314 	add.w	r3, r7, #20
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	605a      	str	r2, [r3, #4]
 8006cda:	609a      	str	r2, [r3, #8]
 8006cdc:	60da      	str	r2, [r3, #12]
 8006cde:	611a      	str	r2, [r3, #16]
 8006ce0:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_USART1);
 8006ce2:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8006ce6:	f7ff ff65 	bl	8006bb4 <LL_APB2_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006cea:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006cee:	f7ff ff31 	bl	8006b54 <LL_AHB1_GRP1_EnableClock>
  /**USART1 GPIO Configuration  
  PA9   ------> USART1_TX
  PA10   ------> USART1_RX 
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_9|LL_GPIO_PIN_10;
 8006cf2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8006cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006d00:	2300      	movs	r3, #0
 8006d02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006d04:	2300      	movs	r3, #0
 8006d06:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8006d08:	2307      	movs	r3, #7
 8006d0a:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d0c:	f107 0314 	add.w	r3, r7, #20
 8006d10:	4619      	mov	r1, r3
 8006d12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006d16:	f7fa fb38 	bl	800138a <LL_GPIO_Init>

  /* USART1 interrupt Init */
  NVIC_SetPriority(USART1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006d1a:	f7ff fe95 	bl	8006a48 <NVIC_GetPriorityGrouping>
 8006d1e:	4603      	mov	r3, r0
 8006d20:	2200      	movs	r2, #0
 8006d22:	2100      	movs	r1, #0
 8006d24:	4618      	mov	r0, r3
 8006d26:	f7ff fee1 	bl	8006aec <NVIC_EncodePriority>
 8006d2a:	4603      	mov	r3, r0
 8006d2c:	4619      	mov	r1, r3
 8006d2e:	2025      	movs	r0, #37	; 0x25
 8006d30:	f7ff feb2 	bl	8006a98 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART1_IRQn);
 8006d34:	2025      	movs	r0, #37	; 0x25
 8006d36:	f7ff fe95 	bl	8006a64 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = parameters.baudrate;
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.DataWidth = parameters.datawidth;
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.StopBits = parameters.stopbit;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	637b      	str	r3, [r7, #52]	; 0x34
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006d46:	2300      	movs	r3, #0
 8006d48:	63bb      	str	r3, [r7, #56]	; 0x38
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006d4a:	230c      	movs	r3, #12
 8006d4c:	63fb      	str	r3, [r7, #60]	; 0x3c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	643b      	str	r3, [r7, #64]	; 0x40
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006d52:	2300      	movs	r3, #0
 8006d54:	647b      	str	r3, [r7, #68]	; 0x44
  LL_USART_Init(USART1, &USART_InitStruct);
 8006d56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d5a:	4619      	mov	r1, r3
 8006d5c:	4809      	ldr	r0, [pc, #36]	; (8006d84 <MX_USART1_UART_Init+0xd4>)
 8006d5e:	f7fa fd99 	bl	8001894 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART1);
 8006d62:	4808      	ldr	r0, [pc, #32]	; (8006d84 <MX_USART1_UART_Init+0xd4>)
 8006d64:	f7ff ff74 	bl	8006c50 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART1);
 8006d68:	4806      	ldr	r0, [pc, #24]	; (8006d84 <MX_USART1_UART_Init+0xd4>)
 8006d6a:	f7ff ff4b 	bl	8006c04 <LL_USART_ConfigAsyncMode>

  //Enable RXNE interrupt from USART
  LL_USART_EnableIT_RXNE(USART1);
 8006d6e:	4805      	ldr	r0, [pc, #20]	; (8006d84 <MX_USART1_UART_Init+0xd4>)
 8006d70:	f7ff ff5e 	bl	8006c30 <LL_USART_EnableIT_RXNE>

  LL_USART_Enable(USART1);
 8006d74:	4803      	ldr	r0, [pc, #12]	; (8006d84 <MX_USART1_UART_Init+0xd4>)
 8006d76:	f7ff ff35 	bl	8006be4 <LL_USART_Enable>

}
 8006d7a:	bf00      	nop
 8006d7c:	3748      	adds	r7, #72	; 0x48
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	40013800 	.word	0x40013800

08006d88 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(struct uartset parameters)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b092      	sub	sp, #72	; 0x48
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	1d3b      	adds	r3, r7, #4
 8006d90:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8006d94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006d98:	2200      	movs	r2, #0
 8006d9a:	601a      	str	r2, [r3, #0]
 8006d9c:	605a      	str	r2, [r3, #4]
 8006d9e:	609a      	str	r2, [r3, #8]
 8006da0:	60da      	str	r2, [r3, #12]
 8006da2:	611a      	str	r2, [r3, #16]
 8006da4:	615a      	str	r2, [r3, #20]
 8006da6:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006da8:	f107 0314 	add.w	r3, r7, #20
 8006dac:	2200      	movs	r2, #0
 8006dae:	601a      	str	r2, [r3, #0]
 8006db0:	605a      	str	r2, [r3, #4]
 8006db2:	609a      	str	r2, [r3, #8]
 8006db4:	60da      	str	r2, [r3, #12]
 8006db6:	611a      	str	r2, [r3, #16]
 8006db8:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8006dba:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006dbe:	f7ff fee1 	bl	8006b84 <LL_APB1_GRP1_EnableClock>
  
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8006dc2:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8006dc6:	f7ff fec5 	bl	8006b54 <LL_AHB1_GRP1_EnableClock>
  /**USART2 GPIO Configuration  
  PA2   ------> USART2_TX
  PA15   ------> USART2_RX 
  */
  GPIO_InitStruct.Pin = VCP_TX_Pin|LL_GPIO_PIN_3;
 8006dca:	230c      	movs	r3, #12
 8006dcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8006dce:	2302      	movs	r3, #2
 8006dd0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_HIGH;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8006dda:	2300      	movs	r3, #0
 8006ddc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8006dde:	2307      	movs	r3, #7
 8006de0:	62bb      	str	r3, [r7, #40]	; 0x28
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006de2:	f107 0314 	add.w	r3, r7, #20
 8006de6:	4619      	mov	r1, r3
 8006de8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8006dec:	f7fa facd 	bl	800138a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8006df0:	f7ff fe2a 	bl	8006a48 <NVIC_GetPriorityGrouping>
 8006df4:	4603      	mov	r3, r0
 8006df6:	2200      	movs	r2, #0
 8006df8:	2100      	movs	r1, #0
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	f7ff fe76 	bl	8006aec <NVIC_EncodePriority>
 8006e00:	4603      	mov	r3, r0
 8006e02:	4619      	mov	r1, r3
 8006e04:	2026      	movs	r0, #38	; 0x26
 8006e06:	f7ff fe47 	bl	8006a98 <NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 8006e0a:	2026      	movs	r0, #38	; 0x26
 8006e0c:	f7ff fe2a 	bl	8006a64 <NVIC_EnableIRQ>

  USART_InitStruct.BaudRate = parameters.baudrate;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.DataWidth = parameters.datawidth;
 8006e14:	68bb      	ldr	r3, [r7, #8]
 8006e16:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.StopBits = parameters.stopbit;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	637b      	str	r3, [r7, #52]	; 0x34
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	63bb      	str	r3, [r7, #56]	; 0x38
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8006e20:	230c      	movs	r3, #12
 8006e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8006e24:	2300      	movs	r3, #0
 8006e26:	643b      	str	r3, [r7, #64]	; 0x40
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	647b      	str	r3, [r7, #68]	; 0x44
  LL_USART_Init(USART2, &USART_InitStruct);
 8006e2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006e30:	4619      	mov	r1, r3
 8006e32:	4809      	ldr	r0, [pc, #36]	; (8006e58 <MX_USART2_UART_Init+0xd0>)
 8006e34:	f7fa fd2e 	bl	8001894 <LL_USART_Init>
  LL_USART_DisableIT_CTS(USART2);
 8006e38:	4807      	ldr	r0, [pc, #28]	; (8006e58 <MX_USART2_UART_Init+0xd0>)
 8006e3a:	f7ff ff09 	bl	8006c50 <LL_USART_DisableIT_CTS>
  LL_USART_ConfigAsyncMode(USART2);
 8006e3e:	4806      	ldr	r0, [pc, #24]	; (8006e58 <MX_USART2_UART_Init+0xd0>)
 8006e40:	f7ff fee0 	bl	8006c04 <LL_USART_ConfigAsyncMode>

  //Enable RXNE interrupt from USART
  LL_USART_EnableIT_RXNE(USART2);
 8006e44:	4804      	ldr	r0, [pc, #16]	; (8006e58 <MX_USART2_UART_Init+0xd0>)
 8006e46:	f7ff fef3 	bl	8006c30 <LL_USART_EnableIT_RXNE>

  LL_USART_Enable(USART2);
 8006e4a:	4803      	ldr	r0, [pc, #12]	; (8006e58 <MX_USART2_UART_Init+0xd0>)
 8006e4c:	f7ff feca 	bl	8006be4 <LL_USART_Enable>

}
 8006e50:	bf00      	nop
 8006e52:	3748      	adds	r7, #72	; 0x48
 8006e54:	46bd      	mov	sp, r7
 8006e56:	bd80      	pop	{r7, pc}
 8006e58:	40004400 	.word	0x40004400

08006e5c <rx_usart1>:

/* USER CODE BEGIN 1 */
void rx_usart1(uint8_t ch)
{
 8006e5c:	b580      	push	{r7, lr}
 8006e5e:	b082      	sub	sp, #8
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	4603      	mov	r3, r0
 8006e64:	71fb      	strb	r3, [r7, #7]
	if (usart1_callback != 0)
 8006e66:	4b06      	ldr	r3, [pc, #24]	; (8006e80 <rx_usart1+0x24>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d004      	beq.n	8006e78 <rx_usart1+0x1c>
	{
		usart1_callback(ch);
 8006e6e:	4b04      	ldr	r3, [pc, #16]	; (8006e80 <rx_usart1+0x24>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	79fa      	ldrb	r2, [r7, #7]
 8006e74:	4610      	mov	r0, r2
 8006e76:	4798      	blx	r3
	}
}
 8006e78:	bf00      	nop
 8006e7a:	3708      	adds	r7, #8
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	bd80      	pop	{r7, pc}
 8006e80:	20000440 	.word	0x20000440

08006e84 <rx_usart2>:
void rx_usart2(uint8_t ch)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b082      	sub	sp, #8
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	4603      	mov	r3, r0
 8006e8c:	71fb      	strb	r3, [r7, #7]
	if (usart2_callback != 0)
 8006e8e:	4b06      	ldr	r3, [pc, #24]	; (8006ea8 <rx_usart2+0x24>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d004      	beq.n	8006ea0 <rx_usart2+0x1c>
	{
		usart2_callback(ch);
 8006e96:	4b04      	ldr	r3, [pc, #16]	; (8006ea8 <rx_usart2+0x24>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	79fa      	ldrb	r2, [r7, #7]
 8006e9c:	4610      	mov	r0, r2
 8006e9e:	4798      	blx	r3
	}
}
 8006ea0:	bf00      	nop
 8006ea2:	3708      	adds	r7, #8
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}
 8006ea8:	20000444 	.word	0x20000444

08006eac <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006eac:	b580      	push	{r7, lr}
 8006eae:	b082      	sub	sp, #8
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    return SD_disk_initialize(pdrv);
 8006eb6:	79fb      	ldrb	r3, [r7, #7]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f7fe fcbd 	bl	8005838 <SD_disk_initialize>
 8006ebe:	4603      	mov	r3, r0
 8006ec0:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006ec2:	4618      	mov	r0, r3
 8006ec4:	3708      	adds	r7, #8
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	bd80      	pop	{r7, pc}

08006eca <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006eca:	b580      	push	{r7, lr}
 8006ecc:	b082      	sub	sp, #8
 8006ece:	af00      	add	r7, sp, #0
 8006ed0:	4603      	mov	r3, r0
 8006ed2:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    return SD_disk_status(pdrv);
 8006ed4:	79fb      	ldrb	r3, [r7, #7]
 8006ed6:	4618      	mov	r0, r3
 8006ed8:	f7fe fd98 	bl	8005a0c <SD_disk_status>
 8006edc:	4603      	mov	r3, r0
 8006ede:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b084      	sub	sp, #16
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	60b9      	str	r1, [r7, #8]
 8006ef0:	607a      	str	r2, [r7, #4]
 8006ef2:	603b      	str	r3, [r7, #0]
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return SD_disk_read(pdrv, buff, sector, count);
 8006ef8:	7bf8      	ldrb	r0, [r7, #15]
 8006efa:	683b      	ldr	r3, [r7, #0]
 8006efc:	687a      	ldr	r2, [r7, #4]
 8006efe:	68b9      	ldr	r1, [r7, #8]
 8006f00:	f7fe fd9a 	bl	8005a38 <SD_disk_read>
 8006f04:	4603      	mov	r3, r0
 8006f06:	b2db      	uxtb	r3, r3
  /* USER CODE END READ */
}
 8006f08:	4618      	mov	r0, r3
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}

08006f10 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{ 
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b084      	sub	sp, #16
 8006f14:	af00      	add	r7, sp, #0
 8006f16:	60b9      	str	r1, [r7, #8]
 8006f18:	607a      	str	r2, [r7, #4]
 8006f1a:	603b      	str	r3, [r7, #0]
 8006f1c:	4603      	mov	r3, r0
 8006f1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return SD_disk_write(pdrv, buff, sector, count);
 8006f20:	7bf8      	ldrb	r0, [r7, #15]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	f7fe fdf0 	bl	8005b0c <SD_disk_write>
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	b2db      	uxtb	r3, r3
  /* USER CODE END WRITE */
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3710      	adds	r7, #16
 8006f34:	46bd      	mov	sp, r7
 8006f36:	bd80      	pop	{r7, pc}

08006f38 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	4603      	mov	r3, r0
 8006f40:	603a      	str	r2, [r7, #0]
 8006f42:	71fb      	strb	r3, [r7, #7]
 8006f44:	460b      	mov	r3, r1
 8006f46:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    return SD_disk_ioctl(pdrv, cmd, buff);
 8006f48:	79fb      	ldrb	r3, [r7, #7]
 8006f4a:	79b9      	ldrb	r1, [r7, #6]
 8006f4c:	683a      	ldr	r2, [r7, #0]
 8006f4e:	4618      	mov	r0, r3
 8006f50:	f7fe fe60 	bl	8005c14 <SD_disk_ioctl>
 8006f54:	4603      	mov	r3, r0
 8006f56:	b2db      	uxtb	r3, r3
  /* USER CODE END IOCTL */
}
 8006f58:	4618      	mov	r0, r3
 8006f5a:	3708      	adds	r7, #8
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	bd80      	pop	{r7, pc}

08006f60 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006f60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006f98 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8006f64:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8006f66:	e003      	b.n	8006f70 <LoopCopyDataInit>

08006f68 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8006f68:	4b0c      	ldr	r3, [pc, #48]	; (8006f9c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8006f6a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8006f6c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8006f6e:	3104      	adds	r1, #4

08006f70 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8006f70:	480b      	ldr	r0, [pc, #44]	; (8006fa0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8006f72:	4b0c      	ldr	r3, [pc, #48]	; (8006fa4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8006f74:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8006f76:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8006f78:	d3f6      	bcc.n	8006f68 <CopyDataInit>
	ldr	r2, =_sbss
 8006f7a:	4a0b      	ldr	r2, [pc, #44]	; (8006fa8 <LoopForever+0x12>)
	b	LoopFillZerobss
 8006f7c:	e002      	b.n	8006f84 <LoopFillZerobss>

08006f7e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8006f7e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8006f80:	f842 3b04 	str.w	r3, [r2], #4

08006f84 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8006f84:	4b09      	ldr	r3, [pc, #36]	; (8006fac <LoopForever+0x16>)
	cmp	r2, r3
 8006f86:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8006f88:	d3f9      	bcc.n	8006f7e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8006f8a:	f7ff fd13 	bl	80069b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006f8e:	f000 f815 	bl	8006fbc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8006f92:	f7ff f9dd 	bl	8006350 <main>

08006f96 <LoopForever>:

LoopForever:
    b LoopForever
 8006f96:	e7fe      	b.n	8006f96 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8006f98:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8006f9c:	08007908 	.word	0x08007908
	ldr	r0, =_sdata
 8006fa0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8006fa4:	200001f0 	.word	0x200001f0
	ldr	r2, =_sbss
 8006fa8:	200001f0 	.word	0x200001f0
	ldr	r3, = _ebss
 8006fac:	2000176c 	.word	0x2000176c

08006fb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8006fb0:	e7fe      	b.n	8006fb0 <ADC1_2_IRQHandler>

08006fb2 <atoi>:
 8006fb2:	220a      	movs	r2, #10
 8006fb4:	2100      	movs	r1, #0
 8006fb6:	f000 b8c7 	b.w	8007148 <strtol>
	...

08006fbc <__libc_init_array>:
 8006fbc:	b570      	push	{r4, r5, r6, lr}
 8006fbe:	4e0d      	ldr	r6, [pc, #52]	; (8006ff4 <__libc_init_array+0x38>)
 8006fc0:	4c0d      	ldr	r4, [pc, #52]	; (8006ff8 <__libc_init_array+0x3c>)
 8006fc2:	1ba4      	subs	r4, r4, r6
 8006fc4:	10a4      	asrs	r4, r4, #2
 8006fc6:	2500      	movs	r5, #0
 8006fc8:	42a5      	cmp	r5, r4
 8006fca:	d109      	bne.n	8006fe0 <__libc_init_array+0x24>
 8006fcc:	4e0b      	ldr	r6, [pc, #44]	; (8006ffc <__libc_init_array+0x40>)
 8006fce:	4c0c      	ldr	r4, [pc, #48]	; (8007000 <__libc_init_array+0x44>)
 8006fd0:	f000 f8f2 	bl	80071b8 <_init>
 8006fd4:	1ba4      	subs	r4, r4, r6
 8006fd6:	10a4      	asrs	r4, r4, #2
 8006fd8:	2500      	movs	r5, #0
 8006fda:	42a5      	cmp	r5, r4
 8006fdc:	d105      	bne.n	8006fea <__libc_init_array+0x2e>
 8006fde:	bd70      	pop	{r4, r5, r6, pc}
 8006fe0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fe4:	4798      	blx	r3
 8006fe6:	3501      	adds	r5, #1
 8006fe8:	e7ee      	b.n	8006fc8 <__libc_init_array+0xc>
 8006fea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006fee:	4798      	blx	r3
 8006ff0:	3501      	adds	r5, #1
 8006ff2:	e7f2      	b.n	8006fda <__libc_init_array+0x1e>
 8006ff4:	08007900 	.word	0x08007900
 8006ff8:	08007900 	.word	0x08007900
 8006ffc:	08007900 	.word	0x08007900
 8007000:	08007904 	.word	0x08007904

08007004 <strchr>:
 8007004:	b2c9      	uxtb	r1, r1
 8007006:	4603      	mov	r3, r0
 8007008:	f810 2b01 	ldrb.w	r2, [r0], #1
 800700c:	b11a      	cbz	r2, 8007016 <strchr+0x12>
 800700e:	428a      	cmp	r2, r1
 8007010:	d1f9      	bne.n	8007006 <strchr+0x2>
 8007012:	4618      	mov	r0, r3
 8007014:	4770      	bx	lr
 8007016:	2900      	cmp	r1, #0
 8007018:	bf18      	it	ne
 800701a:	2300      	movne	r3, #0
 800701c:	e7f9      	b.n	8007012 <strchr+0xe>

0800701e <strstr>:
 800701e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007020:	7803      	ldrb	r3, [r0, #0]
 8007022:	b17b      	cbz	r3, 8007044 <strstr+0x26>
 8007024:	4604      	mov	r4, r0
 8007026:	7823      	ldrb	r3, [r4, #0]
 8007028:	4620      	mov	r0, r4
 800702a:	1c66      	adds	r6, r4, #1
 800702c:	b17b      	cbz	r3, 800704e <strstr+0x30>
 800702e:	1e4a      	subs	r2, r1, #1
 8007030:	1e63      	subs	r3, r4, #1
 8007032:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 8007036:	b14d      	cbz	r5, 800704c <strstr+0x2e>
 8007038:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 800703c:	42af      	cmp	r7, r5
 800703e:	4634      	mov	r4, r6
 8007040:	d0f7      	beq.n	8007032 <strstr+0x14>
 8007042:	e7f0      	b.n	8007026 <strstr+0x8>
 8007044:	780b      	ldrb	r3, [r1, #0]
 8007046:	2b00      	cmp	r3, #0
 8007048:	bf18      	it	ne
 800704a:	2000      	movne	r0, #0
 800704c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704e:	4618      	mov	r0, r3
 8007050:	e7fc      	b.n	800704c <strstr+0x2e>

08007052 <_strtol_l.isra.0>:
 8007052:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007056:	4680      	mov	r8, r0
 8007058:	4689      	mov	r9, r1
 800705a:	4692      	mov	sl, r2
 800705c:	461e      	mov	r6, r3
 800705e:	460f      	mov	r7, r1
 8007060:	463d      	mov	r5, r7
 8007062:	9808      	ldr	r0, [sp, #32]
 8007064:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007068:	f000 f884 	bl	8007174 <__locale_ctype_ptr_l>
 800706c:	4420      	add	r0, r4
 800706e:	7843      	ldrb	r3, [r0, #1]
 8007070:	f013 0308 	ands.w	r3, r3, #8
 8007074:	d132      	bne.n	80070dc <_strtol_l.isra.0+0x8a>
 8007076:	2c2d      	cmp	r4, #45	; 0x2d
 8007078:	d132      	bne.n	80070e0 <_strtol_l.isra.0+0x8e>
 800707a:	787c      	ldrb	r4, [r7, #1]
 800707c:	1cbd      	adds	r5, r7, #2
 800707e:	2201      	movs	r2, #1
 8007080:	2e00      	cmp	r6, #0
 8007082:	d05d      	beq.n	8007140 <_strtol_l.isra.0+0xee>
 8007084:	2e10      	cmp	r6, #16
 8007086:	d109      	bne.n	800709c <_strtol_l.isra.0+0x4a>
 8007088:	2c30      	cmp	r4, #48	; 0x30
 800708a:	d107      	bne.n	800709c <_strtol_l.isra.0+0x4a>
 800708c:	782b      	ldrb	r3, [r5, #0]
 800708e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8007092:	2b58      	cmp	r3, #88	; 0x58
 8007094:	d14f      	bne.n	8007136 <_strtol_l.isra.0+0xe4>
 8007096:	786c      	ldrb	r4, [r5, #1]
 8007098:	2610      	movs	r6, #16
 800709a:	3502      	adds	r5, #2
 800709c:	2a00      	cmp	r2, #0
 800709e:	bf14      	ite	ne
 80070a0:	f04f 4100 	movne.w	r1, #2147483648	; 0x80000000
 80070a4:	f06f 4100 	mvneq.w	r1, #2147483648	; 0x80000000
 80070a8:	2700      	movs	r7, #0
 80070aa:	fbb1 fcf6 	udiv	ip, r1, r6
 80070ae:	4638      	mov	r0, r7
 80070b0:	fb06 1e1c 	mls	lr, r6, ip, r1
 80070b4:	f1a4 0330 	sub.w	r3, r4, #48	; 0x30
 80070b8:	2b09      	cmp	r3, #9
 80070ba:	d817      	bhi.n	80070ec <_strtol_l.isra.0+0x9a>
 80070bc:	461c      	mov	r4, r3
 80070be:	42a6      	cmp	r6, r4
 80070c0:	dd23      	ble.n	800710a <_strtol_l.isra.0+0xb8>
 80070c2:	1c7b      	adds	r3, r7, #1
 80070c4:	d007      	beq.n	80070d6 <_strtol_l.isra.0+0x84>
 80070c6:	4584      	cmp	ip, r0
 80070c8:	d31c      	bcc.n	8007104 <_strtol_l.isra.0+0xb2>
 80070ca:	d101      	bne.n	80070d0 <_strtol_l.isra.0+0x7e>
 80070cc:	45a6      	cmp	lr, r4
 80070ce:	db19      	blt.n	8007104 <_strtol_l.isra.0+0xb2>
 80070d0:	fb00 4006 	mla	r0, r0, r6, r4
 80070d4:	2701      	movs	r7, #1
 80070d6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80070da:	e7eb      	b.n	80070b4 <_strtol_l.isra.0+0x62>
 80070dc:	462f      	mov	r7, r5
 80070de:	e7bf      	b.n	8007060 <_strtol_l.isra.0+0xe>
 80070e0:	2c2b      	cmp	r4, #43	; 0x2b
 80070e2:	bf04      	itt	eq
 80070e4:	1cbd      	addeq	r5, r7, #2
 80070e6:	787c      	ldrbeq	r4, [r7, #1]
 80070e8:	461a      	mov	r2, r3
 80070ea:	e7c9      	b.n	8007080 <_strtol_l.isra.0+0x2e>
 80070ec:	f1a4 0341 	sub.w	r3, r4, #65	; 0x41
 80070f0:	2b19      	cmp	r3, #25
 80070f2:	d801      	bhi.n	80070f8 <_strtol_l.isra.0+0xa6>
 80070f4:	3c37      	subs	r4, #55	; 0x37
 80070f6:	e7e2      	b.n	80070be <_strtol_l.isra.0+0x6c>
 80070f8:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
 80070fc:	2b19      	cmp	r3, #25
 80070fe:	d804      	bhi.n	800710a <_strtol_l.isra.0+0xb8>
 8007100:	3c57      	subs	r4, #87	; 0x57
 8007102:	e7dc      	b.n	80070be <_strtol_l.isra.0+0x6c>
 8007104:	f04f 37ff 	mov.w	r7, #4294967295
 8007108:	e7e5      	b.n	80070d6 <_strtol_l.isra.0+0x84>
 800710a:	1c7b      	adds	r3, r7, #1
 800710c:	d108      	bne.n	8007120 <_strtol_l.isra.0+0xce>
 800710e:	2322      	movs	r3, #34	; 0x22
 8007110:	f8c8 3000 	str.w	r3, [r8]
 8007114:	4608      	mov	r0, r1
 8007116:	f1ba 0f00 	cmp.w	sl, #0
 800711a:	d107      	bne.n	800712c <_strtol_l.isra.0+0xda>
 800711c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007120:	b102      	cbz	r2, 8007124 <_strtol_l.isra.0+0xd2>
 8007122:	4240      	negs	r0, r0
 8007124:	f1ba 0f00 	cmp.w	sl, #0
 8007128:	d0f8      	beq.n	800711c <_strtol_l.isra.0+0xca>
 800712a:	b10f      	cbz	r7, 8007130 <_strtol_l.isra.0+0xde>
 800712c:	f105 39ff 	add.w	r9, r5, #4294967295
 8007130:	f8ca 9000 	str.w	r9, [sl]
 8007134:	e7f2      	b.n	800711c <_strtol_l.isra.0+0xca>
 8007136:	2430      	movs	r4, #48	; 0x30
 8007138:	2e00      	cmp	r6, #0
 800713a:	d1af      	bne.n	800709c <_strtol_l.isra.0+0x4a>
 800713c:	2608      	movs	r6, #8
 800713e:	e7ad      	b.n	800709c <_strtol_l.isra.0+0x4a>
 8007140:	2c30      	cmp	r4, #48	; 0x30
 8007142:	d0a3      	beq.n	800708c <_strtol_l.isra.0+0x3a>
 8007144:	260a      	movs	r6, #10
 8007146:	e7a9      	b.n	800709c <_strtol_l.isra.0+0x4a>

08007148 <strtol>:
 8007148:	4b08      	ldr	r3, [pc, #32]	; (800716c <strtol+0x24>)
 800714a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800714c:	681c      	ldr	r4, [r3, #0]
 800714e:	4d08      	ldr	r5, [pc, #32]	; (8007170 <strtol+0x28>)
 8007150:	6a23      	ldr	r3, [r4, #32]
 8007152:	2b00      	cmp	r3, #0
 8007154:	bf08      	it	eq
 8007156:	462b      	moveq	r3, r5
 8007158:	9300      	str	r3, [sp, #0]
 800715a:	4613      	mov	r3, r2
 800715c:	460a      	mov	r2, r1
 800715e:	4601      	mov	r1, r0
 8007160:	4620      	mov	r0, r4
 8007162:	f7ff ff76 	bl	8007052 <_strtol_l.isra.0>
 8007166:	b003      	add	sp, #12
 8007168:	bd30      	pop	{r4, r5, pc}
 800716a:	bf00      	nop
 800716c:	20000020 	.word	0x20000020
 8007170:	20000084 	.word	0x20000084

08007174 <__locale_ctype_ptr_l>:
 8007174:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
 8007178:	4770      	bx	lr

0800717a <__ascii_mbtowc>:
 800717a:	b082      	sub	sp, #8
 800717c:	b901      	cbnz	r1, 8007180 <__ascii_mbtowc+0x6>
 800717e:	a901      	add	r1, sp, #4
 8007180:	b142      	cbz	r2, 8007194 <__ascii_mbtowc+0x1a>
 8007182:	b14b      	cbz	r3, 8007198 <__ascii_mbtowc+0x1e>
 8007184:	7813      	ldrb	r3, [r2, #0]
 8007186:	600b      	str	r3, [r1, #0]
 8007188:	7812      	ldrb	r2, [r2, #0]
 800718a:	1c10      	adds	r0, r2, #0
 800718c:	bf18      	it	ne
 800718e:	2001      	movne	r0, #1
 8007190:	b002      	add	sp, #8
 8007192:	4770      	bx	lr
 8007194:	4610      	mov	r0, r2
 8007196:	e7fb      	b.n	8007190 <__ascii_mbtowc+0x16>
 8007198:	f06f 0001 	mvn.w	r0, #1
 800719c:	e7f8      	b.n	8007190 <__ascii_mbtowc+0x16>

0800719e <__ascii_wctomb>:
 800719e:	b149      	cbz	r1, 80071b4 <__ascii_wctomb+0x16>
 80071a0:	2aff      	cmp	r2, #255	; 0xff
 80071a2:	bf85      	ittet	hi
 80071a4:	238a      	movhi	r3, #138	; 0x8a
 80071a6:	6003      	strhi	r3, [r0, #0]
 80071a8:	700a      	strbls	r2, [r1, #0]
 80071aa:	f04f 30ff 	movhi.w	r0, #4294967295
 80071ae:	bf98      	it	ls
 80071b0:	2001      	movls	r0, #1
 80071b2:	4770      	bx	lr
 80071b4:	4608      	mov	r0, r1
 80071b6:	4770      	bx	lr

080071b8 <_init>:
 80071b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071ba:	bf00      	nop
 80071bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071be:	bc08      	pop	{r3}
 80071c0:	469e      	mov	lr, r3
 80071c2:	4770      	bx	lr

080071c4 <_fini>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	bf00      	nop
 80071c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80071ca:	bc08      	pop	{r3}
 80071cc:	469e      	mov	lr, r3
 80071ce:	4770      	bx	lr
